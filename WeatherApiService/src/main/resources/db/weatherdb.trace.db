2024-04-21 19:19:26.273299+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "LOCATIONS" not found (this database is empty); SQL statement:
select l1_0.code,l1_0.city_name,l1_0.country_code,l1_0.country_name,l1_0.enabled,l1_0.region_name,l1_0.trashed from locations l1_0 where l1_0.code=? [42104-224]
2024-04-21 19:19:26.425597+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "LOCATIONS" not found (this database is empty); SQL statement:
select l1_0.code,l1_0.city_name,l1_0.country_code,l1_0.country_name,l1_0.enabled,l1_0.region_name,l1_0.trashed from locations l1_0 [42104-224]
2024-04-21 19:35:00.447509+03:00 database: flush
org.h2.message.DbException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.get(DbException.java:212)
	at org.h2.message.DbException.convert(DbException.java:407)
	at org.h2.mvstore.db.Store.lambda$new$0(Store.java:122)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:1546)
	at org.h2.mvstore.MVStore.panic(MVStore.java:371)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:291)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:2035)
	at org.h2.mvstore.db.Store.<init>(Store.java:133)
	at org.h2.engine.Database.<init>(Database.java:326)
	at org.h2.engine.Engine.openSession(Engine.java:92)
	at org.h2.engine.Engine.openSession(Engine.java:222)
	at org.h2.engine.Engine.createSession(Engine.java:201)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:343)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:125)
	at org.h2.Driver.connect(Driver.java:59)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:160)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:118)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:342)
	at org.springframework.boot.jdbc.EmbeddedDatabaseConnection.isEmbedded(EmbeddedDatabaseConnection.java:168)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.isEmbeddedDatabase(DataSourceScriptDatabaseInitializer.java:67)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.isEnabled(AbstractScriptDatabaseInitializer.java:84)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applySchemaScripts(AbstractScriptDatabaseInitializer.java:98)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1234)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:952)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1454)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:553)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:225)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:152)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:130)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:142)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:98)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:260)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:163)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:378)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:383)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:378)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:290)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:289)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:279)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:278)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:106)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:105)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:94)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:52)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:70)
	at org.eclipse.jdt.internal.junit5.runner.JUnit5TestReference.run(JUnit5TestReference.java:98)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:529)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:756)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:452)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:566)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	... 130 more
Caused by: org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]
	at org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:996)
	at org.h2.mvstore.SingleFileStore.lockFileChannel(SingleFileStore.java:143)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:117)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:81)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:286)
	... 124 more
2024-04-21 19:35:01.519614+03:00 database: flush
org.h2.message.DbException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.get(DbException.java:212)
	at org.h2.message.DbException.convert(DbException.java:407)
	at org.h2.mvstore.db.Store.lambda$new$0(Store.java:122)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:1546)
	at org.h2.mvstore.MVStore.panic(MVStore.java:371)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:291)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:2035)
	at org.h2.mvstore.db.Store.<init>(Store.java:133)
	at org.h2.engine.Database.<init>(Database.java:326)
	at org.h2.engine.Engine.openSession(Engine.java:92)
	at org.h2.engine.Engine.openSession(Engine.java:222)
	at org.h2.engine.Engine.createSession(Engine.java:201)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:343)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:125)
	at org.h2.Driver.connect(Driver.java:59)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:160)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:118)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:342)
	at org.springframework.boot.jdbc.EmbeddedDatabaseConnection.isEmbedded(EmbeddedDatabaseConnection.java:168)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateDefaultDdlAutoProvider.getDefaultDdlAuto(HibernateDefaultDdlAutoProvider.java:42)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration.lambda$getVendorProperties$1(HibernateJpaConfiguration.java:142)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateSettings.getDdlAuto(HibernateSettings.java:41)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties.determineDdlAuto(HibernateProperties.java:118)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties.getAdditionalProperties(HibernateProperties.java:87)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties.determineHibernateProperties(HibernateProperties.java:80)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration.getVendorProperties(HibernateJpaConfiguration.java:143)
	at org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration.entityManagerFactory(JpaBaseConfiguration.java:132)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:140)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:644)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:636)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1234)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:952)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1454)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:553)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:225)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:152)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:130)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:142)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:98)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:260)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:163)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:378)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:383)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:378)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:290)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:289)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:279)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:278)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:106)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:105)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:94)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:52)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:70)
	at org.eclipse.jdt.internal.junit5.runner.JUnit5TestReference.run(JUnit5TestReference.java:98)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:529)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:756)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:452)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:566)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	... 137 more
Caused by: org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]
	at org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:996)
	at org.h2.mvstore.SingleFileStore.lockFileChannel(SingleFileStore.java:143)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:117)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:81)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:286)
	... 131 more
2024-04-21 19:35:03.199397+03:00 database: flush
org.h2.message.DbException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.get(DbException.java:212)
	at org.h2.message.DbException.convert(DbException.java:407)
	at org.h2.mvstore.db.Store.lambda$new$0(Store.java:122)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:1546)
	at org.h2.mvstore.MVStore.panic(MVStore.java:371)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:291)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:2035)
	at org.h2.mvstore.db.Store.<init>(Store.java:133)
	at org.h2.engine.Database.<init>(Database.java:326)
	at org.h2.engine.Engine.openSession(Engine.java:92)
	at org.h2.engine.Engine.openSession(Engine.java:222)
	at org.h2.engine.Engine.createSession(Engine.java:201)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:343)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:125)
	at org.h2.Driver.connect(Driver.java:59)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.obtainConnection(JdbcEnvironmentInitiator.java:428)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcIsolationDelegate.delegateWork(JdbcIsolationDelegate.java:61)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentUsingJdbcMetadata(JdbcEnvironmentInitiator.java:276)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:107)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:130)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:238)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:215)
	at org.hibernate.boot.model.relational.Database.<init>(Database.java:45)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getDatabase(InFlightMetadataCollectorImpl.java:223)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:191)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:170)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1432)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1503)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:390)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:366)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1234)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:952)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1454)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:553)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:225)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:152)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:130)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:142)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:98)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:260)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:163)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:378)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:383)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:378)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:290)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:289)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:279)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:278)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:106)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:105)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:94)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:52)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:70)
	at org.eclipse.jdt.internal.junit5.runner.JUnit5TestReference.run(JUnit5TestReference.java:98)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:529)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:756)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:452)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:566)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	... 138 more
Caused by: org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]
	at org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:996)
	at org.h2.mvstore.SingleFileStore.lockFileChannel(SingleFileStore.java:143)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:117)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:81)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:286)
	... 132 more
2024-04-21 19:35:06.154019+03:00 database: flush
org.h2.message.DbException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.get(DbException.java:212)
	at org.h2.message.DbException.convert(DbException.java:407)
	at org.h2.mvstore.db.Store.lambda$new$0(Store.java:122)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:1546)
	at org.h2.mvstore.MVStore.panic(MVStore.java:371)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:291)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:2035)
	at org.h2.mvstore.db.Store.<init>(Store.java:133)
	at org.h2.engine.Database.<init>(Database.java:326)
	at org.h2.engine.Engine.openSession(Engine.java:92)
	at org.h2.engine.Engine.openSession(Engine.java:222)
	at org.h2.engine.Engine.createSession(Engine.java:201)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:343)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:125)
	at org.h2.Driver.connect(Driver.java:59)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.internal.NonContextualJdbcConnectionAccess.obtainConnection(NonContextualJdbcConnectionAccess.java:46)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.acquireConnectionIfNeeded(LogicalConnectionManagedImpl.java:113)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.getPhysicalConnection(LogicalConnectionManagedImpl.java:143)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.getConnectionForTransactionManagement(LogicalConnectionManagedImpl.java:273)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.begin(LogicalConnectionManagedImpl.java:281)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.begin(JdbcResourceLocalTransactionCoordinatorImpl.java:232)
	at org.hibernate.engine.transaction.internal.TransactionImpl.begin(TransactionImpl.java:83)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.beginTransaction(HibernateJpaDialect.java:176)
	at org.springframework.orm.jpa.JpaTransactionManager.doBegin(JpaTransactionManager.java:420)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.startTransaction(AbstractPlatformTransactionManager.java:531)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:405)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:236)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:320)
	at org.springframework.test.context.junit.jupiter.SpringExtension.beforeEach(SpringExtension.java:240)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeBeforeEachCallbacks$2(TestMethodTestDescriptor.java:167)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeBeforeMethodsOrCallbacksUntilExceptionOccurs$6(TestMethodTestDescriptor.java:203)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeBeforeMethodsOrCallbacksUntilExceptionOccurs(TestMethodTestDescriptor.java:203)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeBeforeEachCallbacks(TestMethodTestDescriptor.java:166)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:133)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:94)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:52)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:70)
	at org.eclipse.jdt.internal.junit5.runner.JUnit5TestReference.run(JUnit5TestReference.java:98)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:529)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:756)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:452)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:566)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	... 92 more
Caused by: org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]
	at org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:996)
	at org.h2.mvstore.SingleFileStore.lockFileChannel(SingleFileStore.java:143)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:117)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:81)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:286)
	... 86 more
2024-04-21 19:53:23.434371+03:00 database: flush
org.h2.message.DbException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.get(DbException.java:212)
	at org.h2.message.DbException.convert(DbException.java:407)
	at org.h2.mvstore.db.Store.lambda$new$0(Store.java:122)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:1546)
	at org.h2.mvstore.MVStore.panic(MVStore.java:371)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:291)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:2035)
	at org.h2.mvstore.db.Store.<init>(Store.java:133)
	at org.h2.engine.Database.<init>(Database.java:326)
	at org.h2.engine.Engine.openSession(Engine.java:92)
	at org.h2.engine.Engine.openSession(Engine.java:222)
	at org.h2.engine.Engine.createSession(Engine.java:201)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:343)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:125)
	at org.h2.Driver.connect(Driver.java:59)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:160)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:118)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:342)
	at org.springframework.boot.jdbc.EmbeddedDatabaseConnection.isEmbedded(EmbeddedDatabaseConnection.java:168)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.isEmbeddedDatabase(DataSourceScriptDatabaseInitializer.java:67)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.isEnabled(AbstractScriptDatabaseInitializer.java:84)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applySchemaScripts(AbstractScriptDatabaseInitializer.java:98)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1234)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:952)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1454)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:553)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:225)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:152)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:130)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:142)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:98)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:260)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:163)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:378)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:383)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:378)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:290)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:289)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:279)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:278)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:106)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:105)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:94)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:52)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:70)
	at org.eclipse.jdt.internal.junit5.runner.JUnit5TestReference.run(JUnit5TestReference.java:98)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:529)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:756)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:452)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:566)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	... 130 more
Caused by: org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]
	at org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:996)
	at org.h2.mvstore.SingleFileStore.lockFileChannel(SingleFileStore.java:143)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:117)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:81)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:286)
	... 124 more
2024-04-21 19:53:24.513917+03:00 database: flush
org.h2.message.DbException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.get(DbException.java:212)
	at org.h2.message.DbException.convert(DbException.java:407)
	at org.h2.mvstore.db.Store.lambda$new$0(Store.java:122)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:1546)
	at org.h2.mvstore.MVStore.panic(MVStore.java:371)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:291)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:2035)
	at org.h2.mvstore.db.Store.<init>(Store.java:133)
	at org.h2.engine.Database.<init>(Database.java:326)
	at org.h2.engine.Engine.openSession(Engine.java:92)
	at org.h2.engine.Engine.openSession(Engine.java:222)
	at org.h2.engine.Engine.createSession(Engine.java:201)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:343)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:125)
	at org.h2.Driver.connect(Driver.java:59)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:160)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:118)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:342)
	at org.springframework.boot.jdbc.EmbeddedDatabaseConnection.isEmbedded(EmbeddedDatabaseConnection.java:168)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateDefaultDdlAutoProvider.getDefaultDdlAuto(HibernateDefaultDdlAutoProvider.java:42)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration.lambda$getVendorProperties$1(HibernateJpaConfiguration.java:142)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateSettings.getDdlAuto(HibernateSettings.java:41)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties.determineDdlAuto(HibernateProperties.java:118)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties.getAdditionalProperties(HibernateProperties.java:87)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties.determineHibernateProperties(HibernateProperties.java:80)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration.getVendorProperties(HibernateJpaConfiguration.java:143)
	at org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration.entityManagerFactory(JpaBaseConfiguration.java:132)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:140)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:644)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:636)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1234)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:952)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1454)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:553)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:225)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:152)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:130)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:142)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:98)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:260)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:163)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:378)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:383)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:378)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:290)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:289)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:279)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:278)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:106)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:105)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:94)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:52)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:70)
	at org.eclipse.jdt.internal.junit5.runner.JUnit5TestReference.run(JUnit5TestReference.java:98)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:529)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:756)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:452)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:566)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	... 137 more
Caused by: org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]
	at org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:996)
	at org.h2.mvstore.SingleFileStore.lockFileChannel(SingleFileStore.java:143)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:117)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:81)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:286)
	... 131 more
2024-04-21 19:53:26.072555+03:00 database: flush
org.h2.message.DbException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.get(DbException.java:212)
	at org.h2.message.DbException.convert(DbException.java:407)
	at org.h2.mvstore.db.Store.lambda$new$0(Store.java:122)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:1546)
	at org.h2.mvstore.MVStore.panic(MVStore.java:371)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:291)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:2035)
	at org.h2.mvstore.db.Store.<init>(Store.java:133)
	at org.h2.engine.Database.<init>(Database.java:326)
	at org.h2.engine.Engine.openSession(Engine.java:92)
	at org.h2.engine.Engine.openSession(Engine.java:222)
	at org.h2.engine.Engine.createSession(Engine.java:201)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:343)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:125)
	at org.h2.Driver.connect(Driver.java:59)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.obtainConnection(JdbcEnvironmentInitiator.java:428)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcIsolationDelegate.delegateWork(JdbcIsolationDelegate.java:61)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentUsingJdbcMetadata(JdbcEnvironmentInitiator.java:276)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:107)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:130)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:238)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:215)
	at org.hibernate.boot.model.relational.Database.<init>(Database.java:45)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getDatabase(InFlightMetadataCollectorImpl.java:223)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:191)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:170)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1432)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1503)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:390)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:366)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1234)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:952)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1454)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:553)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:225)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:152)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:130)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:142)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:98)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:260)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:163)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:378)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:383)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:378)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:290)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:289)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:279)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:278)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:106)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:105)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:94)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:52)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:70)
	at org.eclipse.jdt.internal.junit5.runner.JUnit5TestReference.run(JUnit5TestReference.java:98)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:529)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:756)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:452)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:566)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	... 138 more
Caused by: org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]
	at org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:996)
	at org.h2.mvstore.SingleFileStore.lockFileChannel(SingleFileStore.java:143)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:117)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:81)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:286)
	... 132 more
2024-04-21 19:53:29.191141+03:00 database: flush
org.h2.message.DbException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.get(DbException.java:212)
	at org.h2.message.DbException.convert(DbException.java:407)
	at org.h2.mvstore.db.Store.lambda$new$0(Store.java:122)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:1546)
	at org.h2.mvstore.MVStore.panic(MVStore.java:371)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:291)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:2035)
	at org.h2.mvstore.db.Store.<init>(Store.java:133)
	at org.h2.engine.Database.<init>(Database.java:326)
	at org.h2.engine.Engine.openSession(Engine.java:92)
	at org.h2.engine.Engine.openSession(Engine.java:222)
	at org.h2.engine.Engine.createSession(Engine.java:201)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:343)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:125)
	at org.h2.Driver.connect(Driver.java:59)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.internal.NonContextualJdbcConnectionAccess.obtainConnection(NonContextualJdbcConnectionAccess.java:46)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.acquireConnectionIfNeeded(LogicalConnectionManagedImpl.java:113)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.getPhysicalConnection(LogicalConnectionManagedImpl.java:143)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.getConnectionForTransactionManagement(LogicalConnectionManagedImpl.java:273)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.begin(LogicalConnectionManagedImpl.java:281)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.begin(JdbcResourceLocalTransactionCoordinatorImpl.java:232)
	at org.hibernate.engine.transaction.internal.TransactionImpl.begin(TransactionImpl.java:83)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.beginTransaction(HibernateJpaDialect.java:176)
	at org.springframework.orm.jpa.JpaTransactionManager.doBegin(JpaTransactionManager.java:420)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.startTransaction(AbstractPlatformTransactionManager.java:531)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:405)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:236)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:320)
	at org.springframework.test.context.junit.jupiter.SpringExtension.beforeEach(SpringExtension.java:240)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeBeforeEachCallbacks$2(TestMethodTestDescriptor.java:167)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeBeforeMethodsOrCallbacksUntilExceptionOccurs$6(TestMethodTestDescriptor.java:203)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeBeforeMethodsOrCallbacksUntilExceptionOccurs(TestMethodTestDescriptor.java:203)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeBeforeEachCallbacks(TestMethodTestDescriptor.java:166)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:133)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:94)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:52)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:70)
	at org.eclipse.jdt.internal.junit5.runner.JUnit5TestReference.run(JUnit5TestReference.java:98)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:529)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:756)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:452)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:566)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	... 92 more
Caused by: org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]
	at org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:996)
	at org.h2.mvstore.SingleFileStore.lockFileChannel(SingleFileStore.java:143)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:117)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:81)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:286)
	... 86 more
2024-04-21 19:53:58.338101+03:00 database: flush
org.h2.message.DbException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.get(DbException.java:212)
	at org.h2.message.DbException.convert(DbException.java:407)
	at org.h2.mvstore.db.Store.lambda$new$0(Store.java:122)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:1546)
	at org.h2.mvstore.MVStore.panic(MVStore.java:371)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:291)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:2035)
	at org.h2.mvstore.db.Store.<init>(Store.java:133)
	at org.h2.engine.Database.<init>(Database.java:326)
	at org.h2.engine.Engine.openSession(Engine.java:92)
	at org.h2.engine.Engine.openSession(Engine.java:222)
	at org.h2.engine.Engine.createSession(Engine.java:201)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:343)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:125)
	at org.h2.Driver.connect(Driver.java:59)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:160)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:118)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:342)
	at org.springframework.boot.jdbc.EmbeddedDatabaseConnection.isEmbedded(EmbeddedDatabaseConnection.java:168)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.isEmbeddedDatabase(DataSourceScriptDatabaseInitializer.java:67)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.isEnabled(AbstractScriptDatabaseInitializer.java:84)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applySchemaScripts(AbstractScriptDatabaseInitializer.java:98)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1234)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:952)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1454)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:553)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:225)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:152)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:130)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:142)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:98)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:260)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:163)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:378)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:383)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:378)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:290)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:289)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:279)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:278)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:106)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:105)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:94)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:52)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:70)
	at org.eclipse.jdt.internal.junit5.runner.JUnit5TestReference.run(JUnit5TestReference.java:98)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:529)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:756)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:452)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:566)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	... 130 more
Caused by: org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]
	at org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:996)
	at org.h2.mvstore.SingleFileStore.lockFileChannel(SingleFileStore.java:143)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:117)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:81)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:286)
	... 124 more
2024-04-21 19:53:59.420778+03:00 database: flush
org.h2.message.DbException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.get(DbException.java:212)
	at org.h2.message.DbException.convert(DbException.java:407)
	at org.h2.mvstore.db.Store.lambda$new$0(Store.java:122)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:1546)
	at org.h2.mvstore.MVStore.panic(MVStore.java:371)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:291)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:2035)
	at org.h2.mvstore.db.Store.<init>(Store.java:133)
	at org.h2.engine.Database.<init>(Database.java:326)
	at org.h2.engine.Engine.openSession(Engine.java:92)
	at org.h2.engine.Engine.openSession(Engine.java:222)
	at org.h2.engine.Engine.createSession(Engine.java:201)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:343)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:125)
	at org.h2.Driver.connect(Driver.java:59)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:160)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:118)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:342)
	at org.springframework.boot.jdbc.EmbeddedDatabaseConnection.isEmbedded(EmbeddedDatabaseConnection.java:168)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateDefaultDdlAutoProvider.getDefaultDdlAuto(HibernateDefaultDdlAutoProvider.java:42)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration.lambda$getVendorProperties$1(HibernateJpaConfiguration.java:142)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateSettings.getDdlAuto(HibernateSettings.java:41)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties.determineDdlAuto(HibernateProperties.java:118)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties.getAdditionalProperties(HibernateProperties.java:87)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties.determineHibernateProperties(HibernateProperties.java:80)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration.getVendorProperties(HibernateJpaConfiguration.java:143)
	at org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration.entityManagerFactory(JpaBaseConfiguration.java:132)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:140)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:644)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:636)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1234)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:952)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1454)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:553)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:225)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:152)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:130)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:142)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:98)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:260)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:163)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:378)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:383)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:378)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:290)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:289)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:279)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:278)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:106)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:105)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:94)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:52)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:70)
	at org.eclipse.jdt.internal.junit5.runner.JUnit5TestReference.run(JUnit5TestReference.java:98)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:529)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:756)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:452)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:566)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	... 137 more
Caused by: org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]
	at org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:996)
	at org.h2.mvstore.SingleFileStore.lockFileChannel(SingleFileStore.java:143)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:117)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:81)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:286)
	... 131 more
2024-04-21 19:54:01.056852+03:00 database: flush
org.h2.message.DbException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.get(DbException.java:212)
	at org.h2.message.DbException.convert(DbException.java:407)
	at org.h2.mvstore.db.Store.lambda$new$0(Store.java:122)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:1546)
	at org.h2.mvstore.MVStore.panic(MVStore.java:371)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:291)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:2035)
	at org.h2.mvstore.db.Store.<init>(Store.java:133)
	at org.h2.engine.Database.<init>(Database.java:326)
	at org.h2.engine.Engine.openSession(Engine.java:92)
	at org.h2.engine.Engine.openSession(Engine.java:222)
	at org.h2.engine.Engine.createSession(Engine.java:201)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:343)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:125)
	at org.h2.Driver.connect(Driver.java:59)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.obtainConnection(JdbcEnvironmentInitiator.java:428)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcIsolationDelegate.delegateWork(JdbcIsolationDelegate.java:61)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentUsingJdbcMetadata(JdbcEnvironmentInitiator.java:276)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:107)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:130)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:238)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:215)
	at org.hibernate.boot.model.relational.Database.<init>(Database.java:45)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getDatabase(InFlightMetadataCollectorImpl.java:223)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:191)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:170)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1432)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1503)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:390)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:366)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1234)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:952)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1454)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:553)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:225)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:152)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:130)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:142)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:98)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:260)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:163)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:378)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:383)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:378)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:290)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:289)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:279)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:278)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:106)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:105)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:94)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:52)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:70)
	at org.eclipse.jdt.internal.junit5.runner.JUnit5TestReference.run(JUnit5TestReference.java:98)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:529)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:756)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:452)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:566)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	... 138 more
Caused by: org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]
	at org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:996)
	at org.h2.mvstore.SingleFileStore.lockFileChannel(SingleFileStore.java:143)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:117)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:81)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:286)
	... 132 more
2024-04-21 19:54:04.254461+03:00 database: flush
org.h2.message.DbException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.get(DbException.java:212)
	at org.h2.message.DbException.convert(DbException.java:407)
	at org.h2.mvstore.db.Store.lambda$new$0(Store.java:122)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:1546)
	at org.h2.mvstore.MVStore.panic(MVStore.java:371)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:291)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:2035)
	at org.h2.mvstore.db.Store.<init>(Store.java:133)
	at org.h2.engine.Database.<init>(Database.java:326)
	at org.h2.engine.Engine.openSession(Engine.java:92)
	at org.h2.engine.Engine.openSession(Engine.java:222)
	at org.h2.engine.Engine.createSession(Engine.java:201)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:343)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:125)
	at org.h2.Driver.connect(Driver.java:59)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.internal.NonContextualJdbcConnectionAccess.obtainConnection(NonContextualJdbcConnectionAccess.java:46)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.acquireConnectionIfNeeded(LogicalConnectionManagedImpl.java:113)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.getPhysicalConnection(LogicalConnectionManagedImpl.java:143)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.getConnectionForTransactionManagement(LogicalConnectionManagedImpl.java:273)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.begin(LogicalConnectionManagedImpl.java:281)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.begin(JdbcResourceLocalTransactionCoordinatorImpl.java:232)
	at org.hibernate.engine.transaction.internal.TransactionImpl.begin(TransactionImpl.java:83)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.beginTransaction(HibernateJpaDialect.java:176)
	at org.springframework.orm.jpa.JpaTransactionManager.doBegin(JpaTransactionManager.java:420)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.startTransaction(AbstractPlatformTransactionManager.java:531)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:405)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:236)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:320)
	at org.springframework.test.context.junit.jupiter.SpringExtension.beforeEach(SpringExtension.java:240)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeBeforeEachCallbacks$2(TestMethodTestDescriptor.java:167)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeBeforeMethodsOrCallbacksUntilExceptionOccurs$6(TestMethodTestDescriptor.java:203)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeBeforeMethodsOrCallbacksUntilExceptionOccurs(TestMethodTestDescriptor.java:203)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeBeforeEachCallbacks(TestMethodTestDescriptor.java:166)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:133)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:94)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:52)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:70)
	at org.eclipse.jdt.internal.junit5.runner.JUnit5TestReference.run(JUnit5TestReference.java:98)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:529)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:756)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:452)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:566)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	... 92 more
Caused by: org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]
	at org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:996)
	at org.h2.mvstore.SingleFileStore.lockFileChannel(SingleFileStore.java:143)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:117)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:81)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:286)
	... 86 more
2024-04-21 19:54:27.123190+03:00 database: flush
org.h2.message.DbException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.get(DbException.java:212)
	at org.h2.message.DbException.convert(DbException.java:407)
	at org.h2.mvstore.db.Store.lambda$new$0(Store.java:122)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:1546)
	at org.h2.mvstore.MVStore.panic(MVStore.java:371)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:291)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:2035)
	at org.h2.mvstore.db.Store.<init>(Store.java:133)
	at org.h2.engine.Database.<init>(Database.java:326)
	at org.h2.engine.Engine.openSession(Engine.java:92)
	at org.h2.engine.Engine.openSession(Engine.java:222)
	at org.h2.engine.Engine.createSession(Engine.java:201)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:343)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:125)
	at org.h2.Driver.connect(Driver.java:59)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:160)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:118)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:342)
	at org.springframework.boot.jdbc.EmbeddedDatabaseConnection.isEmbedded(EmbeddedDatabaseConnection.java:168)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.isEmbeddedDatabase(DataSourceScriptDatabaseInitializer.java:67)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.isEnabled(AbstractScriptDatabaseInitializer.java:84)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applySchemaScripts(AbstractScriptDatabaseInitializer.java:98)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1234)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:952)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1454)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:553)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:225)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:152)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:130)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:142)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:98)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:260)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:163)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:378)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:383)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:378)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:290)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:289)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:279)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:278)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:106)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:105)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:94)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:52)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:70)
	at org.eclipse.jdt.internal.junit5.runner.JUnit5TestReference.run(JUnit5TestReference.java:98)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:529)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:756)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:452)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:566)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	... 130 more
Caused by: org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]
	at org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:996)
	at org.h2.mvstore.SingleFileStore.lockFileChannel(SingleFileStore.java:143)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:117)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:81)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:286)
	... 124 more
2024-04-21 19:54:28.252173+03:00 database: flush
org.h2.message.DbException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.get(DbException.java:212)
	at org.h2.message.DbException.convert(DbException.java:407)
	at org.h2.mvstore.db.Store.lambda$new$0(Store.java:122)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:1546)
	at org.h2.mvstore.MVStore.panic(MVStore.java:371)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:291)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:2035)
	at org.h2.mvstore.db.Store.<init>(Store.java:133)
	at org.h2.engine.Database.<init>(Database.java:326)
	at org.h2.engine.Engine.openSession(Engine.java:92)
	at org.h2.engine.Engine.openSession(Engine.java:222)
	at org.h2.engine.Engine.createSession(Engine.java:201)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:343)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:125)
	at org.h2.Driver.connect(Driver.java:59)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:160)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:118)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:342)
	at org.springframework.boot.jdbc.EmbeddedDatabaseConnection.isEmbedded(EmbeddedDatabaseConnection.java:168)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateDefaultDdlAutoProvider.getDefaultDdlAuto(HibernateDefaultDdlAutoProvider.java:42)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration.lambda$getVendorProperties$1(HibernateJpaConfiguration.java:142)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateSettings.getDdlAuto(HibernateSettings.java:41)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties.determineDdlAuto(HibernateProperties.java:118)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties.getAdditionalProperties(HibernateProperties.java:87)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties.determineHibernateProperties(HibernateProperties.java:80)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration.getVendorProperties(HibernateJpaConfiguration.java:143)
	at org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration.entityManagerFactory(JpaBaseConfiguration.java:132)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:140)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:644)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:636)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1234)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:952)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1454)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:553)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:225)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:152)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:130)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:142)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:98)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:260)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:163)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:378)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:383)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:378)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:290)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:289)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:279)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:278)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:106)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:105)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:94)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:52)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:70)
	at org.eclipse.jdt.internal.junit5.runner.JUnit5TestReference.run(JUnit5TestReference.java:98)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:529)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:756)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:452)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:566)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	... 137 more
Caused by: org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]
	at org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:996)
	at org.h2.mvstore.SingleFileStore.lockFileChannel(SingleFileStore.java:143)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:117)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:81)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:286)
	... 131 more
2024-04-21 19:54:29.862957+03:00 database: flush
org.h2.message.DbException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.get(DbException.java:212)
	at org.h2.message.DbException.convert(DbException.java:407)
	at org.h2.mvstore.db.Store.lambda$new$0(Store.java:122)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:1546)
	at org.h2.mvstore.MVStore.panic(MVStore.java:371)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:291)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:2035)
	at org.h2.mvstore.db.Store.<init>(Store.java:133)
	at org.h2.engine.Database.<init>(Database.java:326)
	at org.h2.engine.Engine.openSession(Engine.java:92)
	at org.h2.engine.Engine.openSession(Engine.java:222)
	at org.h2.engine.Engine.createSession(Engine.java:201)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:343)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:125)
	at org.h2.Driver.connect(Driver.java:59)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.obtainConnection(JdbcEnvironmentInitiator.java:428)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcIsolationDelegate.delegateWork(JdbcIsolationDelegate.java:61)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentUsingJdbcMetadata(JdbcEnvironmentInitiator.java:276)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:107)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:130)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:238)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:215)
	at org.hibernate.boot.model.relational.Database.<init>(Database.java:45)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getDatabase(InFlightMetadataCollectorImpl.java:223)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:191)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:170)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1432)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1503)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:390)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:366)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1234)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:952)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1454)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:553)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:225)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:152)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:130)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:142)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:98)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:260)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:163)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:378)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:383)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:378)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:290)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:289)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:279)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:278)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:106)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:105)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:94)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:52)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:70)
	at org.eclipse.jdt.internal.junit5.runner.JUnit5TestReference.run(JUnit5TestReference.java:98)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:529)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:756)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:452)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:566)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	... 138 more
Caused by: org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]
	at org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:996)
	at org.h2.mvstore.SingleFileStore.lockFileChannel(SingleFileStore.java:143)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:117)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:81)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:286)
	... 132 more
2024-04-21 19:54:32.941871+03:00 database: flush
org.h2.message.DbException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.get(DbException.java:212)
	at org.h2.message.DbException.convert(DbException.java:407)
	at org.h2.mvstore.db.Store.lambda$new$0(Store.java:122)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:1546)
	at org.h2.mvstore.MVStore.panic(MVStore.java:371)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:291)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:2035)
	at org.h2.mvstore.db.Store.<init>(Store.java:133)
	at org.h2.engine.Database.<init>(Database.java:326)
	at org.h2.engine.Engine.openSession(Engine.java:92)
	at org.h2.engine.Engine.openSession(Engine.java:222)
	at org.h2.engine.Engine.createSession(Engine.java:201)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:343)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:125)
	at org.h2.Driver.connect(Driver.java:59)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.internal.NonContextualJdbcConnectionAccess.obtainConnection(NonContextualJdbcConnectionAccess.java:46)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.acquireConnectionIfNeeded(LogicalConnectionManagedImpl.java:113)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.getPhysicalConnection(LogicalConnectionManagedImpl.java:143)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.getConnectionForTransactionManagement(LogicalConnectionManagedImpl.java:273)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.begin(LogicalConnectionManagedImpl.java:281)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.begin(JdbcResourceLocalTransactionCoordinatorImpl.java:232)
	at org.hibernate.engine.transaction.internal.TransactionImpl.begin(TransactionImpl.java:83)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.beginTransaction(HibernateJpaDialect.java:176)
	at org.springframework.orm.jpa.JpaTransactionManager.doBegin(JpaTransactionManager.java:420)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.startTransaction(AbstractPlatformTransactionManager.java:531)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:405)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:236)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:320)
	at org.springframework.test.context.junit.jupiter.SpringExtension.beforeEach(SpringExtension.java:240)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeBeforeEachCallbacks$2(TestMethodTestDescriptor.java:167)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeBeforeMethodsOrCallbacksUntilExceptionOccurs$6(TestMethodTestDescriptor.java:203)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeBeforeMethodsOrCallbacksUntilExceptionOccurs(TestMethodTestDescriptor.java:203)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeBeforeEachCallbacks(TestMethodTestDescriptor.java:166)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:133)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:94)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:52)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:70)
	at org.eclipse.jdt.internal.junit5.runner.JUnit5TestReference.run(JUnit5TestReference.java:98)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:529)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:756)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:452)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:566)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	... 92 more
Caused by: org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]
	at org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:996)
	at org.h2.mvstore.SingleFileStore.lockFileChannel(SingleFileStore.java:143)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:117)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:81)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:286)
	... 86 more
2024-04-21 19:54:56.189161+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLDataException: Value too long for column "COUNTRY_CODE CHARACTER VARYING(2)": "'NYC' (3)"; SQL statement:
insert into locations (city_name,country_code,country_name,enabled,region_name,trashed,code) values (?,?,?,?,?,?,?) [22001-224]
2024-04-21 19:55:47.433710+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLDataException: Value too long for column "COUNTRY_CODE CHARACTER VARYING(2)": "'NYC' (3)"; SQL statement:
insert into locations (city_name,country_code,country_name,enabled,region_name,trashed,code) values (?,?,?,?,?,?,?) [22001-224]
2024-04-21 19:58:33.172548+03:00 database: flush
org.h2.message.DbException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.get(DbException.java:212)
	at org.h2.message.DbException.convert(DbException.java:407)
	at org.h2.mvstore.db.Store.lambda$new$0(Store.java:122)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:1546)
	at org.h2.mvstore.MVStore.panic(MVStore.java:371)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:291)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:2035)
	at org.h2.mvstore.db.Store.<init>(Store.java:133)
	at org.h2.engine.Database.<init>(Database.java:326)
	at org.h2.engine.Engine.openSession(Engine.java:92)
	at org.h2.engine.Engine.openSession(Engine.java:222)
	at org.h2.engine.Engine.createSession(Engine.java:201)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:343)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:125)
	at org.h2.Driver.connect(Driver.java:59)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:160)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:118)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:342)
	at org.springframework.boot.jdbc.EmbeddedDatabaseConnection.isEmbedded(EmbeddedDatabaseConnection.java:168)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.isEmbeddedDatabase(DataSourceScriptDatabaseInitializer.java:67)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.isEnabled(AbstractScriptDatabaseInitializer.java:84)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applySchemaScripts(AbstractScriptDatabaseInitializer.java:98)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1234)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:952)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1454)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:553)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:225)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:152)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:130)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:142)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:98)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:260)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:163)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:378)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:383)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:378)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:290)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:289)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:279)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:278)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:106)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:105)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:94)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:52)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:70)
	at org.eclipse.jdt.internal.junit5.runner.JUnit5TestReference.run(JUnit5TestReference.java:98)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:529)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:756)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:452)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:566)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	... 130 more
Caused by: org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]
	at org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:996)
	at org.h2.mvstore.SingleFileStore.lockFileChannel(SingleFileStore.java:143)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:117)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:81)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:286)
	... 124 more
2024-04-21 19:58:34.262397+03:00 database: flush
org.h2.message.DbException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.get(DbException.java:212)
	at org.h2.message.DbException.convert(DbException.java:407)
	at org.h2.mvstore.db.Store.lambda$new$0(Store.java:122)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:1546)
	at org.h2.mvstore.MVStore.panic(MVStore.java:371)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:291)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:2035)
	at org.h2.mvstore.db.Store.<init>(Store.java:133)
	at org.h2.engine.Database.<init>(Database.java:326)
	at org.h2.engine.Engine.openSession(Engine.java:92)
	at org.h2.engine.Engine.openSession(Engine.java:222)
	at org.h2.engine.Engine.createSession(Engine.java:201)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:343)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:125)
	at org.h2.Driver.connect(Driver.java:59)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:160)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:118)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:342)
	at org.springframework.boot.jdbc.EmbeddedDatabaseConnection.isEmbedded(EmbeddedDatabaseConnection.java:168)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateDefaultDdlAutoProvider.getDefaultDdlAuto(HibernateDefaultDdlAutoProvider.java:42)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration.lambda$getVendorProperties$1(HibernateJpaConfiguration.java:142)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateSettings.getDdlAuto(HibernateSettings.java:41)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties.determineDdlAuto(HibernateProperties.java:118)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties.getAdditionalProperties(HibernateProperties.java:87)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties.determineHibernateProperties(HibernateProperties.java:80)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration.getVendorProperties(HibernateJpaConfiguration.java:143)
	at org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration.entityManagerFactory(JpaBaseConfiguration.java:132)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:140)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:644)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:636)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1335)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1234)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:952)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1454)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:553)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:225)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:152)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:130)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:142)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:98)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:260)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:163)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:378)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:383)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:378)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:290)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:289)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:279)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:278)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:106)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:105)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:94)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:52)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:70)
	at org.eclipse.jdt.internal.junit5.runner.JUnit5TestReference.run(JUnit5TestReference.java:98)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:529)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:756)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:452)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:566)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	... 137 more
Caused by: org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]
	at org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:996)
	at org.h2.mvstore.SingleFileStore.lockFileChannel(SingleFileStore.java:143)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:117)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:81)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:286)
	... 131 more
2024-04-21 19:58:35.807428+03:00 database: flush
org.h2.message.DbException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.get(DbException.java:212)
	at org.h2.message.DbException.convert(DbException.java:407)
	at org.h2.mvstore.db.Store.lambda$new$0(Store.java:122)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:1546)
	at org.h2.mvstore.MVStore.panic(MVStore.java:371)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:291)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:2035)
	at org.h2.mvstore.db.Store.<init>(Store.java:133)
	at org.h2.engine.Database.<init>(Database.java:326)
	at org.h2.engine.Engine.openSession(Engine.java:92)
	at org.h2.engine.Engine.openSession(Engine.java:222)
	at org.h2.engine.Engine.createSession(Engine.java:201)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:343)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:125)
	at org.h2.Driver.connect(Driver.java:59)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.obtainConnection(JdbcEnvironmentInitiator.java:428)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcIsolationDelegate.delegateWork(JdbcIsolationDelegate.java:61)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentUsingJdbcMetadata(JdbcEnvironmentInitiator.java:276)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:107)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:130)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:238)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:215)
	at org.hibernate.boot.model.relational.Database.<init>(Database.java:45)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getDatabase(InFlightMetadataCollectorImpl.java:223)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:191)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:170)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1432)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1503)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:390)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:366)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1234)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:952)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1454)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:553)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:225)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:152)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:130)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:142)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:98)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:260)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:163)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:378)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:383)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:378)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:290)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:289)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:279)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:278)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:106)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:105)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:94)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:52)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:70)
	at org.eclipse.jdt.internal.junit5.runner.JUnit5TestReference.run(JUnit5TestReference.java:98)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:529)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:756)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:452)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:566)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	... 138 more
Caused by: org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]
	at org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:996)
	at org.h2.mvstore.SingleFileStore.lockFileChannel(SingleFileStore.java:143)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:117)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:81)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:286)
	... 132 more
2024-04-21 19:58:39.037647+03:00 database: flush
org.h2.message.DbException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.get(DbException.java:212)
	at org.h2.message.DbException.convert(DbException.java:407)
	at org.h2.mvstore.db.Store.lambda$new$0(Store.java:122)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:1546)
	at org.h2.mvstore.MVStore.panic(MVStore.java:371)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:291)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:2035)
	at org.h2.mvstore.db.Store.<init>(Store.java:133)
	at org.h2.engine.Database.<init>(Database.java:326)
	at org.h2.engine.Engine.openSession(Engine.java:92)
	at org.h2.engine.Engine.openSession(Engine.java:222)
	at org.h2.engine.Engine.createSession(Engine.java:201)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:343)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:125)
	at org.h2.Driver.connect(Driver.java:59)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.internal.NonContextualJdbcConnectionAccess.obtainConnection(NonContextualJdbcConnectionAccess.java:46)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.acquireConnectionIfNeeded(LogicalConnectionManagedImpl.java:113)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.getPhysicalConnection(LogicalConnectionManagedImpl.java:143)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.getConnectionForTransactionManagement(LogicalConnectionManagedImpl.java:273)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.begin(LogicalConnectionManagedImpl.java:281)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.begin(JdbcResourceLocalTransactionCoordinatorImpl.java:232)
	at org.hibernate.engine.transaction.internal.TransactionImpl.begin(TransactionImpl.java:83)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.beginTransaction(HibernateJpaDialect.java:176)
	at org.springframework.orm.jpa.JpaTransactionManager.doBegin(JpaTransactionManager.java:420)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.startTransaction(AbstractPlatformTransactionManager.java:531)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:405)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:236)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:320)
	at org.springframework.test.context.junit.jupiter.SpringExtension.beforeEach(SpringExtension.java:240)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeBeforeEachCallbacks$2(TestMethodTestDescriptor.java:167)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeBeforeMethodsOrCallbacksUntilExceptionOccurs$6(TestMethodTestDescriptor.java:203)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeBeforeMethodsOrCallbacksUntilExceptionOccurs(TestMethodTestDescriptor.java:203)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeBeforeEachCallbacks(TestMethodTestDescriptor.java:166)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:133)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:94)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:52)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:70)
	at org.eclipse.jdt.internal.junit5.runner.JUnit5TestReference.run(JUnit5TestReference.java:98)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:529)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:756)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:452)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:566)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	... 92 more
Caused by: org.h2.mvstore.MVStoreException: The file is locked: /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb.mv.db [2.2.224/7]
	at org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:996)
	at org.h2.mvstore.SingleFileStore.lockFileChannel(SingleFileStore.java:143)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:117)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:81)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:286)
	... 86 more
2024-04-21 20:07:06.430216+03:00 database: opening /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb (build 224)
2024-04-21 20:07:06.527289+03:00 lock: 1 exclusive requesting for SYS 
2024-04-21 20:07:06.527628+03:00 lock: 1 exclusive added for SYS 
2024-04-21 20:07:06.605374+03:00 lock: 1 exclusive requesting for LOCATIONS 
2024-04-21 20:07:06.605689+03:00 lock: 1 exclusive added for LOCATIONS 
2024-04-21 20:07:06.608365+03:00 lock: 1 exclusive unlock SYS 
2024-04-21 20:07:06.608569+03:00 lock: 1 exclusive unlock LOCATIONS 
2024-04-21 20:07:06.612474+03:00 database: opened /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-21 20:07:06.614228+03:00 database: connecting session #3 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-21 20:07:06.616424+03:00 jdbc[3]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-21 20:07:06.616860+03:00 jdbc[3]: 
/**/Connection conn0 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-21 20:07:06.617381+03:00 jdbc[3]: 
/**/conn0.isReadOnly();
2024-04-21 20:07:06.622061+03:00 jdbc[3]: 
/*SQL #:1 t:2*/CALL READONLY();
2024-04-21 20:07:06.627387+03:00 jdbc[3]: 
/**/conn0.getAutoCommit();
2024-04-21 20:07:06.636361+03:00 jdbc[3]: 
/**/conn0.isValid(1);
2024-04-21 20:07:06.636523+03:00 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2024-04-21 20:07:06.636648+03:00 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2024-04-21 20:07:06.657237+03:00 jdbc[3]: 
/**/DatabaseMetaData dbMeta0 = conn0.getMetaData();
2024-04-21 20:07:06.661715+03:00 jdbc[3]: 
/**/dbMeta0.getDatabaseProductName();
2024-04-21 20:07:06.662008+03:00 jdbc[3]: 
/**/dbMeta0.getURL();
2024-04-21 20:07:06.668571+03:00 jdbc[3]: 
/**/conn0.clearWarnings();
2024-04-21 20:07:06.751169+03:00 database: connecting session #4 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-21 20:07:06.751647+03:00 jdbc[4]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-21 20:07:06.751859+03:00 jdbc[4]: 
/**/Connection conn1 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-21 20:07:06.752038+03:00 jdbc[4]: 
/**/conn1.isReadOnly();
2024-04-21 20:07:06.752300+03:00 jdbc[4]: 
/*SQL #:1*/CALL READONLY();
2024-04-21 20:07:06.752459+03:00 jdbc[4]: 
/**/conn1.getAutoCommit();
2024-04-21 20:07:06.763374+03:00 database: connecting session #5 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-21 20:07:06.763742+03:00 jdbc[5]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-21 20:07:06.763957+03:00 jdbc[5]: 
/**/Connection conn2 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-21 20:07:06.764092+03:00 jdbc[5]: 
/**/conn2.isReadOnly();
2024-04-21 20:07:06.764329+03:00 jdbc[5]: 
/*SQL #:1*/CALL READONLY();
2024-04-21 20:07:06.764494+03:00 jdbc[5]: 
/**/conn2.getAutoCommit();
2024-04-21 20:07:06.774448+03:00 jdbc[3]: 
/**/DatabaseMetaData dbMeta1 = conn0.getMetaData();
2024-04-21 20:07:06.774658+03:00 jdbc[3]: 
/**/dbMeta1.getDatabaseProductName();
2024-04-21 20:07:06.777525+03:00 database: connecting session #6 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-21 20:07:06.777913+03:00 jdbc[6]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-21 20:07:06.778128+03:00 jdbc[6]: 
/**/Connection conn3 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-21 20:07:06.778163+03:00 jdbc[3]: 
/**/dbMeta1.getURL();
2024-04-21 20:07:06.778276+03:00 jdbc[6]: 
/**/conn3.isReadOnly();
2024-04-21 20:07:06.778359+03:00 jdbc[3]: 
/**/conn0.clearWarnings();
2024-04-21 20:07:06.778531+03:00 jdbc[6]: 
/*SQL #:1*/CALL READONLY();
2024-04-21 20:07:06.778736+03:00 jdbc[6]: 
/**/conn3.getAutoCommit();
2024-04-21 20:07:06.789687+03:00 database: connecting session #7 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-21 20:07:06.790048+03:00 jdbc[7]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-21 20:07:06.790245+03:00 jdbc[7]: 
/**/Connection conn4 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-21 20:07:06.790370+03:00 jdbc[7]: 
/**/conn4.isReadOnly();
2024-04-21 20:07:06.790602+03:00 jdbc[7]: 
/*SQL #:1*/CALL READONLY();
2024-04-21 20:07:06.790757+03:00 jdbc[7]: 
/**/conn4.getAutoCommit();
2024-04-21 20:07:06.801955+03:00 database: connecting session #8 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-21 20:07:06.802309+03:00 jdbc[8]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-21 20:07:06.802522+03:00 jdbc[8]: 
/**/Connection conn5 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-21 20:07:06.802645+03:00 jdbc[8]: 
/**/conn5.isReadOnly();
2024-04-21 20:07:06.802864+03:00 jdbc[8]: 
/*SQL #:1*/CALL READONLY();
2024-04-21 20:07:06.803021+03:00 jdbc[8]: 
/**/conn5.getAutoCommit();
2024-04-21 20:07:06.813889+03:00 database: connecting session #9 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-21 20:07:06.814275+03:00 jdbc[9]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-21 20:07:06.814502+03:00 jdbc[9]: 
/**/Connection conn6 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-21 20:07:06.814916+03:00 jdbc[9]: 
/**/conn6.isReadOnly();
2024-04-21 20:07:06.815190+03:00 jdbc[9]: 
/*SQL #:1*/CALL READONLY();
2024-04-21 20:07:06.815356+03:00 jdbc[9]: 
/**/conn6.getAutoCommit();
2024-04-21 20:07:06.830959+03:00 database: connecting session #10 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-21 20:07:06.831375+03:00 jdbc[10]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-21 20:07:06.831580+03:00 jdbc[10]: 
/**/Connection conn7 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-21 20:07:06.831776+03:00 jdbc[10]: 
/**/conn7.isReadOnly();
2024-04-21 20:07:06.832006+03:00 jdbc[10]: 
/*SQL #:1*/CALL READONLY();
2024-04-21 20:07:06.832152+03:00 jdbc[10]: 
/**/conn7.getAutoCommit();
2024-04-21 20:07:06.843691+03:00 database: connecting session #11 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-21 20:07:06.844113+03:00 jdbc[11]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-21 20:07:06.844480+03:00 jdbc[11]: 
/**/Connection conn8 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-21 20:07:06.844627+03:00 jdbc[11]: 
/**/conn8.isReadOnly();
2024-04-21 20:07:06.844925+03:00 jdbc[11]: 
/*SQL #:1*/CALL READONLY();
2024-04-21 20:07:06.845083+03:00 jdbc[11]: 
/**/conn8.getAutoCommit();
2024-04-21 20:07:06.857326+03:00 database: connecting session #12 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-21 20:07:06.857712+03:00 jdbc[12]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-21 20:07:06.857905+03:00 jdbc[12]: 
/**/Connection conn9 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-21 20:07:06.858013+03:00 jdbc[12]: 
/**/conn9.isReadOnly();
2024-04-21 20:07:06.858230+03:00 jdbc[12]: 
/*SQL #:1*/CALL READONLY();
2024-04-21 20:07:06.858369+03:00 jdbc[12]: 
/**/conn9.getAutoCommit();
2024-04-21 20:07:07.363578+03:00 jdbc[3]: 
/**/conn0.isValid(5);
2024-04-21 20:07:07.363772+03:00 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2024-04-21 20:07:07.364112+03:00 jdbc[3]: 
/**/DatabaseMetaData dbMeta2 = conn0.getMetaData();
2024-04-21 20:07:07.364266+03:00 jdbc[3]: 
/**/dbMeta2.getDatabaseProductName();
2024-04-21 20:07:07.364383+03:00 jdbc[3]: 
/**/dbMeta2.getDatabaseProductVersion();
2024-04-21 20:07:07.364933+03:00 jdbc[3]: 
/**/dbMeta2.getDatabaseMajorVersion();
2024-04-21 20:07:07.365069+03:00 jdbc[3]: 
/**/dbMeta2.getDatabaseMinorVersion();
2024-04-21 20:07:07.365750+03:00 jdbc[3]: 
/**/dbMeta2.getDriverName();
2024-04-21 20:07:07.365917+03:00 jdbc[3]: 
/**/dbMeta2.getDriverMajorVersion();
2024-04-21 20:07:07.366032+03:00 jdbc[3]: 
/**/dbMeta2.getDriverMinorVersion();
2024-04-21 20:07:07.366132+03:00 jdbc[3]: 
/**/dbMeta2.getSQLKeywords();
2024-04-21 20:07:07.395932+03:00 jdbc[3]: 
/**/dbMeta2.supportsCatalogsInTableDefinitions();
2024-04-21 20:07:07.396136+03:00 jdbc[3]: 
/**/dbMeta2.supportsSchemasInTableDefinitions();
2024-04-21 20:07:07.397735+03:00 jdbc[3]: 
/**/dbMeta2.storesLowerCaseIdentifiers();
2024-04-21 20:07:07.398184+03:00 jdbc[3]: 
/**/dbMeta2.storesUpperCaseIdentifiers();
2024-04-21 20:07:07.398330+03:00 jdbc[3]: 
/**/dbMeta2.storesMixedCaseIdentifiers();
2024-04-21 20:07:07.399370+03:00 jdbc[3]: 
/**/dbMeta2.storesUpperCaseIdentifiers();
2024-04-21 20:07:07.399547+03:00 jdbc[3]: 
/**/dbMeta2.storesLowerCaseQuotedIdentifiers();
2024-04-21 20:07:07.399684+03:00 jdbc[3]: 
/**/dbMeta2.storesUpperCaseQuotedIdentifiers();
2024-04-21 20:07:07.399783+03:00 jdbc[3]: 
/**/dbMeta2.storesMixedCaseQuotedIdentifiers();
2024-04-21 20:07:07.400789+03:00 jdbc[3]: 
/**/conn0.getCatalog();
2024-04-21 20:07:07.404982+03:00 jdbc[3]: 
/*SQL #:1*/CALL DATABASE();
2024-04-21 20:07:07.405608+03:00 jdbc[3]: 
/**/dbMeta2.supportsNamedParameters();
2024-04-21 20:07:07.405742+03:00 jdbc[3]: 
/**/dbMeta2.supportsResultSetType(1004);
2024-04-21 20:07:07.405821+03:00 jdbc[3]: 
/**/dbMeta2.supportsGetGeneratedKeys();
2024-04-21 20:07:07.405890+03:00 jdbc[3]: 
/**/dbMeta2.supportsBatchUpdates();
2024-04-21 20:07:07.405961+03:00 jdbc[3]: 
/**/dbMeta2.dataDefinitionIgnoredInTransactions();
2024-04-21 20:07:07.406030+03:00 jdbc[3]: 
/**/dbMeta2.dataDefinitionCausesTransactionCommit();
2024-04-21 20:07:07.406096+03:00 jdbc[3]: 
/**/dbMeta2.getSQLStateType();
2024-04-21 20:07:07.407092+03:00 jdbc[3]: 
/**/conn0.getSchema();
2024-04-21 20:07:07.407470+03:00 jdbc[3]: 
/**/conn0.getSchema();
2024-04-21 20:07:07.407596+03:00 jdbc[3]: 
/**/dbMeta2.supportsNamedParameters();
2024-04-21 20:07:07.409343+03:00 jdbc[3]: 
/**/dbMeta2.getCatalogSeparator();
2024-04-21 20:07:07.409534+03:00 jdbc[3]: 
/**/dbMeta2.isCatalogAtStart();
2024-04-21 20:07:07.411350+03:00 jdbc[3]: 
/**/DatabaseMetaData dbMeta3 = conn0.getMetaData();
2024-04-21 20:07:07.411550+03:00 jdbc[3]: 
/**/dbMeta3.getJDBCMajorVersion();
2024-04-21 20:07:07.411693+03:00 jdbc[3]: 
/**/Clob clob0 = conn0.createClob();
2024-04-21 20:07:07.413926+03:00 jdbc[3]: 
/**/clob0.free();
2024-04-21 20:07:07.414835+03:00 jdbc[3]: 
/**/NClob clob1 = conn0.createNClob();
2024-04-21 20:07:07.415070+03:00 jdbc[3]: 
/**/clob1.free();
2024-04-21 20:07:07.415234+03:00 jdbc[3]: 
/**/conn0.clearWarnings();
2024-04-21 20:07:09.567710+03:00 jdbc[3]: 
/**/conn0.isValid(5);
2024-04-21 20:07:09.568048+03:00 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2024-04-21 20:07:09.568191+03:00 jdbc[3]: 
/**/conn0.getAutoCommit();
2024-04-21 20:07:09.568313+03:00 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2024-04-21 20:07:10.316996+03:00 jdbc[3]: 
/**/PreparedStatement prep0 = conn0.prepareStatement("select l1_0.code,l1_0.city_name,l1_0.country_code,l1_0.country_name,l1_0.enabled,l1_0.region_name,l1_0.trashed from locations l1_0 where l1_0.trashed=false");
2024-04-21 20:07:10.339543+03:00 jdbc[3]: Plan       : calculate cost for plan [L1_0]
2024-04-21 20:07:10.339746+03:00 jdbc[3]: Plan       :   for table filter L1_0
2024-04-21 20:07:10.340446+03:00 jdbc[3]: Table      :     potential plan item cost 10,240 index PUBLIC.LOCATIONS.tableScan
2024-04-21 20:07:10.340791+03:00 jdbc[3]: Table      :     potential plan item cost 20,300 index PUBLIC.PRIMARY_KEY_5
2024-04-21 20:07:10.341122+03:00 jdbc[3]: Plan       :   best plan item cost 10,137.6 index PUBLIC.LOCATIONS.tableScan
2024-04-21 20:07:10.341529+03:00 jdbc[3]: Plan       : plan cost 10,138.6
2024-04-21 20:07:10.345267+03:00 jdbc[3]: 
/**/ResultSet rs0 = prep0.executeQuery();
2024-04-21 20:07:10.346345+03:00 jdbc[3]: 
/*SQL #:3*/select l1_0.code,l1_0.city_name,l1_0.country_code,l1_0.country_name,l1_0.enabled,l1_0.region_name,l1_0.trashed from locations l1_0 where l1_0.trashed=false;
2024-04-21 20:07:10.353132+03:00 jdbc[3]: 
/**/rs0.next();
2024-04-21 20:07:10.355184+03:00 jdbc[3]: 
/**/rs0.getString(1);
2024-04-21 20:07:10.355384+03:00 jdbc[3]: 
/**/rs0.wasNull();
2024-04-21 20:07:10.357829+03:00 jdbc[3]: 
/**/rs0.getString(2);
2024-04-21 20:07:10.357981+03:00 jdbc[3]: 
/**/rs0.wasNull();
2024-04-21 20:07:10.358085+03:00 jdbc[3]: 
/**/rs0.getString(3);
2024-04-21 20:07:10.358184+03:00 jdbc[3]: 
/**/rs0.wasNull();
2024-04-21 20:07:10.358268+03:00 jdbc[3]: 
/**/rs0.getString(4);
2024-04-21 20:07:10.358345+03:00 jdbc[3]: 
/**/rs0.wasNull();
2024-04-21 20:07:10.358440+03:00 jdbc[3]: 
/**/rs0.getBoolean(5);
2024-04-21 20:07:10.358550+03:00 jdbc[3]: 
/**/rs0.wasNull();
2024-04-21 20:07:10.358637+03:00 jdbc[3]: 
/**/rs0.getString(6);
2024-04-21 20:07:10.358714+03:00 jdbc[3]: 
/**/rs0.wasNull();
2024-04-21 20:07:10.358796+03:00 jdbc[3]: 
/**/rs0.getBoolean(7);
2024-04-21 20:07:10.358887+03:00 jdbc[3]: 
/**/rs0.wasNull();
2024-04-21 20:07:10.364190+03:00 jdbc[3]: 
/**/rs0.next();
2024-04-21 20:07:10.364332+03:00 jdbc[3]: 
/**/rs0.getString(1);
2024-04-21 20:07:10.364402+03:00 jdbc[3]: 
/**/rs0.wasNull();
2024-04-21 20:07:10.364515+03:00 jdbc[3]: 
/**/rs0.getString(2);
2024-04-21 20:07:10.364595+03:00 jdbc[3]: 
/**/rs0.wasNull();
2024-04-21 20:07:10.364656+03:00 jdbc[3]: 
/**/rs0.getString(3);
2024-04-21 20:07:10.364714+03:00 jdbc[3]: 
/**/rs0.wasNull();
2024-04-21 20:07:10.364770+03:00 jdbc[3]: 
/**/rs0.getString(4);
2024-04-21 20:07:10.364822+03:00 jdbc[3]: 
/**/rs0.wasNull();
2024-04-21 20:07:10.364881+03:00 jdbc[3]: 
/**/rs0.getBoolean(5);
2024-04-21 20:07:10.364936+03:00 jdbc[3]: 
/**/rs0.wasNull();
2024-04-21 20:07:10.364993+03:00 jdbc[3]: 
/**/rs0.getString(6);
2024-04-21 20:07:10.365046+03:00 jdbc[3]: 
/**/rs0.wasNull();
2024-04-21 20:07:10.365106+03:00 jdbc[3]: 
/**/rs0.getBoolean(7);
2024-04-21 20:07:10.365158+03:00 jdbc[3]: 
/**/rs0.wasNull();
2024-04-21 20:07:10.365277+03:00 jdbc[3]: 
/**/rs0.next();
2024-04-21 20:07:10.365338+03:00 jdbc[3]: 
/**/rs0.getString(1);
2024-04-21 20:07:10.365391+03:00 jdbc[3]: 
/**/rs0.wasNull();
2024-04-21 20:07:10.365480+03:00 jdbc[3]: 
/**/rs0.getString(2);
2024-04-21 20:07:10.365539+03:00 jdbc[3]: 
/**/rs0.wasNull();
2024-04-21 20:07:10.365594+03:00 jdbc[3]: 
/**/rs0.getString(3);
2024-04-21 20:07:10.365648+03:00 jdbc[3]: 
/**/rs0.wasNull();
2024-04-21 20:07:10.365703+03:00 jdbc[3]: 
/**/rs0.getString(4);
2024-04-21 20:07:10.365755+03:00 jdbc[3]: 
/**/rs0.wasNull();
2024-04-21 20:07:10.365811+03:00 jdbc[3]: 
/**/rs0.getBoolean(5);
2024-04-21 20:07:10.365864+03:00 jdbc[3]: 
/**/rs0.wasNull();
2024-04-21 20:07:10.365920+03:00 jdbc[3]: 
/**/rs0.getString(6);
2024-04-21 20:07:10.365979+03:00 jdbc[3]: 
/**/rs0.getBoolean(7);
2024-04-21 20:07:10.366033+03:00 jdbc[3]: 
/**/rs0.wasNull();
2024-04-21 20:07:10.366134+03:00 jdbc[3]: 
/**/rs0.next();
2024-04-21 20:07:10.368050+03:00 jdbc[3]: 
/**/prep0.isClosed();
2024-04-21 20:07:10.368212+03:00 jdbc[3]: 
/**/rs0.close();
2024-04-21 20:07:10.368610+03:00 jdbc[3]: 
/**/prep0.getMaxRows();
2024-04-21 20:07:10.368718+03:00 jdbc[3]: 
/**/prep0.getQueryTimeout();
2024-04-21 20:07:10.375611+03:00 jdbc[3]: Plan       : calculate cost for plan [SETTINGS:-33:org.h2.table.InformationSchemaTable@3985175e]
2024-04-21 20:07:10.376272+03:00 jdbc[3]: Plan       :   for table filter SETTINGS:-33:org.h2.table.InformationSchemaTable@3985175e
2024-04-21 20:07:10.376591+03:00 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2024-04-21 20:07:10.376803+03:00 jdbc[3]: Plan       :   best plan item cost 9,900 index meta
2024-04-21 20:07:10.376986+03:00 jdbc[3]: Plan       : plan cost 9,901
2024-04-21 20:07:10.385832+03:00 jdbc[3]: 
/*SQL l:74 #:1 t:8*/SELECT SETTING_VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE SETTING_NAME=? {1: 'QUERY_TIMEOUT'};
2024-04-21 20:07:10.386081+03:00 jdbc[3]: 
/**/prep0.close();
2024-04-21 20:07:10.466770+03:00 jdbc[3]: 
/**/conn0.commit();
2024-04-21 20:07:10.467201+03:00 jdbc[3]: 
/*SQL */COMMIT;
2024-04-21 20:07:10.467346+03:00 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2024-04-21 20:07:10.467444+03:00 jdbc[3]: 
/**/conn0.commit();
2024-04-21 20:07:10.467599+03:00 jdbc[3]: 
/*SQL */COMMIT;
2024-04-21 20:07:10.468660+03:00 jdbc[3]: 
/**/conn0.getWarnings();
2024-04-21 20:07:10.468801+03:00 jdbc[3]: 
/**/conn0.clearWarnings();
2024-04-21 20:07:10.468919+03:00 jdbc[3]: 
/**/conn0.clearWarnings();
2024-04-21 20:07:10.489960+03:00 database: closing /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb from shutdown hook
2024-04-21 20:07:10.490408+03:00 lock: 3 shared read unlock SYS 
2024-04-21 20:07:10.490617+03:00 database: disconnecting session #3
2024-04-21 20:07:10.490789+03:00 database: disconnected session #3
2024-04-21 20:07:10.490989+03:00 lock: 4 shared read unlock SYS 
2024-04-21 20:07:10.491145+03:00 database: disconnecting session #4
2024-04-21 20:07:10.491327+03:00 database: disconnected session #4
2024-04-21 20:07:10.491542+03:00 lock: 5 shared read unlock SYS 
2024-04-21 20:07:10.491723+03:00 database: disconnecting session #5
2024-04-21 20:07:10.491920+03:00 database: disconnected session #5
2024-04-21 20:07:10.492140+03:00 lock: 6 shared read unlock SYS 
2024-04-21 20:07:10.492302+03:00 database: disconnecting session #6
2024-04-21 20:07:10.492452+03:00 database: disconnected session #6
2024-04-21 20:07:10.492650+03:00 lock: 7 shared read unlock SYS 
2024-04-21 20:07:10.492811+03:00 database: disconnecting session #7
2024-04-21 20:07:10.492957+03:00 database: disconnected session #7
2024-04-21 20:07:10.493139+03:00 lock: 8 shared read unlock SYS 
2024-04-21 20:07:10.493305+03:00 database: disconnecting session #8
2024-04-21 20:07:10.493460+03:00 database: disconnected session #8
2024-04-21 20:07:10.493641+03:00 lock: 9 shared read unlock SYS 
2024-04-21 20:07:10.493799+03:00 database: disconnecting session #9
2024-04-21 20:07:10.493951+03:00 database: disconnected session #9
2024-04-21 20:07:10.494130+03:00 lock: 10 shared read unlock SYS 
2024-04-21 20:07:10.494288+03:00 database: disconnecting session #10
2024-04-21 20:07:10.494433+03:00 database: disconnected session #10
2024-04-21 20:07:10.494602+03:00 lock: 11 shared read unlock SYS 
2024-04-21 20:07:10.494748+03:00 database: disconnecting session #11
2024-04-21 20:07:10.494884+03:00 database: disconnected session #11
2024-04-21 20:07:10.495052+03:00 lock: 12 shared read unlock SYS 
2024-04-21 20:07:10.495208+03:00 database: disconnecting session #12
2024-04-21 20:07:10.495382+03:00 database: disconnected session #12
2024-04-21 20:07:10.495495+03:00 database: closing /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-21 20:07:10.495723+03:00 lock: 2 shared read unlock SYS 
2024-04-21 20:07:10.495943+03:00 lock: 1 shared read unlock SYS 
2024-04-21 20:07:10.498388+03:00 jdbc[3]: 
/**/conn0.close();
2024-04-21 20:07:10.531084+03:00 jdbc[4]: 
/**/conn1.close();
2024-04-21 20:07:10.587549+03:00 jdbc[5]: 
/**/conn2.close();
2024-04-21 20:07:10.646973+03:00 jdbc[6]: 
/**/conn3.close();
2024-04-21 20:07:10.660154+03:00 jdbc[7]: 
/**/conn4.close();
2024-04-21 20:07:10.688064+03:00 jdbc[8]: 
/**/conn5.close();
2024-04-21 20:07:10.713549+03:00 jdbc[9]: 
/**/conn6.close();
2024-04-21 20:07:10.713718+03:00 jdbc[10]: 
/**/conn7.close();
2024-04-21 20:07:10.713848+03:00 jdbc[11]: 
/**/conn8.close();
2024-04-21 20:07:10.713932+03:00 jdbc[12]: 
/**/conn9.close();
2024-04-21 20:07:10.757430+03:00 database: closed
2024-04-21 21:28:58.608501+03:00 database: opening /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb (build 224)
2024-04-21 21:28:58.764912+03:00 lock: 1 exclusive requesting for SYS 
2024-04-21 21:28:58.765224+03:00 lock: 1 exclusive added for SYS 
2024-04-21 21:28:58.875229+03:00 lock: 1 exclusive requesting for LOCATIONS 
2024-04-21 21:28:58.875525+03:00 lock: 1 exclusive added for LOCATIONS 
2024-04-21 21:28:58.880482+03:00 lock: 1 exclusive unlock SYS 
2024-04-21 21:28:58.880777+03:00 lock: 1 exclusive unlock LOCATIONS 
2024-04-21 21:28:58.886182+03:00 database: opened /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-21 21:28:58.887421+03:00 database: connecting session #3 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-21 21:28:58.889770+03:00 jdbc[3]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-21 21:28:58.890161+03:00 jdbc[3]: 
/**/Connection conn0 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-21 21:28:58.891028+03:00 jdbc[3]: 
/**/conn0.isReadOnly();
2024-04-21 21:28:58.894723+03:00 jdbc[3]: 
/*SQL #:1 t:1*/CALL READONLY();
2024-04-21 21:28:58.894983+03:00 jdbc[3]: 
/**/conn0.getAutoCommit();
2024-04-21 21:28:58.895145+03:00 jdbc[3]: 
/**/conn0.isValid(1);
2024-04-21 21:28:58.895268+03:00 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2024-04-21 21:28:58.895389+03:00 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2024-04-21 21:28:58.911634+03:00 jdbc[3]: 
/**/DatabaseMetaData dbMeta0 = conn0.getMetaData();
2024-04-21 21:28:58.917477+03:00 jdbc[3]: 
/**/dbMeta0.getURL();
2024-04-21 21:28:58.923494+03:00 jdbc[3]: 
/**/conn0.clearWarnings();
2024-04-21 21:28:59.002170+03:00 database: connecting session #4 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-21 21:28:59.002558+03:00 jdbc[4]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-21 21:28:59.003052+03:00 jdbc[4]: 
/**/Connection conn1 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-21 21:28:59.003220+03:00 jdbc[4]: 
/**/conn1.isReadOnly();
2024-04-21 21:28:59.003450+03:00 jdbc[4]: 
/*SQL #:1*/CALL READONLY();
2024-04-21 21:28:59.003592+03:00 jdbc[4]: 
/**/conn1.getAutoCommit();
2024-04-21 21:28:59.016828+03:00 database: connecting session #5 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-21 21:28:59.017204+03:00 jdbc[5]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-21 21:28:59.017394+03:00 jdbc[5]: 
/**/Connection conn2 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-21 21:28:59.017527+03:00 jdbc[5]: 
/**/conn2.isReadOnly();
2024-04-21 21:28:59.017757+03:00 jdbc[5]: 
/*SQL #:1*/CALL READONLY();
2024-04-21 21:28:59.017936+03:00 jdbc[5]: 
/**/conn2.getAutoCommit();
2024-04-21 21:28:59.030822+03:00 database: connecting session #6 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-21 21:28:59.031242+03:00 jdbc[6]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-21 21:28:59.031437+03:00 jdbc[6]: 
/**/Connection conn3 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-21 21:28:59.031543+03:00 jdbc[6]: 
/**/conn3.isReadOnly();
2024-04-21 21:28:59.031751+03:00 jdbc[6]: 
/*SQL #:1*/CALL READONLY();
2024-04-21 21:28:59.031886+03:00 jdbc[6]: 
/**/conn3.getAutoCommit();
2024-04-21 21:28:59.037563+03:00 jdbc[3]: 
/**/DatabaseMetaData dbMeta1 = conn0.getMetaData();
2024-04-21 21:28:59.037790+03:00 jdbc[3]: 
/**/dbMeta1.getDatabaseProductName();
2024-04-21 21:28:59.037982+03:00 jdbc[3]: 
/**/dbMeta1.getURL();
2024-04-21 21:28:59.038340+03:00 jdbc[3]: 
/**/conn0.clearWarnings();
2024-04-21 21:28:59.042536+03:00 database: connecting session #7 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-21 21:28:59.042777+03:00 jdbc[7]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-21 21:28:59.042895+03:00 jdbc[7]: 
/**/Connection conn4 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-21 21:28:59.042969+03:00 jdbc[7]: 
/**/conn4.isReadOnly();
2024-04-21 21:28:59.043103+03:00 jdbc[7]: 
/*SQL #:1*/CALL READONLY();
2024-04-21 21:28:59.043194+03:00 jdbc[7]: 
/**/conn4.getAutoCommit();
2024-04-21 21:28:59.055154+03:00 database: connecting session #8 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-21 21:28:59.055532+03:00 jdbc[8]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-21 21:28:59.055710+03:00 jdbc[8]: 
/**/Connection conn5 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-21 21:28:59.055811+03:00 jdbc[8]: 
/**/conn5.isReadOnly();
2024-04-21 21:28:59.056033+03:00 jdbc[8]: 
/*SQL #:1*/CALL READONLY();
2024-04-21 21:28:59.056169+03:00 jdbc[8]: 
/**/conn5.getAutoCommit();
2024-04-21 21:28:59.067685+03:00 database: connecting session #9 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-21 21:28:59.067999+03:00 jdbc[9]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-21 21:28:59.068174+03:00 jdbc[9]: 
/**/Connection conn6 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-21 21:28:59.068274+03:00 jdbc[9]: 
/**/conn6.isReadOnly();
2024-04-21 21:28:59.068459+03:00 jdbc[9]: 
/*SQL #:1*/CALL READONLY();
2024-04-21 21:28:59.068585+03:00 jdbc[9]: 
/**/conn6.getAutoCommit();
2024-04-21 21:28:59.078284+03:00 jdbc[3]: 
/**/DatabaseMetaData dbMeta2 = conn0.getMetaData();
2024-04-21 21:28:59.078461+03:00 jdbc[3]: 
/**/dbMeta2.getDatabaseProductName();
2024-04-21 21:28:59.078567+03:00 jdbc[3]: 
/**/dbMeta2.getURL();
2024-04-21 21:28:59.078659+03:00 jdbc[3]: 
/**/conn0.clearWarnings();
2024-04-21 21:28:59.079570+03:00 database: connecting session #10 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-21 21:28:59.079832+03:00 jdbc[10]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-21 21:28:59.079993+03:00 jdbc[10]: 
/**/Connection conn7 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-21 21:28:59.080111+03:00 jdbc[10]: 
/**/conn7.isReadOnly();
2024-04-21 21:28:59.080288+03:00 jdbc[10]: 
/*SQL #:1*/CALL READONLY();
2024-04-21 21:28:59.080419+03:00 jdbc[10]: 
/**/conn7.getAutoCommit();
2024-04-21 21:28:59.093668+03:00 database: connecting session #11 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-21 21:28:59.093983+03:00 jdbc[11]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-21 21:28:59.094151+03:00 jdbc[11]: 
/**/Connection conn8 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-21 21:28:59.094262+03:00 jdbc[11]: 
/**/conn8.isReadOnly();
2024-04-21 21:28:59.094446+03:00 jdbc[11]: 
/*SQL #:1*/CALL READONLY();
2024-04-21 21:28:59.094574+03:00 jdbc[11]: 
/**/conn8.getAutoCommit();
2024-04-21 21:28:59.105467+03:00 database: connecting session #12 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-21 21:28:59.105790+03:00 jdbc[12]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-21 21:28:59.105951+03:00 jdbc[12]: 
/**/Connection conn9 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-21 21:28:59.106046+03:00 jdbc[12]: 
/**/conn9.isReadOnly();
2024-04-21 21:28:59.106221+03:00 jdbc[12]: 
/*SQL #:1*/CALL READONLY();
2024-04-21 21:28:59.106340+03:00 jdbc[12]: 
/**/conn9.getAutoCommit();
2024-04-21 21:28:59.537911+03:00 jdbc[3]: 
/**/DatabaseMetaData dbMeta3 = conn0.getMetaData();
2024-04-21 21:28:59.538148+03:00 jdbc[3]: 
/**/dbMeta3.getDatabaseProductName();
2024-04-21 21:28:59.538265+03:00 jdbc[3]: 
/**/dbMeta3.getDatabaseProductVersion();
2024-04-21 21:28:59.538867+03:00 jdbc[3]: 
/**/dbMeta3.getDatabaseMajorVersion();
2024-04-21 21:28:59.539013+03:00 jdbc[3]: 
/**/dbMeta3.getDatabaseMinorVersion();
2024-04-21 21:28:59.539738+03:00 jdbc[3]: 
/**/dbMeta3.getDriverName();
2024-04-21 21:28:59.539893+03:00 jdbc[3]: 
/**/dbMeta3.getDriverMajorVersion();
2024-04-21 21:28:59.539996+03:00 jdbc[3]: 
/**/dbMeta3.getDriverMinorVersion();
2024-04-21 21:28:59.540130+03:00 jdbc[3]: 
/**/dbMeta3.getSQLKeywords();
2024-04-21 21:28:59.565510+03:00 jdbc[3]: 
/**/dbMeta3.supportsCatalogsInTableDefinitions();
2024-04-21 21:28:59.565700+03:00 jdbc[3]: 
/**/dbMeta3.supportsSchemasInTableDefinitions();
2024-04-21 21:28:59.566943+03:00 jdbc[3]: 
/**/dbMeta3.storesLowerCaseIdentifiers();
2024-04-21 21:28:59.567286+03:00 jdbc[3]: 
/**/dbMeta3.storesUpperCaseIdentifiers();
2024-04-21 21:28:59.567399+03:00 jdbc[3]: 
/**/dbMeta3.storesMixedCaseIdentifiers();
2024-04-21 21:28:59.567493+03:00 jdbc[3]: 
/**/dbMeta3.storesUpperCaseIdentifiers();
2024-04-21 21:28:59.567849+03:00 jdbc[3]: 
/**/dbMeta3.storesLowerCaseQuotedIdentifiers();
2024-04-21 21:28:59.567942+03:00 jdbc[3]: 
/**/dbMeta3.storesUpperCaseQuotedIdentifiers();
2024-04-21 21:28:59.568027+03:00 jdbc[3]: 
/**/dbMeta3.storesMixedCaseQuotedIdentifiers();
2024-04-21 21:28:59.568912+03:00 jdbc[3]: 
/**/conn0.getCatalog();
2024-04-21 21:28:59.578574+03:00 jdbc[3]: 
/*SQL #:1*/CALL DATABASE();
2024-04-21 21:28:59.579443+03:00 jdbc[3]: 
/**/dbMeta3.supportsNamedParameters();
2024-04-21 21:28:59.579890+03:00 jdbc[3]: 
/**/dbMeta3.supportsResultSetType(1004);
2024-04-21 21:28:59.580007+03:00 jdbc[3]: 
/**/dbMeta3.supportsGetGeneratedKeys();
2024-04-21 21:28:59.580263+03:00 jdbc[3]: 
/**/dbMeta3.supportsBatchUpdates();
2024-04-21 21:28:59.580621+03:00 jdbc[3]: 
/**/dbMeta3.dataDefinitionIgnoredInTransactions();
2024-04-21 21:28:59.580714+03:00 jdbc[3]: 
/**/dbMeta3.dataDefinitionCausesTransactionCommit();
2024-04-21 21:28:59.580801+03:00 jdbc[3]: 
/**/dbMeta3.getSQLStateType();
2024-04-21 21:28:59.583206+03:00 jdbc[3]: 
/**/conn0.getSchema();
2024-04-21 21:28:59.583539+03:00 jdbc[3]: 
/**/conn0.getSchema();
2024-04-21 21:28:59.583684+03:00 jdbc[3]: 
/**/dbMeta3.supportsNamedParameters();
2024-04-21 21:28:59.585853+03:00 jdbc[3]: 
/**/dbMeta3.getCatalogSeparator();
2024-04-21 21:28:59.586229+03:00 jdbc[3]: 
/**/dbMeta3.isCatalogAtStart();
2024-04-21 21:28:59.587976+03:00 jdbc[3]: 
/**/DatabaseMetaData dbMeta4 = conn0.getMetaData();
2024-04-21 21:28:59.588147+03:00 jdbc[3]: 
/**/dbMeta4.getJDBCMajorVersion();
2024-04-21 21:28:59.588259+03:00 jdbc[3]: 
/**/Clob clob0 = conn0.createClob();
2024-04-21 21:28:59.590425+03:00 jdbc[3]: 
/**/clob0.free();
2024-04-21 21:28:59.590549+03:00 jdbc[3]: 
/**/NClob clob1 = conn0.createNClob();
2024-04-21 21:28:59.590657+03:00 jdbc[3]: 
/**/clob1.free();
2024-04-21 21:28:59.590780+03:00 jdbc[3]: 
/**/conn0.clearWarnings();
2024-04-21 21:29:23.284008+03:00 database: connecting session #13 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-21 21:29:23.284623+03:00 jdbc[13]: 
/**/Connection conn10 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb", "NIR", "");
2024-04-21 21:29:23.284927+03:00 jdbc[13]: 
/**/DatabaseMetaData dbMeta5 = conn10.getMetaData();
2024-04-21 21:29:23.315767+03:00 jdbc[13]: 
/**/DatabaseMetaData dbMeta6 = conn10.getMetaData();
2024-04-21 21:29:23.315959+03:00 jdbc[13]: 
/**/dbMeta6.storesLowerCaseIdentifiers();
2024-04-21 21:29:23.316063+03:00 jdbc[13]: 
/**/dbMeta6.getSchemas();
2024-04-21 21:29:23.325328+03:00 jdbc[13]: 
/**/rs0.next();
2024-04-21 21:29:23.325733+03:00 jdbc[13]: 
/**/rs0.getString("TABLE_SCHEM");
2024-04-21 21:29:23.326077+03:00 jdbc[13]: 
/**/rs0.next();
2024-04-21 21:29:23.326190+03:00 jdbc[13]: 
/**/rs0.getString("TABLE_SCHEM");
2024-04-21 21:29:23.326302+03:00 jdbc[13]: 
/**/rs0.next();
2024-04-21 21:29:23.326750+03:00 jdbc[13]: 
/**/rs0.close();
2024-04-21 21:29:23.328171+03:00 jdbc[13]: 
/**/dbMeta6.getTables(null, "INFORMATION_SCHEMA", null, new String[]{"TABLE", "SYSTEM TABLE", "VIEW", "SYSTEM VIEW", "TABLE LINK", "SYNONYM", "EXTERNAL"});
2024-04-21 21:29:23.338253+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.338433+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.338590+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.338691+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.338764+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.338834+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.338933+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.339001+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.339065+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.339129+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.339191+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.339253+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.339316+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.339377+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.339440+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.339507+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.339567+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.339629+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.339695+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.339757+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.339820+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.339888+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.339952+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.340023+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.340088+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.340151+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.340216+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.340297+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.340363+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.340520+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.340614+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.340690+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.340765+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.340836+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.340916+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.341009+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.341104+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.341189+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.341286+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.341358+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.341421+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.341484+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.341547+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.341608+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.341673+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.341737+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.341798+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.341864+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.341958+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.342061+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.342134+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.342202+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.342267+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.342334+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.342401+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.342466+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.342531+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.342601+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.342668+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.342738+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.342806+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.342872+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.342939+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.343006+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.343071+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.343138+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.343205+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.343270+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.343338+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.343404+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.343470+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.343538+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.343605+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.343670+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.343737+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.343810+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.343878+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.343943+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.344009+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.344074+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.344143+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.344253+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.344345+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.344581+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.344674+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.344748+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.344828+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.344897+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.344961+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.345023+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.345087+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.345148+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.345212+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.345287+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.345352+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.345554+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.345704+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.345854+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.346278+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.346581+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.346677+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.346751+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.346831+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.346899+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_NAME");
2024-04-21 21:29:23.346967+03:00 jdbc[13]: 
/**/rs1.getString("TABLE_TYPE");
2024-04-21 21:29:23.347040+03:00 jdbc[13]: 
/**/rs1.next();
2024-04-21 21:29:23.347134+03:00 jdbc[13]: 
/**/rs1.close();
2024-04-21 21:29:23.347311+03:00 jdbc[13]: 
/**/dbMeta6.getConnection();
2024-04-21 21:29:23.347542+03:00 jdbc[13]: 
/**/PreparedStatement prep0 = conn10.prepareStatement("SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2");
2024-04-21 21:29:23.378580+03:00 jdbc[13]: Plan       : calculate cost for plan [COLUMNS:-4:org.h2.table.InformationSchemaTable@38459eae]
2024-04-21 21:29:23.381945+03:00 jdbc[13]: Plan       :   for table filter COLUMNS:-4:org.h2.table.InformationSchemaTable@38459eae
2024-04-21 21:29:23.382832+03:00 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2024-04-21 21:29:23.383372+03:00 jdbc[13]: Table      :     potential plan item cost 28 index meta
2024-04-21 21:29:23.383665+03:00 jdbc[13]: Plan       :   best plan item cost 27.44 index meta
2024-04-21 21:29:23.383872+03:00 jdbc[13]: Plan       : plan cost 28.44
2024-04-21 21:29:23.384118+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.384260+03:00 jdbc[13]: 
/**/prep0.setString(2, "CONSTANTS");
2024-04-21 21:29:23.384358+03:00 jdbc[13]: 
/**/ResultSet rs2 = prep0.executeQuery();
2024-04-21 21:29:23.388743+03:00 jdbc[13]: 
/*SQL l:174 #:27 t:4*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'CONSTANTS'};
2024-04-21 21:29:23.389001+03:00 jdbc[13]: 
/**/rs2.next();
2024-04-21 21:29:23.389585+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_NAME");
2024-04-21 21:29:23.389827+03:00 jdbc[13]: 
/**/rs2.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.390149+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_TYPE");
2024-04-21 21:29:23.390242+03:00 jdbc[13]: 
/**/rs2.next();
2024-04-21 21:29:23.390327+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_NAME");
2024-04-21 21:29:23.390407+03:00 jdbc[13]: 
/**/rs2.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.390473+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_TYPE");
2024-04-21 21:29:23.390730+03:00 jdbc[13]: 
/**/rs2.next();
2024-04-21 21:29:23.390809+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_NAME");
2024-04-21 21:29:23.390885+03:00 jdbc[13]: 
/**/rs2.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.390947+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_TYPE");
2024-04-21 21:29:23.391012+03:00 jdbc[13]: 
/**/rs2.next();
2024-04-21 21:29:23.391078+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_NAME");
2024-04-21 21:29:23.391143+03:00 jdbc[13]: 
/**/rs2.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.391209+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_TYPE");
2024-04-21 21:29:23.391265+03:00 jdbc[13]: 
/**/rs2.next();
2024-04-21 21:29:23.391332+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_NAME");
2024-04-21 21:29:23.391394+03:00 jdbc[13]: 
/**/rs2.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.391458+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_TYPE");
2024-04-21 21:29:23.391521+03:00 jdbc[13]: 
/**/rs2.next();
2024-04-21 21:29:23.391589+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_NAME");
2024-04-21 21:29:23.392698+03:00 jdbc[13]: 
/**/rs2.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.392885+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_TYPE");
2024-04-21 21:29:23.393023+03:00 jdbc[13]: 
/**/rs2.next();
2024-04-21 21:29:23.393211+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_NAME");
2024-04-21 21:29:23.393293+03:00 jdbc[13]: 
/**/rs2.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.393386+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_TYPE");
2024-04-21 21:29:23.393452+03:00 jdbc[13]: 
/**/rs2.next();
2024-04-21 21:29:23.393522+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_NAME");
2024-04-21 21:29:23.393592+03:00 jdbc[13]: 
/**/rs2.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.393656+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_TYPE");
2024-04-21 21:29:23.393723+03:00 jdbc[13]: 
/**/rs2.next();
2024-04-21 21:29:23.393784+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_NAME");
2024-04-21 21:29:23.393857+03:00 jdbc[13]: 
/**/rs2.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.393920+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_TYPE");
2024-04-21 21:29:23.393999+03:00 jdbc[13]: 
/**/rs2.next();
2024-04-21 21:29:23.394084+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_NAME");
2024-04-21 21:29:23.394154+03:00 jdbc[13]: 
/**/rs2.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.394260+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_TYPE");
2024-04-21 21:29:23.394324+03:00 jdbc[13]: 
/**/rs2.next();
2024-04-21 21:29:23.394390+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_NAME");
2024-04-21 21:29:23.394492+03:00 jdbc[13]: 
/**/rs2.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.394577+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_TYPE");
2024-04-21 21:29:23.394668+03:00 jdbc[13]: 
/**/rs2.next();
2024-04-21 21:29:23.394731+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_NAME");
2024-04-21 21:29:23.394803+03:00 jdbc[13]: 
/**/rs2.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.394878+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_TYPE");
2024-04-21 21:29:23.394949+03:00 jdbc[13]: 
/**/rs2.next();
2024-04-21 21:29:23.395012+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_NAME");
2024-04-21 21:29:23.395074+03:00 jdbc[13]: 
/**/rs2.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.395140+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_TYPE");
2024-04-21 21:29:23.395201+03:00 jdbc[13]: 
/**/rs2.next();
2024-04-21 21:29:23.395267+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_NAME");
2024-04-21 21:29:23.395340+03:00 jdbc[13]: 
/**/rs2.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.395408+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_TYPE");
2024-04-21 21:29:23.395472+03:00 jdbc[13]: 
/**/rs2.next();
2024-04-21 21:29:23.395531+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_NAME");
2024-04-21 21:29:23.395601+03:00 jdbc[13]: 
/**/rs2.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.395676+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_TYPE");
2024-04-21 21:29:23.395955+03:00 jdbc[13]: 
/**/rs2.next();
2024-04-21 21:29:23.396056+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_NAME");
2024-04-21 21:29:23.396123+03:00 jdbc[13]: 
/**/rs2.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.396187+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_TYPE");
2024-04-21 21:29:23.396251+03:00 jdbc[13]: 
/**/rs2.next();
2024-04-21 21:29:23.396313+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_NAME");
2024-04-21 21:29:23.396383+03:00 jdbc[13]: 
/**/rs2.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.396457+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_TYPE");
2024-04-21 21:29:23.396527+03:00 jdbc[13]: 
/**/rs2.next();
2024-04-21 21:29:23.396602+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_NAME");
2024-04-21 21:29:23.396681+03:00 jdbc[13]: 
/**/rs2.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.396744+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_TYPE");
2024-04-21 21:29:23.396853+03:00 jdbc[13]: 
/**/rs2.next();
2024-04-21 21:29:23.396922+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_NAME");
2024-04-21 21:29:23.396993+03:00 jdbc[13]: 
/**/rs2.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.397077+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_TYPE");
2024-04-21 21:29:23.397139+03:00 jdbc[13]: 
/**/rs2.next();
2024-04-21 21:29:23.397204+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_NAME");
2024-04-21 21:29:23.397674+03:00 jdbc[13]: 
/**/rs2.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.397786+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_TYPE");
2024-04-21 21:29:23.397866+03:00 jdbc[13]: 
/**/rs2.next();
2024-04-21 21:29:23.397930+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_NAME");
2024-04-21 21:29:23.398004+03:00 jdbc[13]: 
/**/rs2.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.398073+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_TYPE");
2024-04-21 21:29:23.398136+03:00 jdbc[13]: 
/**/rs2.next();
2024-04-21 21:29:23.398192+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_NAME");
2024-04-21 21:29:23.398256+03:00 jdbc[13]: 
/**/rs2.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.398315+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_TYPE");
2024-04-21 21:29:23.398373+03:00 jdbc[13]: 
/**/rs2.next();
2024-04-21 21:29:23.398430+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_NAME");
2024-04-21 21:29:23.398486+03:00 jdbc[13]: 
/**/rs2.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.398551+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_TYPE");
2024-04-21 21:29:23.398624+03:00 jdbc[13]: 
/**/rs2.next();
2024-04-21 21:29:23.398678+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_NAME");
2024-04-21 21:29:23.398744+03:00 jdbc[13]: 
/**/rs2.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.398796+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_TYPE");
2024-04-21 21:29:23.398850+03:00 jdbc[13]: 
/**/rs2.next();
2024-04-21 21:29:23.398900+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_NAME");
2024-04-21 21:29:23.398965+03:00 jdbc[13]: 
/**/rs2.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.399023+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_TYPE");
2024-04-21 21:29:23.399074+03:00 jdbc[13]: 
/**/rs2.next();
2024-04-21 21:29:23.399143+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_NAME");
2024-04-21 21:29:23.399201+03:00 jdbc[13]: 
/**/rs2.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.399262+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_TYPE");
2024-04-21 21:29:23.399334+03:00 jdbc[13]: 
/**/rs2.next();
2024-04-21 21:29:23.399387+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_NAME");
2024-04-21 21:29:23.399447+03:00 jdbc[13]: 
/**/rs2.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.399515+03:00 jdbc[13]: 
/**/rs2.getString("COLUMN_TYPE");
2024-04-21 21:29:23.399574+03:00 jdbc[13]: 
/**/rs2.next();
2024-04-21 21:29:23.399636+03:00 jdbc[13]: 
/**/rs2.close();
2024-04-21 21:29:23.399723+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.399833+03:00 jdbc[13]: 
/**/prep0.setString(2, "ENUM_VALUES");
2024-04-21 21:29:23.399902+03:00 jdbc[13]: 
/**/ResultSet rs3 = prep0.executeQuery();
2024-04-21 21:29:23.400450+03:00 jdbc[13]: 
/*SQL l:174 #:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'ENUM_VALUES'};
2024-04-21 21:29:23.400637+03:00 jdbc[13]: 
/**/rs3.next();
2024-04-21 21:29:23.400706+03:00 jdbc[13]: 
/**/rs3.getString("COLUMN_NAME");
2024-04-21 21:29:23.400765+03:00 jdbc[13]: 
/**/rs3.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.400813+03:00 jdbc[13]: 
/**/rs3.getString("COLUMN_TYPE");
2024-04-21 21:29:23.400865+03:00 jdbc[13]: 
/**/rs3.next();
2024-04-21 21:29:23.400913+03:00 jdbc[13]: 
/**/rs3.getString("COLUMN_NAME");
2024-04-21 21:29:23.400970+03:00 jdbc[13]: 
/**/rs3.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.401029+03:00 jdbc[13]: 
/**/rs3.getString("COLUMN_TYPE");
2024-04-21 21:29:23.401079+03:00 jdbc[13]: 
/**/rs3.next();
2024-04-21 21:29:23.401152+03:00 jdbc[13]: 
/**/rs3.getString("COLUMN_NAME");
2024-04-21 21:29:23.401205+03:00 jdbc[13]: 
/**/rs3.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.401259+03:00 jdbc[13]: 
/**/rs3.getString("COLUMN_TYPE");
2024-04-21 21:29:23.401304+03:00 jdbc[13]: 
/**/rs3.next();
2024-04-21 21:29:23.401358+03:00 jdbc[13]: 
/**/rs3.getString("COLUMN_NAME");
2024-04-21 21:29:23.401416+03:00 jdbc[13]: 
/**/rs3.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.401463+03:00 jdbc[13]: 
/**/rs3.getString("COLUMN_TYPE");
2024-04-21 21:29:23.401517+03:00 jdbc[13]: 
/**/rs3.next();
2024-04-21 21:29:23.401566+03:00 jdbc[13]: 
/**/rs3.getString("COLUMN_NAME");
2024-04-21 21:29:23.401616+03:00 jdbc[13]: 
/**/rs3.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.401659+03:00 jdbc[13]: 
/**/rs3.getString("COLUMN_TYPE");
2024-04-21 21:29:23.401704+03:00 jdbc[13]: 
/**/rs3.next();
2024-04-21 21:29:23.401749+03:00 jdbc[13]: 
/**/rs3.getString("COLUMN_NAME");
2024-04-21 21:29:23.401832+03:00 jdbc[13]: 
/**/rs3.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.401880+03:00 jdbc[13]: 
/**/rs3.getString("COLUMN_TYPE");
2024-04-21 21:29:23.401920+03:00 jdbc[13]: 
/**/rs3.next();
2024-04-21 21:29:23.401968+03:00 jdbc[13]: 
/**/rs3.getString("COLUMN_NAME");
2024-04-21 21:29:23.402016+03:00 jdbc[13]: 
/**/rs3.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.402060+03:00 jdbc[13]: 
/**/rs3.getString("COLUMN_TYPE");
2024-04-21 21:29:23.402110+03:00 jdbc[13]: 
/**/rs3.next();
2024-04-21 21:29:23.402152+03:00 jdbc[13]: 
/**/rs3.close();
2024-04-21 21:29:23.402207+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.402263+03:00 jdbc[13]: 
/**/prep0.setString(2, "INDEXES");
2024-04-21 21:29:23.402322+03:00 jdbc[13]: 
/**/ResultSet rs4 = prep0.executeQuery();
2024-04-21 21:29:23.402922+03:00 jdbc[13]: 
/*SQL l:174 #:11*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'INDEXES'};
2024-04-21 21:29:23.403069+03:00 jdbc[13]: 
/**/rs4.next();
2024-04-21 21:29:23.403131+03:00 jdbc[13]: 
/**/rs4.getString("COLUMN_NAME");
2024-04-21 21:29:23.403196+03:00 jdbc[13]: 
/**/rs4.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.403247+03:00 jdbc[13]: 
/**/rs4.getString("COLUMN_TYPE");
2024-04-21 21:29:23.403297+03:00 jdbc[13]: 
/**/rs4.next();
2024-04-21 21:29:23.403346+03:00 jdbc[13]: 
/**/rs4.getString("COLUMN_NAME");
2024-04-21 21:29:23.403394+03:00 jdbc[13]: 
/**/rs4.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.403449+03:00 jdbc[13]: 
/**/rs4.getString("COLUMN_TYPE");
2024-04-21 21:29:23.403492+03:00 jdbc[13]: 
/**/rs4.next();
2024-04-21 21:29:23.403540+03:00 jdbc[13]: 
/**/rs4.getString("COLUMN_NAME");
2024-04-21 21:29:23.403590+03:00 jdbc[13]: 
/**/rs4.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.403635+03:00 jdbc[13]: 
/**/rs4.getString("COLUMN_TYPE");
2024-04-21 21:29:23.403687+03:00 jdbc[13]: 
/**/rs4.next();
2024-04-21 21:29:23.403742+03:00 jdbc[13]: 
/**/rs4.getString("COLUMN_NAME");
2024-04-21 21:29:23.403796+03:00 jdbc[13]: 
/**/rs4.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.403845+03:00 jdbc[13]: 
/**/rs4.getString("COLUMN_TYPE");
2024-04-21 21:29:23.403887+03:00 jdbc[13]: 
/**/rs4.next();
2024-04-21 21:29:23.403939+03:00 jdbc[13]: 
/**/rs4.getString("COLUMN_NAME");
2024-04-21 21:29:23.403989+03:00 jdbc[13]: 
/**/rs4.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.404045+03:00 jdbc[13]: 
/**/rs4.getString("COLUMN_TYPE");
2024-04-21 21:29:23.404093+03:00 jdbc[13]: 
/**/rs4.next();
2024-04-21 21:29:23.404143+03:00 jdbc[13]: 
/**/rs4.getString("COLUMN_NAME");
2024-04-21 21:29:23.404193+03:00 jdbc[13]: 
/**/rs4.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.404237+03:00 jdbc[13]: 
/**/rs4.getString("COLUMN_TYPE");
2024-04-21 21:29:23.404284+03:00 jdbc[13]: 
/**/rs4.next();
2024-04-21 21:29:23.404328+03:00 jdbc[13]: 
/**/rs4.getString("COLUMN_NAME");
2024-04-21 21:29:23.404382+03:00 jdbc[13]: 
/**/rs4.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.404433+03:00 jdbc[13]: 
/**/rs4.getString("COLUMN_TYPE");
2024-04-21 21:29:23.404477+03:00 jdbc[13]: 
/**/rs4.next();
2024-04-21 21:29:23.404525+03:00 jdbc[13]: 
/**/rs4.getString("COLUMN_NAME");
2024-04-21 21:29:23.404572+03:00 jdbc[13]: 
/**/rs4.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.404625+03:00 jdbc[13]: 
/**/rs4.getString("COLUMN_TYPE");
2024-04-21 21:29:23.404675+03:00 jdbc[13]: 
/**/rs4.next();
2024-04-21 21:29:23.404724+03:00 jdbc[13]: 
/**/rs4.getString("COLUMN_NAME");
2024-04-21 21:29:23.404776+03:00 jdbc[13]: 
/**/rs4.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.404827+03:00 jdbc[13]: 
/**/rs4.getString("COLUMN_TYPE");
2024-04-21 21:29:23.404876+03:00 jdbc[13]: 
/**/rs4.next();
2024-04-21 21:29:23.404919+03:00 jdbc[13]: 
/**/rs4.getString("COLUMN_NAME");
2024-04-21 21:29:23.404970+03:00 jdbc[13]: 
/**/rs4.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.405022+03:00 jdbc[13]: 
/**/rs4.getString("COLUMN_TYPE");
2024-04-21 21:29:23.405068+03:00 jdbc[13]: 
/**/rs4.next();
2024-04-21 21:29:23.405115+03:00 jdbc[13]: 
/**/rs4.getString("COLUMN_NAME");
2024-04-21 21:29:23.405160+03:00 jdbc[13]: 
/**/rs4.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.405208+03:00 jdbc[13]: 
/**/rs4.getString("COLUMN_TYPE");
2024-04-21 21:29:23.405250+03:00 jdbc[13]: 
/**/rs4.next();
2024-04-21 21:29:23.405296+03:00 jdbc[13]: 
/**/rs4.close();
2024-04-21 21:29:23.405347+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.405391+03:00 jdbc[13]: 
/**/prep0.setString(2, "INDEX_COLUMNS");
2024-04-21 21:29:23.405439+03:00 jdbc[13]: 
/**/ResultSet rs5 = prep0.executeQuery();
2024-04-21 21:29:23.405980+03:00 jdbc[13]: 
/*SQL l:174 #:11*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'INDEX_COLUMNS'};
2024-04-21 21:29:23.406105+03:00 jdbc[13]: 
/**/rs5.next();
2024-04-21 21:29:23.406182+03:00 jdbc[13]: 
/**/rs5.getString("COLUMN_NAME");
2024-04-21 21:29:23.406254+03:00 jdbc[13]: 
/**/rs5.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.406307+03:00 jdbc[13]: 
/**/rs5.getString("COLUMN_TYPE");
2024-04-21 21:29:23.406351+03:00 jdbc[13]: 
/**/rs5.next();
2024-04-21 21:29:23.406398+03:00 jdbc[13]: 
/**/rs5.getString("COLUMN_NAME");
2024-04-21 21:29:23.406447+03:00 jdbc[13]: 
/**/rs5.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.406930+03:00 jdbc[13]: 
/**/rs5.getString("COLUMN_TYPE");
2024-04-21 21:29:23.407000+03:00 jdbc[13]: 
/**/rs5.next();
2024-04-21 21:29:23.407058+03:00 jdbc[13]: 
/**/rs5.getString("COLUMN_NAME");
2024-04-21 21:29:23.407115+03:00 jdbc[13]: 
/**/rs5.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.407163+03:00 jdbc[13]: 
/**/rs5.getString("COLUMN_TYPE");
2024-04-21 21:29:23.407205+03:00 jdbc[13]: 
/**/rs5.next();
2024-04-21 21:29:23.407248+03:00 jdbc[13]: 
/**/rs5.getString("COLUMN_NAME");
2024-04-21 21:29:23.407294+03:00 jdbc[13]: 
/**/rs5.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.407339+03:00 jdbc[13]: 
/**/rs5.getString("COLUMN_TYPE");
2024-04-21 21:29:23.407376+03:00 jdbc[13]: 
/**/rs5.next();
2024-04-21 21:29:23.407417+03:00 jdbc[13]: 
/**/rs5.getString("COLUMN_NAME");
2024-04-21 21:29:23.407464+03:00 jdbc[13]: 
/**/rs5.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.407509+03:00 jdbc[13]: 
/**/rs5.getString("COLUMN_TYPE");
2024-04-21 21:29:23.407553+03:00 jdbc[13]: 
/**/rs5.next();
2024-04-21 21:29:23.407591+03:00 jdbc[13]: 
/**/rs5.getString("COLUMN_NAME");
2024-04-21 21:29:23.407638+03:00 jdbc[13]: 
/**/rs5.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.407677+03:00 jdbc[13]: 
/**/rs5.getString("COLUMN_TYPE");
2024-04-21 21:29:23.407720+03:00 jdbc[13]: 
/**/rs5.next();
2024-04-21 21:29:23.407761+03:00 jdbc[13]: 
/**/rs5.getString("COLUMN_NAME");
2024-04-21 21:29:23.407803+03:00 jdbc[13]: 
/**/rs5.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.407849+03:00 jdbc[13]: 
/**/rs5.getString("COLUMN_TYPE");
2024-04-21 21:29:23.407900+03:00 jdbc[13]: 
/**/rs5.next();
2024-04-21 21:29:23.407945+03:00 jdbc[13]: 
/**/rs5.getString("COLUMN_NAME");
2024-04-21 21:29:23.407991+03:00 jdbc[13]: 
/**/rs5.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.408032+03:00 jdbc[13]: 
/**/rs5.getString("COLUMN_TYPE");
2024-04-21 21:29:23.408076+03:00 jdbc[13]: 
/**/rs5.next();
2024-04-21 21:29:23.408116+03:00 jdbc[13]: 
/**/rs5.getString("COLUMN_NAME");
2024-04-21 21:29:23.408164+03:00 jdbc[13]: 
/**/rs5.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.409285+03:00 jdbc[13]: 
/**/rs5.getString("COLUMN_TYPE");
2024-04-21 21:29:23.409423+03:00 jdbc[13]: 
/**/rs5.next();
2024-04-21 21:29:23.411699+03:00 jdbc[13]: 
/**/rs5.getString("COLUMN_NAME");
2024-04-21 21:29:23.411790+03:00 jdbc[13]: 
/**/rs5.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.411859+03:00 jdbc[13]: 
/**/rs5.getString("COLUMN_TYPE");
2024-04-21 21:29:23.411899+03:00 jdbc[13]: 
/**/rs5.next();
2024-04-21 21:29:23.411941+03:00 jdbc[13]: 
/**/rs5.getString("COLUMN_NAME");
2024-04-21 21:29:23.411979+03:00 jdbc[13]: 
/**/rs5.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.412018+03:00 jdbc[13]: 
/**/rs5.getString("COLUMN_TYPE");
2024-04-21 21:29:23.412058+03:00 jdbc[13]: 
/**/rs5.next();
2024-04-21 21:29:23.412090+03:00 jdbc[13]: 
/**/rs5.close();
2024-04-21 21:29:23.412136+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.412182+03:00 jdbc[13]: 
/**/prep0.setString(2, "INFORMATION_SCHEMA_CATALOG_NAME");
2024-04-21 21:29:23.412223+03:00 jdbc[13]: 
/**/ResultSet rs6 = prep0.executeQuery();
2024-04-21 21:29:23.412466+03:00 jdbc[13]: 
/*SQL l:174 #:1*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'INFORMATION_SCHEMA_CATALOG_NAME'};
2024-04-21 21:29:23.412559+03:00 jdbc[13]: 
/**/rs6.next();
2024-04-21 21:29:23.412606+03:00 jdbc[13]: 
/**/rs6.getString("COLUMN_NAME");
2024-04-21 21:29:23.412652+03:00 jdbc[13]: 
/**/rs6.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.412691+03:00 jdbc[13]: 
/**/rs6.getString("COLUMN_TYPE");
2024-04-21 21:29:23.412731+03:00 jdbc[13]: 
/**/rs6.next();
2024-04-21 21:29:23.412764+03:00 jdbc[13]: 
/**/rs6.close();
2024-04-21 21:29:23.412809+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.412851+03:00 jdbc[13]: 
/**/prep0.setString(2, "IN_DOUBT");
2024-04-21 21:29:23.412910+03:00 jdbc[13]: 
/**/ResultSet rs7 = prep0.executeQuery();
2024-04-21 21:29:23.413165+03:00 jdbc[13]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'IN_DOUBT'};
2024-04-21 21:29:23.413301+03:00 jdbc[13]: 
/**/rs7.next();
2024-04-21 21:29:23.413352+03:00 jdbc[13]: 
/**/rs7.getString("COLUMN_NAME");
2024-04-21 21:29:23.413400+03:00 jdbc[13]: 
/**/rs7.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.413438+03:00 jdbc[13]: 
/**/rs7.getString("COLUMN_TYPE");
2024-04-21 21:29:23.413476+03:00 jdbc[13]: 
/**/rs7.next();
2024-04-21 21:29:23.413516+03:00 jdbc[13]: 
/**/rs7.getString("COLUMN_NAME");
2024-04-21 21:29:23.413553+03:00 jdbc[13]: 
/**/rs7.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.413592+03:00 jdbc[13]: 
/**/rs7.getString("COLUMN_TYPE");
2024-04-21 21:29:23.413642+03:00 jdbc[13]: 
/**/rs7.next();
2024-04-21 21:29:23.413679+03:00 jdbc[13]: 
/**/rs7.close();
2024-04-21 21:29:23.413721+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.413762+03:00 jdbc[13]: 
/**/prep0.setString(2, "LOCKS");
2024-04-21 21:29:23.413802+03:00 jdbc[13]: 
/**/ResultSet rs8 = prep0.executeQuery();
2024-04-21 21:29:23.414542+03:00 jdbc[13]: 
/*SQL l:174 #:4*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'LOCKS'};
2024-04-21 21:29:23.414702+03:00 jdbc[13]: 
/**/rs8.next();
2024-04-21 21:29:23.414802+03:00 jdbc[13]: 
/**/rs8.getString("COLUMN_NAME");
2024-04-21 21:29:23.414953+03:00 jdbc[13]: 
/**/rs8.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.415104+03:00 jdbc[13]: 
/**/rs8.getString("COLUMN_TYPE");
2024-04-21 21:29:23.417091+03:00 jdbc[13]: 
/**/rs8.next();
2024-04-21 21:29:23.417485+03:00 jdbc[13]: 
/**/rs8.getString("COLUMN_NAME");
2024-04-21 21:29:23.417541+03:00 jdbc[13]: 
/**/rs8.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.417587+03:00 jdbc[13]: 
/**/rs8.getString("COLUMN_TYPE");
2024-04-21 21:29:23.417637+03:00 jdbc[13]: 
/**/rs8.next();
2024-04-21 21:29:23.417678+03:00 jdbc[13]: 
/**/rs8.getString("COLUMN_NAME");
2024-04-21 21:29:23.417721+03:00 jdbc[13]: 
/**/rs8.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.417756+03:00 jdbc[13]: 
/**/rs8.getString("COLUMN_TYPE");
2024-04-21 21:29:23.417792+03:00 jdbc[13]: 
/**/rs8.next();
2024-04-21 21:29:23.417823+03:00 jdbc[13]: 
/**/rs8.getString("COLUMN_NAME");
2024-04-21 21:29:23.417863+03:00 jdbc[13]: 
/**/rs8.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.417900+03:00 jdbc[13]: 
/**/rs8.getString("COLUMN_TYPE");
2024-04-21 21:29:23.417934+03:00 jdbc[13]: 
/**/rs8.next();
2024-04-21 21:29:23.419433+03:00 jdbc[13]: 
/**/rs8.close();
2024-04-21 21:29:23.419560+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.419619+03:00 jdbc[13]: 
/**/prep0.setString(2, "QUERY_STATISTICS");
2024-04-21 21:29:23.420202+03:00 jdbc[13]: 
/**/ResultSet rs9 = prep0.executeQuery();
2024-04-21 21:29:23.421073+03:00 jdbc[13]: 
/*SQL l:174 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'QUERY_STATISTICS'};
2024-04-21 21:29:23.421190+03:00 jdbc[13]: 
/**/rs9.next();
2024-04-21 21:29:23.421251+03:00 jdbc[13]: 
/**/rs9.getString("COLUMN_NAME");
2024-04-21 21:29:23.421292+03:00 jdbc[13]: 
/**/rs9.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.421321+03:00 jdbc[13]: 
/**/rs9.getString("COLUMN_TYPE");
2024-04-21 21:29:23.421352+03:00 jdbc[13]: 
/**/rs9.next();
2024-04-21 21:29:23.421379+03:00 jdbc[13]: 
/**/rs9.getString("COLUMN_NAME");
2024-04-21 21:29:23.421415+03:00 jdbc[13]: 
/**/rs9.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.421448+03:00 jdbc[13]: 
/**/rs9.getString("COLUMN_TYPE");
2024-04-21 21:29:23.421979+03:00 jdbc[13]: 
/**/rs9.next();
2024-04-21 21:29:23.422026+03:00 jdbc[13]: 
/**/rs9.getString("COLUMN_NAME");
2024-04-21 21:29:23.422087+03:00 jdbc[13]: 
/**/rs9.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.422124+03:00 jdbc[13]: 
/**/rs9.getString("COLUMN_TYPE");
2024-04-21 21:29:23.422154+03:00 jdbc[13]: 
/**/rs9.next();
2024-04-21 21:29:23.422549+03:00 jdbc[13]: 
/**/rs9.getString("COLUMN_NAME");
2024-04-21 21:29:23.422604+03:00 jdbc[13]: 
/**/rs9.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.422633+03:00 jdbc[13]: 
/**/rs9.getString("COLUMN_TYPE");
2024-04-21 21:29:23.422664+03:00 jdbc[13]: 
/**/rs9.next();
2024-04-21 21:29:23.422692+03:00 jdbc[13]: 
/**/rs9.getString("COLUMN_NAME");
2024-04-21 21:29:23.422726+03:00 jdbc[13]: 
/**/rs9.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.422791+03:00 jdbc[13]: 
/**/rs9.getString("COLUMN_TYPE");
2024-04-21 21:29:23.422820+03:00 jdbc[13]: 
/**/rs9.next();
2024-04-21 21:29:23.422852+03:00 jdbc[13]: 
/**/rs9.getString("COLUMN_NAME");
2024-04-21 21:29:23.422888+03:00 jdbc[13]: 
/**/rs9.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.422920+03:00 jdbc[13]: 
/**/rs9.getString("COLUMN_TYPE");
2024-04-21 21:29:23.422949+03:00 jdbc[13]: 
/**/rs9.next();
2024-04-21 21:29:23.422976+03:00 jdbc[13]: 
/**/rs9.getString("COLUMN_NAME");
2024-04-21 21:29:23.423010+03:00 jdbc[13]: 
/**/rs9.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.423037+03:00 jdbc[13]: 
/**/rs9.getString("COLUMN_TYPE");
2024-04-21 21:29:23.423068+03:00 jdbc[13]: 
/**/rs9.next();
2024-04-21 21:29:23.423093+03:00 jdbc[13]: 
/**/rs9.getString("COLUMN_NAME");
2024-04-21 21:29:23.423127+03:00 jdbc[13]: 
/**/rs9.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.423156+03:00 jdbc[13]: 
/**/rs9.getString("COLUMN_TYPE");
2024-04-21 21:29:23.423181+03:00 jdbc[13]: 
/**/rs9.next();
2024-04-21 21:29:23.423211+03:00 jdbc[13]: 
/**/rs9.getString("COLUMN_NAME");
2024-04-21 21:29:23.423239+03:00 jdbc[13]: 
/**/rs9.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.423273+03:00 jdbc[13]: 
/**/rs9.getString("COLUMN_TYPE");
2024-04-21 21:29:23.423309+03:00 jdbc[13]: 
/**/rs9.next();
2024-04-21 21:29:23.423340+03:00 jdbc[13]: 
/**/rs9.getString("COLUMN_NAME");
2024-04-21 21:29:23.423372+03:00 jdbc[13]: 
/**/rs9.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.423397+03:00 jdbc[13]: 
/**/rs9.getString("COLUMN_TYPE");
2024-04-21 21:29:23.423426+03:00 jdbc[13]: 
/**/rs9.next();
2024-04-21 21:29:23.423451+03:00 jdbc[13]: 
/**/rs9.getString("COLUMN_NAME");
2024-04-21 21:29:23.423837+03:00 jdbc[13]: 
/**/rs9.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.423885+03:00 jdbc[13]: 
/**/rs9.getString("COLUMN_TYPE");
2024-04-21 21:29:23.423923+03:00 jdbc[13]: 
/**/rs9.next();
2024-04-21 21:29:23.423951+03:00 jdbc[13]: 
/**/rs9.getString("COLUMN_NAME");
2024-04-21 21:29:23.423975+03:00 jdbc[13]: 
/**/rs9.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.424000+03:00 jdbc[13]: 
/**/rs9.getString("COLUMN_TYPE");
2024-04-21 21:29:23.424021+03:00 jdbc[13]: 
/**/rs9.next();
2024-04-21 21:29:23.424047+03:00 jdbc[13]: 
/**/rs9.close();
2024-04-21 21:29:23.424080+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.424108+03:00 jdbc[13]: 
/**/prep0.setString(2, "RIGHTS");
2024-04-21 21:29:23.424139+03:00 jdbc[13]: 
/**/ResultSet rs10 = prep0.executeQuery();
2024-04-21 21:29:23.424930+03:00 jdbc[13]: 
/*SQL l:174 #:6*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'RIGHTS'};
2024-04-21 21:29:23.425063+03:00 jdbc[13]: 
/**/rs10.next();
2024-04-21 21:29:23.425117+03:00 jdbc[13]: 
/**/rs10.getString("COLUMN_NAME");
2024-04-21 21:29:23.425155+03:00 jdbc[13]: 
/**/rs10.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.425181+03:00 jdbc[13]: 
/**/rs10.getString("COLUMN_TYPE");
2024-04-21 21:29:23.425209+03:00 jdbc[13]: 
/**/rs10.next();
2024-04-21 21:29:23.425290+03:00 jdbc[13]: 
/**/rs10.getString("COLUMN_NAME");
2024-04-21 21:29:23.425316+03:00 jdbc[13]: 
/**/rs10.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.425346+03:00 jdbc[13]: 
/**/rs10.getString("COLUMN_TYPE");
2024-04-21 21:29:23.425366+03:00 jdbc[13]: 
/**/rs10.next();
2024-04-21 21:29:23.425389+03:00 jdbc[13]: 
/**/rs10.getString("COLUMN_NAME");
2024-04-21 21:29:23.425415+03:00 jdbc[13]: 
/**/rs10.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.425435+03:00 jdbc[13]: 
/**/rs10.getString("COLUMN_TYPE");
2024-04-21 21:29:23.425458+03:00 jdbc[13]: 
/**/rs10.next();
2024-04-21 21:29:23.425478+03:00 jdbc[13]: 
/**/rs10.getString("COLUMN_NAME");
2024-04-21 21:29:23.425503+03:00 jdbc[13]: 
/**/rs10.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.425523+03:00 jdbc[13]: 
/**/rs10.getString("COLUMN_TYPE");
2024-04-21 21:29:23.425546+03:00 jdbc[13]: 
/**/rs10.next();
2024-04-21 21:29:23.426090+03:00 jdbc[13]: 
/**/rs10.getString("COLUMN_NAME");
2024-04-21 21:29:23.426134+03:00 jdbc[13]: 
/**/rs10.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.426414+03:00 jdbc[13]: 
/**/rs10.getString("COLUMN_TYPE");
2024-04-21 21:29:23.426458+03:00 jdbc[13]: 
/**/rs10.next();
2024-04-21 21:29:23.426495+03:00 jdbc[13]: 
/**/rs10.getString("COLUMN_NAME");
2024-04-21 21:29:23.426529+03:00 jdbc[13]: 
/**/rs10.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.426627+03:00 jdbc[13]: 
/**/rs10.getString("COLUMN_TYPE");
2024-04-21 21:29:23.426657+03:00 jdbc[13]: 
/**/rs10.next();
2024-04-21 21:29:23.426679+03:00 jdbc[13]: 
/**/rs10.close();
2024-04-21 21:29:23.426714+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.426748+03:00 jdbc[13]: 
/**/prep0.setString(2, "ROLES");
2024-04-21 21:29:23.426777+03:00 jdbc[13]: 
/**/ResultSet rs11 = prep0.executeQuery();
2024-04-21 21:29:23.427046+03:00 jdbc[13]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'ROLES'};
2024-04-21 21:29:23.427122+03:00 jdbc[13]: 
/**/rs11.next();
2024-04-21 21:29:23.427147+03:00 jdbc[13]: 
/**/rs11.getString("COLUMN_NAME");
2024-04-21 21:29:23.427178+03:00 jdbc[13]: 
/**/rs11.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.427251+03:00 jdbc[13]: 
/**/rs11.getString("COLUMN_TYPE");
2024-04-21 21:29:23.427293+03:00 jdbc[13]: 
/**/rs11.next();
2024-04-21 21:29:23.427563+03:00 jdbc[13]: 
/**/rs11.getString("COLUMN_NAME");
2024-04-21 21:29:23.427605+03:00 jdbc[13]: 
/**/rs11.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.427632+03:00 jdbc[13]: 
/**/rs11.getString("COLUMN_TYPE");
2024-04-21 21:29:23.427653+03:00 jdbc[13]: 
/**/rs11.next();
2024-04-21 21:29:23.427681+03:00 jdbc[13]: 
/**/rs11.close();
2024-04-21 21:29:23.427709+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.427740+03:00 jdbc[13]: 
/**/prep0.setString(2, "SESSIONS");
2024-04-21 21:29:23.427772+03:00 jdbc[13]: 
/**/ResultSet rs12 = prep0.executeQuery();
2024-04-21 21:29:23.428286+03:00 jdbc[13]: 
/*SQL l:174 #:13*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'SESSIONS'};
2024-04-21 21:29:23.428364+03:00 jdbc[13]: 
/**/rs12.next();
2024-04-21 21:29:23.428401+03:00 jdbc[13]: 
/**/rs12.getString("COLUMN_NAME");
2024-04-21 21:29:23.428431+03:00 jdbc[13]: 
/**/rs12.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.428452+03:00 jdbc[13]: 
/**/rs12.getString("COLUMN_TYPE");
2024-04-21 21:29:23.428476+03:00 jdbc[13]: 
/**/rs12.next();
2024-04-21 21:29:23.428496+03:00 jdbc[13]: 
/**/rs12.getString("COLUMN_NAME");
2024-04-21 21:29:23.428521+03:00 jdbc[13]: 
/**/rs12.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.428540+03:00 jdbc[13]: 
/**/rs12.getString("COLUMN_TYPE");
2024-04-21 21:29:23.428577+03:00 jdbc[13]: 
/**/rs12.next();
2024-04-21 21:29:23.428599+03:00 jdbc[13]: 
/**/rs12.getString("COLUMN_NAME");
2024-04-21 21:29:23.428631+03:00 jdbc[13]: 
/**/rs12.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.428656+03:00 jdbc[13]: 
/**/rs12.getString("COLUMN_TYPE");
2024-04-21 21:29:23.428675+03:00 jdbc[13]: 
/**/rs12.next();
2024-04-21 21:29:23.428698+03:00 jdbc[13]: 
/**/rs12.getString("COLUMN_NAME");
2024-04-21 21:29:23.428722+03:00 jdbc[13]: 
/**/rs12.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.428743+03:00 jdbc[13]: 
/**/rs12.getString("COLUMN_TYPE");
2024-04-21 21:29:23.428765+03:00 jdbc[13]: 
/**/rs12.next();
2024-04-21 21:29:23.428784+03:00 jdbc[13]: 
/**/rs12.getString("COLUMN_NAME");
2024-04-21 21:29:23.428809+03:00 jdbc[13]: 
/**/rs12.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.428831+03:00 jdbc[13]: 
/**/rs12.getString("COLUMN_TYPE");
2024-04-21 21:29:23.428854+03:00 jdbc[13]: 
/**/rs12.next();
2024-04-21 21:29:23.428877+03:00 jdbc[13]: 
/**/rs12.getString("COLUMN_NAME");
2024-04-21 21:29:23.428898+03:00 jdbc[13]: 
/**/rs12.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.428922+03:00 jdbc[13]: 
/**/rs12.getString("COLUMN_TYPE");
2024-04-21 21:29:23.428940+03:00 jdbc[13]: 
/**/rs12.next();
2024-04-21 21:29:23.428967+03:00 jdbc[13]: 
/**/rs12.getString("COLUMN_NAME");
2024-04-21 21:29:23.430426+03:00 jdbc[13]: 
/**/rs12.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.430462+03:00 jdbc[13]: 
/**/rs12.getString("COLUMN_TYPE");
2024-04-21 21:29:23.430494+03:00 jdbc[13]: 
/**/rs12.next();
2024-04-21 21:29:23.430689+03:00 jdbc[13]: 
/**/rs12.getString("COLUMN_NAME");
2024-04-21 21:29:23.430975+03:00 jdbc[13]: 
/**/rs12.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.431017+03:00 jdbc[13]: 
/**/rs12.getString("COLUMN_TYPE");
2024-04-21 21:29:23.431050+03:00 jdbc[13]: 
/**/rs12.next();
2024-04-21 21:29:23.431081+03:00 jdbc[13]: 
/**/rs12.getString("COLUMN_NAME");
2024-04-21 21:29:23.431113+03:00 jdbc[13]: 
/**/rs12.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.431152+03:00 jdbc[13]: 
/**/rs12.getString("COLUMN_TYPE");
2024-04-21 21:29:23.431178+03:00 jdbc[13]: 
/**/rs12.next();
2024-04-21 21:29:23.431206+03:00 jdbc[13]: 
/**/rs12.getString("COLUMN_NAME");
2024-04-21 21:29:23.431234+03:00 jdbc[13]: 
/**/rs12.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.431258+03:00 jdbc[13]: 
/**/rs12.getString("COLUMN_TYPE");
2024-04-21 21:29:23.431284+03:00 jdbc[13]: 
/**/rs12.next();
2024-04-21 21:29:23.431306+03:00 jdbc[13]: 
/**/rs12.getString("COLUMN_NAME");
2024-04-21 21:29:23.431334+03:00 jdbc[13]: 
/**/rs12.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.431356+03:00 jdbc[13]: 
/**/rs12.getString("COLUMN_TYPE");
2024-04-21 21:29:23.431381+03:00 jdbc[13]: 
/**/rs12.next();
2024-04-21 21:29:23.431406+03:00 jdbc[13]: 
/**/rs12.getString("COLUMN_NAME");
2024-04-21 21:29:23.431431+03:00 jdbc[13]: 
/**/rs12.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.431456+03:00 jdbc[13]: 
/**/rs12.getString("COLUMN_TYPE");
2024-04-21 21:29:23.431475+03:00 jdbc[13]: 
/**/rs12.next();
2024-04-21 21:29:23.431500+03:00 jdbc[13]: 
/**/rs12.getString("COLUMN_NAME");
2024-04-21 21:29:23.431533+03:00 jdbc[13]: 
/**/rs12.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.431555+03:00 jdbc[13]: 
/**/rs12.getString("COLUMN_TYPE");
2024-04-21 21:29:23.431580+03:00 jdbc[13]: 
/**/rs12.next();
2024-04-21 21:29:23.431602+03:00 jdbc[13]: 
/**/rs12.close();
2024-04-21 21:29:23.431639+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.431671+03:00 jdbc[13]: 
/**/prep0.setString(2, "SESSION_STATE");
2024-04-21 21:29:23.431701+03:00 jdbc[13]: 
/**/ResultSet rs13 = prep0.executeQuery();
2024-04-21 21:29:23.432099+03:00 jdbc[13]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'SESSION_STATE'};
2024-04-21 21:29:23.432213+03:00 jdbc[13]: 
/**/rs13.next();
2024-04-21 21:29:23.432257+03:00 jdbc[13]: 
/**/rs13.getString("COLUMN_NAME");
2024-04-21 21:29:23.432308+03:00 jdbc[13]: 
/**/rs13.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.432337+03:00 jdbc[13]: 
/**/rs13.getString("COLUMN_TYPE");
2024-04-21 21:29:23.432359+03:00 jdbc[13]: 
/**/rs13.next();
2024-04-21 21:29:23.432407+03:00 jdbc[13]: 
/**/rs13.getString("COLUMN_NAME");
2024-04-21 21:29:23.432438+03:00 jdbc[13]: 
/**/rs13.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.432466+03:00 jdbc[13]: 
/**/rs13.getString("COLUMN_TYPE");
2024-04-21 21:29:23.432485+03:00 jdbc[13]: 
/**/rs13.next();
2024-04-21 21:29:23.432522+03:00 jdbc[13]: 
/**/rs13.close();
2024-04-21 21:29:23.432553+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.432583+03:00 jdbc[13]: 
/**/prep0.setString(2, "SETTINGS");
2024-04-21 21:29:23.432616+03:00 jdbc[13]: 
/**/ResultSet rs14 = prep0.executeQuery();
2024-04-21 21:29:23.432868+03:00 jdbc[13]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'SETTINGS'};
2024-04-21 21:29:23.432959+03:00 jdbc[13]: 
/**/rs14.next();
2024-04-21 21:29:23.432996+03:00 jdbc[13]: 
/**/rs14.getString("COLUMN_NAME");
2024-04-21 21:29:23.433047+03:00 jdbc[13]: 
/**/rs14.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.433073+03:00 jdbc[13]: 
/**/rs14.getString("COLUMN_TYPE");
2024-04-21 21:29:23.433101+03:00 jdbc[13]: 
/**/rs14.next();
2024-04-21 21:29:23.433124+03:00 jdbc[13]: 
/**/rs14.getString("COLUMN_NAME");
2024-04-21 21:29:23.433155+03:00 jdbc[13]: 
/**/rs14.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.433178+03:00 jdbc[13]: 
/**/rs14.getString("COLUMN_TYPE");
2024-04-21 21:29:23.433205+03:00 jdbc[13]: 
/**/rs14.next();
2024-04-21 21:29:23.433229+03:00 jdbc[13]: 
/**/rs14.close();
2024-04-21 21:29:23.433256+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.433284+03:00 jdbc[13]: 
/**/prep0.setString(2, "SYNONYMS");
2024-04-21 21:29:23.433310+03:00 jdbc[13]: 
/**/ResultSet rs15 = prep0.executeQuery();
2024-04-21 21:29:23.433709+03:00 jdbc[13]: 
/*SQL l:174 #:8*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'SYNONYMS'};
2024-04-21 21:29:23.433794+03:00 jdbc[13]: 
/**/rs15.next();
2024-04-21 21:29:23.433823+03:00 jdbc[13]: 
/**/rs15.getString("COLUMN_NAME");
2024-04-21 21:29:23.433859+03:00 jdbc[13]: 
/**/rs15.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.433886+03:00 jdbc[13]: 
/**/rs15.getString("COLUMN_TYPE");
2024-04-21 21:29:23.433910+03:00 jdbc[13]: 
/**/rs15.next();
2024-04-21 21:29:23.433939+03:00 jdbc[13]: 
/**/rs15.getString("COLUMN_NAME");
2024-04-21 21:29:23.433964+03:00 jdbc[13]: 
/**/rs15.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.433992+03:00 jdbc[13]: 
/**/rs15.getString("COLUMN_TYPE");
2024-04-21 21:29:23.434013+03:00 jdbc[13]: 
/**/rs15.next();
2024-04-21 21:29:23.434045+03:00 jdbc[13]: 
/**/rs15.getString("COLUMN_NAME");
2024-04-21 21:29:23.434072+03:00 jdbc[13]: 
/**/rs15.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.434094+03:00 jdbc[13]: 
/**/rs15.getString("COLUMN_TYPE");
2024-04-21 21:29:23.434120+03:00 jdbc[13]: 
/**/rs15.next();
2024-04-21 21:29:23.434145+03:00 jdbc[13]: 
/**/rs15.getString("COLUMN_NAME");
2024-04-21 21:29:23.434175+03:00 jdbc[13]: 
/**/rs15.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.434206+03:00 jdbc[13]: 
/**/rs15.getString("COLUMN_TYPE");
2024-04-21 21:29:23.434236+03:00 jdbc[13]: 
/**/rs15.next();
2024-04-21 21:29:23.434262+03:00 jdbc[13]: 
/**/rs15.getString("COLUMN_NAME");
2024-04-21 21:29:23.434287+03:00 jdbc[13]: 
/**/rs15.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.434316+03:00 jdbc[13]: 
/**/rs15.getString("COLUMN_TYPE");
2024-04-21 21:29:23.434338+03:00 jdbc[13]: 
/**/rs15.next();
2024-04-21 21:29:23.434366+03:00 jdbc[13]: 
/**/rs15.getString("COLUMN_NAME");
2024-04-21 21:29:23.434394+03:00 jdbc[13]: 
/**/rs15.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.434417+03:00 jdbc[13]: 
/**/rs15.getString("COLUMN_TYPE");
2024-04-21 21:29:23.434443+03:00 jdbc[13]: 
/**/rs15.next();
2024-04-21 21:29:23.434464+03:00 jdbc[13]: 
/**/rs15.getString("COLUMN_NAME");
2024-04-21 21:29:23.434492+03:00 jdbc[13]: 
/**/rs15.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.434532+03:00 jdbc[13]: 
/**/rs15.getString("COLUMN_TYPE");
2024-04-21 21:29:23.434555+03:00 jdbc[13]: 
/**/rs15.next();
2024-04-21 21:29:23.434582+03:00 jdbc[13]: 
/**/rs15.getString("COLUMN_NAME");
2024-04-21 21:29:23.434606+03:00 jdbc[13]: 
/**/rs15.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.434635+03:00 jdbc[13]: 
/**/rs15.getString("COLUMN_TYPE");
2024-04-21 21:29:23.434656+03:00 jdbc[13]: 
/**/rs15.next();
2024-04-21 21:29:23.434681+03:00 jdbc[13]: 
/**/rs15.close();
2024-04-21 21:29:23.434712+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.434739+03:00 jdbc[13]: 
/**/prep0.setString(2, "USERS");
2024-04-21 21:29:23.434770+03:00 jdbc[13]: 
/**/ResultSet rs16 = prep0.executeQuery();
2024-04-21 21:29:23.435016+03:00 jdbc[13]: 
/*SQL l:174 #:3*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'USERS'};
2024-04-21 21:29:23.435101+03:00 jdbc[13]: 
/**/rs16.next();
2024-04-21 21:29:23.435129+03:00 jdbc[13]: 
/**/rs16.getString("COLUMN_NAME");
2024-04-21 21:29:23.435160+03:00 jdbc[13]: 
/**/rs16.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.435184+03:00 jdbc[13]: 
/**/rs16.getString("COLUMN_TYPE");
2024-04-21 21:29:23.435210+03:00 jdbc[13]: 
/**/rs16.next();
2024-04-21 21:29:23.435236+03:00 jdbc[13]: 
/**/rs16.getString("COLUMN_NAME");
2024-04-21 21:29:23.435259+03:00 jdbc[13]: 
/**/rs16.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.435282+03:00 jdbc[13]: 
/**/rs16.getString("COLUMN_TYPE");
2024-04-21 21:29:23.435302+03:00 jdbc[13]: 
/**/rs16.next();
2024-04-21 21:29:23.435328+03:00 jdbc[13]: 
/**/rs16.getString("COLUMN_NAME");
2024-04-21 21:29:23.435355+03:00 jdbc[13]: 
/**/rs16.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.435377+03:00 jdbc[13]: 
/**/rs16.getString("COLUMN_TYPE");
2024-04-21 21:29:23.435401+03:00 jdbc[13]: 
/**/rs16.next();
2024-04-21 21:29:23.435422+03:00 jdbc[13]: 
/**/rs16.close();
2024-04-21 21:29:23.435456+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.435490+03:00 jdbc[13]: 
/**/prep0.setString(2, "CHECK_CONSTRAINTS");
2024-04-21 21:29:23.435520+03:00 jdbc[13]: 
/**/ResultSet rs17 = prep0.executeQuery();
2024-04-21 21:29:23.435811+03:00 jdbc[13]: 
/*SQL l:174 #:4*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'CHECK_CONSTRAINTS'};
2024-04-21 21:29:23.435888+03:00 jdbc[13]: 
/**/rs17.next();
2024-04-21 21:29:23.435920+03:00 jdbc[13]: 
/**/rs17.getString("COLUMN_NAME");
2024-04-21 21:29:23.435953+03:00 jdbc[13]: 
/**/rs17.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.435980+03:00 jdbc[13]: 
/**/rs17.getString("COLUMN_TYPE");
2024-04-21 21:29:23.436009+03:00 jdbc[13]: 
/**/rs17.next();
2024-04-21 21:29:23.436031+03:00 jdbc[13]: 
/**/rs17.getString("COLUMN_NAME");
2024-04-21 21:29:23.436061+03:00 jdbc[13]: 
/**/rs17.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.436087+03:00 jdbc[13]: 
/**/rs17.getString("COLUMN_TYPE");
2024-04-21 21:29:23.436109+03:00 jdbc[13]: 
/**/rs17.next();
2024-04-21 21:29:23.436133+03:00 jdbc[13]: 
/**/rs17.getString("COLUMN_NAME");
2024-04-21 21:29:23.436158+03:00 jdbc[13]: 
/**/rs17.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.436186+03:00 jdbc[13]: 
/**/rs17.getString("COLUMN_TYPE");
2024-04-21 21:29:23.436206+03:00 jdbc[13]: 
/**/rs17.next();
2024-04-21 21:29:23.436233+03:00 jdbc[13]: 
/**/rs17.getString("COLUMN_NAME");
2024-04-21 21:29:23.436261+03:00 jdbc[13]: 
/**/rs17.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.436286+03:00 jdbc[13]: 
/**/rs17.getString("COLUMN_TYPE");
2024-04-21 21:29:23.436312+03:00 jdbc[13]: 
/**/rs17.next();
2024-04-21 21:29:23.436336+03:00 jdbc[13]: 
/**/rs17.close();
2024-04-21 21:29:23.436396+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.436428+03:00 jdbc[13]: 
/**/prep0.setString(2, "COLLATIONS");
2024-04-21 21:29:23.436458+03:00 jdbc[13]: 
/**/ResultSet rs18 = prep0.executeQuery();
2024-04-21 21:29:23.436877+03:00 jdbc[13]: 
/*SQL l:174 #:5*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'COLLATIONS'};
2024-04-21 21:29:23.436963+03:00 jdbc[13]: 
/**/rs18.next();
2024-04-21 21:29:23.436992+03:00 jdbc[13]: 
/**/rs18.getString("COLUMN_NAME");
2024-04-21 21:29:23.437026+03:00 jdbc[13]: 
/**/rs18.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.437050+03:00 jdbc[13]: 
/**/rs18.getString("COLUMN_TYPE");
2024-04-21 21:29:23.440630+03:00 jdbc[13]: 
/**/rs18.next();
2024-04-21 21:29:23.440703+03:00 jdbc[13]: 
/**/rs18.getString("COLUMN_NAME");
2024-04-21 21:29:23.440809+03:00 jdbc[13]: 
/**/rs18.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.440844+03:00 jdbc[13]: 
/**/rs18.getString("COLUMN_TYPE");
2024-04-21 21:29:23.440872+03:00 jdbc[13]: 
/**/rs18.next();
2024-04-21 21:29:23.440901+03:00 jdbc[13]: 
/**/rs18.getString("COLUMN_NAME");
2024-04-21 21:29:23.440926+03:00 jdbc[13]: 
/**/rs18.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.440950+03:00 jdbc[13]: 
/**/rs18.getString("COLUMN_TYPE");
2024-04-21 21:29:23.440977+03:00 jdbc[13]: 
/**/rs18.next();
2024-04-21 21:29:23.441000+03:00 jdbc[13]: 
/**/rs18.getString("COLUMN_NAME");
2024-04-21 21:29:23.441030+03:00 jdbc[13]: 
/**/rs18.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.441050+03:00 jdbc[13]: 
/**/rs18.getString("COLUMN_TYPE");
2024-04-21 21:29:23.441072+03:00 jdbc[13]: 
/**/rs18.next();
2024-04-21 21:29:23.441093+03:00 jdbc[13]: 
/**/rs18.getString("COLUMN_NAME");
2024-04-21 21:29:23.441113+03:00 jdbc[13]: 
/**/rs18.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.441135+03:00 jdbc[13]: 
/**/rs18.getString("COLUMN_TYPE");
2024-04-21 21:29:23.441152+03:00 jdbc[13]: 
/**/rs18.next();
2024-04-21 21:29:23.441174+03:00 jdbc[13]: 
/**/rs18.close();
2024-04-21 21:29:23.441200+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.441230+03:00 jdbc[13]: 
/**/prep0.setString(2, "COLUMNS");
2024-04-21 21:29:23.441261+03:00 jdbc[13]: 
/**/ResultSet rs19 = prep0.executeQuery();
2024-04-21 21:29:23.442299+03:00 jdbc[13]: 
/*SQL l:174 #:48*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'COLUMNS'};
2024-04-21 21:29:23.442415+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.442453+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.442485+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.442510+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.442537+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.442558+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.442600+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.442628+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.442652+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.442680+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.442707+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.442735+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.442758+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.442785+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.442812+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.442834+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.442860+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.442884+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.442914+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.442939+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.442961+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.442987+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.443011+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.443035+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.443054+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.443078+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.443102+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.443125+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.443151+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.443173+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.443203+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.443229+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.443251+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.443277+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.443303+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.443330+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.443352+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.443391+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.443419+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.443441+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.443468+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.443490+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.443520+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.443546+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.443570+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.443598+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.443622+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.443647+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.443672+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.443695+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.443721+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.443740+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.443765+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.443787+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.443816+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.443842+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.443864+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.443888+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.443911+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.443936+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.443958+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.443979+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.444018+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.444039+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.444065+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.444087+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.444114+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.444138+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.444159+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.444183+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.444206+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.444232+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.444257+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.444279+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.444306+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.444327+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.444353+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.447205+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.447276+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.455115+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.456607+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.456681+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.456711+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.456772+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.456793+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.456812+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.456839+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.456856+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.456880+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.456899+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.456921+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.456942+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.456959+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.457062+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.457097+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.457124+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.457147+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.457167+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.457191+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.457209+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.457231+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.457252+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.457272+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.457294+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.457311+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.457333+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.457352+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.457374+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.457395+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.457413+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.457436+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.457454+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.457475+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.457496+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.457515+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.457536+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.457553+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.457574+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.457593+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.457615+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.457636+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.457654+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.457677+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.457694+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.457716+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.457737+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.457756+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.457778+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.457795+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.457816+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.457835+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.457856+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.457876+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.457894+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.457917+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.457935+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.457957+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.457977+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.457996+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.458018+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.458035+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.458056+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.458078+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.458099+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.458120+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.458139+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.458161+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.458179+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.458199+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.458220+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.458239+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.458261+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.458278+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.458300+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.458323+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.458341+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.458362+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.458379+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.458402+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.459322+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.459373+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.459403+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.459427+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.459452+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.459522+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.459549+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.459574+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.459594+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.459616+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.459636+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.459660+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.459684+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.459703+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.459725+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.459746+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.459769+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.459786+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.459809+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.459832+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.459851+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.459886+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.459903+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.459925+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.459946+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.459964+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.459984+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.460003+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.460024+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.460041+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.460062+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_NAME");
2024-04-21 21:29:23.460083+03:00 jdbc[13]: 
/**/rs19.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.460101+03:00 jdbc[13]: 
/**/rs19.getString("COLUMN_TYPE");
2024-04-21 21:29:23.460122+03:00 jdbc[13]: 
/**/rs19.next();
2024-04-21 21:29:23.460139+03:00 jdbc[13]: 
/**/rs19.close();
2024-04-21 21:29:23.460174+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.460208+03:00 jdbc[13]: 
/**/prep0.setString(2, "COLUMN_PRIVILEGES");
2024-04-21 21:29:23.460237+03:00 jdbc[13]: 
/**/ResultSet rs20 = prep0.executeQuery();
2024-04-21 21:29:23.464021+03:00 jdbc[13]: 
/*SQL l:174 #:8 t:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'COLUMN_PRIVILEGES'};
2024-04-21 21:29:23.476109+03:00 jdbc[13]: 
/**/rs20.next();
2024-04-21 21:29:23.492313+03:00 jdbc[13]: 
/**/rs20.getString("COLUMN_NAME");
2024-04-21 21:29:23.514228+03:00 jdbc[13]: 
/**/rs20.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.522546+03:00 jdbc[13]: 
/**/rs20.getString("COLUMN_TYPE");
2024-04-21 21:29:23.526486+03:00 jdbc[13]: 
/**/rs20.next();
2024-04-21 21:29:23.526556+03:00 jdbc[13]: 
/**/rs20.getString("COLUMN_NAME");
2024-04-21 21:29:23.527207+03:00 jdbc[13]: 
/**/rs20.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.527255+03:00 jdbc[13]: 
/**/rs20.getString("COLUMN_TYPE");
2024-04-21 21:29:23.527305+03:00 jdbc[13]: 
/**/rs20.next();
2024-04-21 21:29:23.527353+03:00 jdbc[13]: 
/**/rs20.getString("COLUMN_NAME");
2024-04-21 21:29:23.527381+03:00 jdbc[13]: 
/**/rs20.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.527404+03:00 jdbc[13]: 
/**/rs20.getString("COLUMN_TYPE");
2024-04-21 21:29:23.527428+03:00 jdbc[13]: 
/**/rs20.next();
2024-04-21 21:29:23.527450+03:00 jdbc[13]: 
/**/rs20.getString("COLUMN_NAME");
2024-04-21 21:29:23.527479+03:00 jdbc[13]: 
/**/rs20.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.527502+03:00 jdbc[13]: 
/**/rs20.getString("COLUMN_TYPE");
2024-04-21 21:29:23.527521+03:00 jdbc[13]: 
/**/rs20.next();
2024-04-21 21:29:23.527545+03:00 jdbc[13]: 
/**/rs20.getString("COLUMN_NAME");
2024-04-21 21:29:23.527568+03:00 jdbc[13]: 
/**/rs20.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.527593+03:00 jdbc[13]: 
/**/rs20.getString("COLUMN_TYPE");
2024-04-21 21:29:23.527611+03:00 jdbc[13]: 
/**/rs20.next();
2024-04-21 21:29:23.527635+03:00 jdbc[13]: 
/**/rs20.getString("COLUMN_NAME");
2024-04-21 21:29:23.527657+03:00 jdbc[13]: 
/**/rs20.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.527678+03:00 jdbc[13]: 
/**/rs20.getString("COLUMN_TYPE");
2024-04-21 21:29:23.527705+03:00 jdbc[13]: 
/**/rs20.next();
2024-04-21 21:29:23.527725+03:00 jdbc[13]: 
/**/rs20.getString("COLUMN_NAME");
2024-04-21 21:29:23.527751+03:00 jdbc[13]: 
/**/rs20.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.527777+03:00 jdbc[13]: 
/**/rs20.getString("COLUMN_TYPE");
2024-04-21 21:29:23.527798+03:00 jdbc[13]: 
/**/rs20.next();
2024-04-21 21:29:23.527825+03:00 jdbc[13]: 
/**/rs20.getString("COLUMN_NAME");
2024-04-21 21:29:23.527860+03:00 jdbc[13]: 
/**/rs20.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.527887+03:00 jdbc[13]: 
/**/rs20.getString("COLUMN_TYPE");
2024-04-21 21:29:23.527907+03:00 jdbc[13]: 
/**/rs20.next();
2024-04-21 21:29:23.527931+03:00 jdbc[13]: 
/**/rs20.close();
2024-04-21 21:29:23.527972+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.528005+03:00 jdbc[13]: 
/**/prep0.setString(2, "CONSTRAINT_COLUMN_USAGE");
2024-04-21 21:29:23.528043+03:00 jdbc[13]: 
/**/ResultSet rs21 = prep0.executeQuery();
2024-04-21 21:29:23.528397+03:00 jdbc[13]: 
/*SQL l:174 #:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'CONSTRAINT_COLUMN_USAGE'};
2024-04-21 21:29:23.529556+03:00 jdbc[13]: 
/**/rs21.next();
2024-04-21 21:29:23.529641+03:00 jdbc[13]: 
/**/rs21.getString("COLUMN_NAME");
2024-04-21 21:29:23.529675+03:00 jdbc[13]: 
/**/rs21.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.529705+03:00 jdbc[13]: 
/**/rs21.getString("COLUMN_TYPE");
2024-04-21 21:29:23.529728+03:00 jdbc[13]: 
/**/rs21.next();
2024-04-21 21:29:23.529755+03:00 jdbc[13]: 
/**/rs21.getString("COLUMN_NAME");
2024-04-21 21:29:23.529783+03:00 jdbc[13]: 
/**/rs21.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.529804+03:00 jdbc[13]: 
/**/rs21.getString("COLUMN_TYPE");
2024-04-21 21:29:23.529828+03:00 jdbc[13]: 
/**/rs21.next();
2024-04-21 21:29:23.529851+03:00 jdbc[13]: 
/**/rs21.getString("COLUMN_NAME");
2024-04-21 21:29:23.529883+03:00 jdbc[13]: 
/**/rs21.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.529910+03:00 jdbc[13]: 
/**/rs21.getString("COLUMN_TYPE");
2024-04-21 21:29:23.529934+03:00 jdbc[13]: 
/**/rs21.next();
2024-04-21 21:29:23.529968+03:00 jdbc[13]: 
/**/rs21.getString("COLUMN_NAME");
2024-04-21 21:29:23.529992+03:00 jdbc[13]: 
/**/rs21.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.530017+03:00 jdbc[13]: 
/**/rs21.getString("COLUMN_TYPE");
2024-04-21 21:29:23.530039+03:00 jdbc[13]: 
/**/rs21.next();
2024-04-21 21:29:23.530066+03:00 jdbc[13]: 
/**/rs21.getString("COLUMN_NAME");
2024-04-21 21:29:23.530092+03:00 jdbc[13]: 
/**/rs21.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.530114+03:00 jdbc[13]: 
/**/rs21.getString("COLUMN_TYPE");
2024-04-21 21:29:23.530138+03:00 jdbc[13]: 
/**/rs21.next();
2024-04-21 21:29:23.530160+03:00 jdbc[13]: 
/**/rs21.getString("COLUMN_NAME");
2024-04-21 21:29:23.530188+03:00 jdbc[13]: 
/**/rs21.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.530212+03:00 jdbc[13]: 
/**/rs21.getString("COLUMN_TYPE");
2024-04-21 21:29:23.530232+03:00 jdbc[13]: 
/**/rs21.next();
2024-04-21 21:29:23.530255+03:00 jdbc[13]: 
/**/rs21.getString("COLUMN_NAME");
2024-04-21 21:29:23.530277+03:00 jdbc[13]: 
/**/rs21.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.530301+03:00 jdbc[13]: 
/**/rs21.getString("COLUMN_TYPE");
2024-04-21 21:29:23.530320+03:00 jdbc[13]: 
/**/rs21.next();
2024-04-21 21:29:23.530345+03:00 jdbc[13]: 
/**/rs21.close();
2024-04-21 21:29:23.530380+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.530410+03:00 jdbc[13]: 
/**/prep0.setString(2, "DOMAINS");
2024-04-21 21:29:23.530444+03:00 jdbc[13]: 
/**/ResultSet rs22 = prep0.executeQuery();
2024-04-21 21:29:23.531134+03:00 jdbc[13]: 
/*SQL l:174 #:31*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'DOMAINS'};
2024-04-21 21:29:23.531211+03:00 jdbc[13]: 
/**/rs22.next();
2024-04-21 21:29:23.531235+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2024-04-21 21:29:23.531262+03:00 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.531285+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2024-04-21 21:29:23.531305+03:00 jdbc[13]: 
/**/rs22.next();
2024-04-21 21:29:23.531329+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2024-04-21 21:29:23.531350+03:00 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.531374+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2024-04-21 21:29:23.531393+03:00 jdbc[13]: 
/**/rs22.next();
2024-04-21 21:29:23.531416+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2024-04-21 21:29:23.531439+03:00 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.531458+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2024-04-21 21:29:23.531483+03:00 jdbc[13]: 
/**/rs22.next();
2024-04-21 21:29:23.531504+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2024-04-21 21:29:23.531529+03:00 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.531553+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2024-04-21 21:29:23.531574+03:00 jdbc[13]: 
/**/rs22.next();
2024-04-21 21:29:23.531599+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2024-04-21 21:29:23.531621+03:00 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.531647+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2024-04-21 21:29:23.531666+03:00 jdbc[13]: 
/**/rs22.next();
2024-04-21 21:29:23.531691+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2024-04-21 21:29:23.531716+03:00 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.531738+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2024-04-21 21:29:23.531763+03:00 jdbc[13]: 
/**/rs22.next();
2024-04-21 21:29:23.531785+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2024-04-21 21:29:23.531812+03:00 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.531837+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2024-04-21 21:29:23.531860+03:00 jdbc[13]: 
/**/rs22.next();
2024-04-21 21:29:23.531887+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2024-04-21 21:29:23.531908+03:00 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.531935+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2024-04-21 21:29:23.531955+03:00 jdbc[13]: 
/**/rs22.next();
2024-04-21 21:29:23.531979+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2024-04-21 21:29:23.532004+03:00 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.532026+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2024-04-21 21:29:23.532052+03:00 jdbc[13]: 
/**/rs22.next();
2024-04-21 21:29:23.532073+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2024-04-21 21:29:23.532100+03:00 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.532126+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2024-04-21 21:29:23.532147+03:00 jdbc[13]: 
/**/rs22.next();
2024-04-21 21:29:23.532172+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2024-04-21 21:29:23.532195+03:00 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.532220+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2024-04-21 21:29:23.532258+03:00 jdbc[13]: 
/**/rs22.next();
2024-04-21 21:29:23.532282+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2024-04-21 21:29:23.532309+03:00 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.532332+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2024-04-21 21:29:23.532358+03:00 jdbc[13]: 
/**/rs22.next();
2024-04-21 21:29:23.532380+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2024-04-21 21:29:23.532409+03:00 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.532435+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2024-04-21 21:29:23.532461+03:00 jdbc[13]: 
/**/rs22.next();
2024-04-21 21:29:23.532492+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2024-04-21 21:29:23.532516+03:00 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.532543+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2024-04-21 21:29:23.532568+03:00 jdbc[13]: 
/**/rs22.next();
2024-04-21 21:29:23.532591+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2024-04-21 21:29:23.532618+03:00 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.532640+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2024-04-21 21:29:23.532668+03:00 jdbc[13]: 
/**/rs22.next();
2024-04-21 21:29:23.532691+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2024-04-21 21:29:23.532718+03:00 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.532743+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2024-04-21 21:29:23.532765+03:00 jdbc[13]: 
/**/rs22.next();
2024-04-21 21:29:23.532792+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2024-04-21 21:29:23.532815+03:00 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.532841+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2024-04-21 21:29:23.532865+03:00 jdbc[13]: 
/**/rs22.next();
2024-04-21 21:29:23.532887+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2024-04-21 21:29:23.532914+03:00 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.532941+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2024-04-21 21:29:23.532966+03:00 jdbc[13]: 
/**/rs22.next();
2024-04-21 21:29:23.532986+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2024-04-21 21:29:23.533011+03:00 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.533040+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2024-04-21 21:29:23.533062+03:00 jdbc[13]: 
/**/rs22.next();
2024-04-21 21:29:23.533085+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2024-04-21 21:29:23.533114+03:00 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.533138+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2024-04-21 21:29:23.533159+03:00 jdbc[13]: 
/**/rs22.next();
2024-04-21 21:29:23.533179+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2024-04-21 21:29:23.533204+03:00 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.533247+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2024-04-21 21:29:23.533271+03:00 jdbc[13]: 
/**/rs22.next();
2024-04-21 21:29:23.533292+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2024-04-21 21:29:23.533312+03:00 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.533334+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2024-04-21 21:29:23.533352+03:00 jdbc[13]: 
/**/rs22.next();
2024-04-21 21:29:23.533374+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2024-04-21 21:29:23.533395+03:00 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.533417+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2024-04-21 21:29:23.534903+03:00 jdbc[13]: 
/**/rs22.next();
2024-04-21 21:29:23.534948+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2024-04-21 21:29:23.535086+03:00 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.535111+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2024-04-21 21:29:23.535135+03:00 jdbc[13]: 
/**/rs22.next();
2024-04-21 21:29:23.535159+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2024-04-21 21:29:23.535180+03:00 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.535206+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2024-04-21 21:29:23.535224+03:00 jdbc[13]: 
/**/rs22.next();
2024-04-21 21:29:23.535248+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2024-04-21 21:29:23.535268+03:00 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.535291+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2024-04-21 21:29:23.535313+03:00 jdbc[13]: 
/**/rs22.next();
2024-04-21 21:29:23.535331+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2024-04-21 21:29:23.535362+03:00 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.535381+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2024-04-21 21:29:23.535404+03:00 jdbc[13]: 
/**/rs22.next();
2024-04-21 21:29:23.535426+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2024-04-21 21:29:23.535446+03:00 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.535468+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2024-04-21 21:29:23.535486+03:00 jdbc[13]: 
/**/rs22.next();
2024-04-21 21:29:23.535509+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2024-04-21 21:29:23.535532+03:00 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.535552+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2024-04-21 21:29:23.535574+03:00 jdbc[13]: 
/**/rs22.next();
2024-04-21 21:29:23.535593+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2024-04-21 21:29:23.535617+03:00 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.535635+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2024-04-21 21:29:23.535709+03:00 jdbc[13]: 
/**/rs22.next();
2024-04-21 21:29:23.535735+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_NAME");
2024-04-21 21:29:23.535755+03:00 jdbc[13]: 
/**/rs22.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.535778+03:00 jdbc[13]: 
/**/rs22.getString("COLUMN_TYPE");
2024-04-21 21:29:23.535797+03:00 jdbc[13]: 
/**/rs22.next();
2024-04-21 21:29:23.535820+03:00 jdbc[13]: 
/**/rs22.close();
2024-04-21 21:29:23.535854+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.535882+03:00 jdbc[13]: 
/**/prep0.setString(2, "DOMAIN_CONSTRAINTS");
2024-04-21 21:29:23.535914+03:00 jdbc[13]: 
/**/ResultSet rs23 = prep0.executeQuery();
2024-04-21 21:29:23.536273+03:00 jdbc[13]: 
/*SQL l:174 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'DOMAIN_CONSTRAINTS'};
2024-04-21 21:29:23.536359+03:00 jdbc[13]: 
/**/rs23.next();
2024-04-21 21:29:23.536401+03:00 jdbc[13]: 
/**/rs23.getString("COLUMN_NAME");
2024-04-21 21:29:23.536428+03:00 jdbc[13]: 
/**/rs23.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.536449+03:00 jdbc[13]: 
/**/rs23.getString("COLUMN_TYPE");
2024-04-21 21:29:23.536475+03:00 jdbc[13]: 
/**/rs23.next();
2024-04-21 21:29:23.536494+03:00 jdbc[13]: 
/**/rs23.getString("COLUMN_NAME");
2024-04-21 21:29:23.536520+03:00 jdbc[13]: 
/**/rs23.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.536543+03:00 jdbc[13]: 
/**/rs23.getString("COLUMN_TYPE");
2024-04-21 21:29:23.536562+03:00 jdbc[13]: 
/**/rs23.next();
2024-04-21 21:29:23.536585+03:00 jdbc[13]: 
/**/rs23.getString("COLUMN_NAME");
2024-04-21 21:29:23.536610+03:00 jdbc[13]: 
/**/rs23.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.536634+03:00 jdbc[13]: 
/**/rs23.getString("COLUMN_TYPE");
2024-04-21 21:29:23.536655+03:00 jdbc[13]: 
/**/rs23.next();
2024-04-21 21:29:23.536674+03:00 jdbc[13]: 
/**/rs23.getString("COLUMN_NAME");
2024-04-21 21:29:23.536697+03:00 jdbc[13]: 
/**/rs23.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.536716+03:00 jdbc[13]: 
/**/rs23.getString("COLUMN_TYPE");
2024-04-21 21:29:23.536738+03:00 jdbc[13]: 
/**/rs23.next();
2024-04-21 21:29:23.536757+03:00 jdbc[13]: 
/**/rs23.getString("COLUMN_NAME");
2024-04-21 21:29:23.536780+03:00 jdbc[13]: 
/**/rs23.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.536802+03:00 jdbc[13]: 
/**/rs23.getString("COLUMN_TYPE");
2024-04-21 21:29:23.536821+03:00 jdbc[13]: 
/**/rs23.next();
2024-04-21 21:29:23.536843+03:00 jdbc[13]: 
/**/rs23.getString("COLUMN_NAME");
2024-04-21 21:29:23.536866+03:00 jdbc[13]: 
/**/rs23.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.536889+03:00 jdbc[13]: 
/**/rs23.getString("COLUMN_TYPE");
2024-04-21 21:29:23.536911+03:00 jdbc[13]: 
/**/rs23.next();
2024-04-21 21:29:23.536929+03:00 jdbc[13]: 
/**/rs23.getString("COLUMN_NAME");
2024-04-21 21:29:23.536952+03:00 jdbc[13]: 
/**/rs23.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.536970+03:00 jdbc[13]: 
/**/rs23.getString("COLUMN_TYPE");
2024-04-21 21:29:23.536993+03:00 jdbc[13]: 
/**/rs23.next();
2024-04-21 21:29:23.537011+03:00 jdbc[13]: 
/**/rs23.getString("COLUMN_NAME");
2024-04-21 21:29:23.537034+03:00 jdbc[13]: 
/**/rs23.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.537057+03:00 jdbc[13]: 
/**/rs23.getString("COLUMN_TYPE");
2024-04-21 21:29:23.537074+03:00 jdbc[13]: 
/**/rs23.next();
2024-04-21 21:29:23.537097+03:00 jdbc[13]: 
/**/rs23.getString("COLUMN_NAME");
2024-04-21 21:29:23.537116+03:00 jdbc[13]: 
/**/rs23.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.537139+03:00 jdbc[13]: 
/**/rs23.getString("COLUMN_TYPE");
2024-04-21 21:29:23.537160+03:00 jdbc[13]: 
/**/rs23.next();
2024-04-21 21:29:23.537190+03:00 jdbc[13]: 
/**/rs23.close();
2024-04-21 21:29:23.537222+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.537247+03:00 jdbc[13]: 
/**/prep0.setString(2, "ELEMENT_TYPES");
2024-04-21 21:29:23.537276+03:00 jdbc[13]: 
/**/ResultSet rs24 = prep0.executeQuery();
2024-04-21 21:29:23.537807+03:00 jdbc[13]: 
/*SQL l:174 #:27*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'ELEMENT_TYPES'};
2024-04-21 21:29:23.537881+03:00 jdbc[13]: 
/**/rs24.next();
2024-04-21 21:29:23.537905+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2024-04-21 21:29:23.537934+03:00 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.537955+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2024-04-21 21:29:23.537978+03:00 jdbc[13]: 
/**/rs24.next();
2024-04-21 21:29:23.538000+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2024-04-21 21:29:23.538021+03:00 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.538044+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2024-04-21 21:29:23.538062+03:00 jdbc[13]: 
/**/rs24.next();
2024-04-21 21:29:23.538084+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2024-04-21 21:29:23.538106+03:00 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.538125+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2024-04-21 21:29:23.538160+03:00 jdbc[13]: 
/**/rs24.next();
2024-04-21 21:29:23.538180+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2024-04-21 21:29:23.538206+03:00 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.538228+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2024-04-21 21:29:23.538247+03:00 jdbc[13]: 
/**/rs24.next();
2024-04-21 21:29:23.538269+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2024-04-21 21:29:23.538288+03:00 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.538310+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2024-04-21 21:29:23.538328+03:00 jdbc[13]: 
/**/rs24.next();
2024-04-21 21:29:23.538351+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2024-04-21 21:29:23.538372+03:00 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.538391+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2024-04-21 21:29:23.538413+03:00 jdbc[13]: 
/**/rs24.next();
2024-04-21 21:29:23.538431+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2024-04-21 21:29:23.538454+03:00 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.538475+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2024-04-21 21:29:23.538493+03:00 jdbc[13]: 
/**/rs24.next();
2024-04-21 21:29:23.538514+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2024-04-21 21:29:23.538534+03:00 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.538557+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2024-04-21 21:29:23.538574+03:00 jdbc[13]: 
/**/rs24.next();
2024-04-21 21:29:23.538597+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2024-04-21 21:29:23.538618+03:00 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.538637+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2024-04-21 21:29:23.538658+03:00 jdbc[13]: 
/**/rs24.next();
2024-04-21 21:29:23.538677+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2024-04-21 21:29:23.538700+03:00 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.538722+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2024-04-21 21:29:23.538740+03:00 jdbc[13]: 
/**/rs24.next();
2024-04-21 21:29:23.538763+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2024-04-21 21:29:23.538782+03:00 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.538804+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2024-04-21 21:29:23.538822+03:00 jdbc[13]: 
/**/rs24.next();
2024-04-21 21:29:23.538844+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2024-04-21 21:29:23.538866+03:00 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.538890+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2024-04-21 21:29:23.538912+03:00 jdbc[13]: 
/**/rs24.next();
2024-04-21 21:29:23.538931+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2024-04-21 21:29:23.538955+03:00 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.538976+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2024-04-21 21:29:23.538994+03:00 jdbc[13]: 
/**/rs24.next();
2024-04-21 21:29:23.539017+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2024-04-21 21:29:23.539035+03:00 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.539058+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2024-04-21 21:29:23.539075+03:00 jdbc[13]: 
/**/rs24.next();
2024-04-21 21:29:23.539098+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2024-04-21 21:29:23.539120+03:00 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.539140+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2024-04-21 21:29:23.539162+03:00 jdbc[13]: 
/**/rs24.next();
2024-04-21 21:29:23.539180+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2024-04-21 21:29:23.539203+03:00 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.539225+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2024-04-21 21:29:23.539243+03:00 jdbc[13]: 
/**/rs24.next();
2024-04-21 21:29:23.539266+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2024-04-21 21:29:23.539284+03:00 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.539306+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2024-04-21 21:29:23.539330+03:00 jdbc[13]: 
/**/rs24.next();
2024-04-21 21:29:23.539350+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2024-04-21 21:29:23.539373+03:00 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.539391+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2024-04-21 21:29:23.539412+03:00 jdbc[13]: 
/**/rs24.next();
2024-04-21 21:29:23.539431+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2024-04-21 21:29:23.539453+03:00 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.539475+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2024-04-21 21:29:23.539493+03:00 jdbc[13]: 
/**/rs24.next();
2024-04-21 21:29:23.539515+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2024-04-21 21:29:23.539534+03:00 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.539557+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2024-04-21 21:29:23.539577+03:00 jdbc[13]: 
/**/rs24.next();
2024-04-21 21:29:23.539596+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2024-04-21 21:29:23.540138+03:00 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.540174+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2024-04-21 21:29:23.540203+03:00 jdbc[13]: 
/**/rs24.next();
2024-04-21 21:29:23.540235+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2024-04-21 21:29:23.540261+03:00 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.540284+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2024-04-21 21:29:23.540303+03:00 jdbc[13]: 
/**/rs24.next();
2024-04-21 21:29:23.540326+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2024-04-21 21:29:23.540345+03:00 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.540369+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2024-04-21 21:29:23.540391+03:00 jdbc[13]: 
/**/rs24.next();
2024-04-21 21:29:23.540410+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2024-04-21 21:29:23.540433+03:00 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.540452+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2024-04-21 21:29:23.540475+03:00 jdbc[13]: 
/**/rs24.next();
2024-04-21 21:29:23.540492+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2024-04-21 21:29:23.540515+03:00 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.540537+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2024-04-21 21:29:23.540555+03:00 jdbc[13]: 
/**/rs24.next();
2024-04-21 21:29:23.540577+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2024-04-21 21:29:23.540595+03:00 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.540617+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2024-04-21 21:29:23.540638+03:00 jdbc[13]: 
/**/rs24.next();
2024-04-21 21:29:23.540657+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_NAME");
2024-04-21 21:29:23.540679+03:00 jdbc[13]: 
/**/rs24.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.540697+03:00 jdbc[13]: 
/**/rs24.getString("COLUMN_TYPE");
2024-04-21 21:29:23.540719+03:00 jdbc[13]: 
/**/rs24.next();
2024-04-21 21:29:23.540737+03:00 jdbc[13]: 
/**/rs24.close();
2024-04-21 21:29:23.540768+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.540799+03:00 jdbc[13]: 
/**/prep0.setString(2, "FIELDS");
2024-04-21 21:29:23.540826+03:00 jdbc[13]: 
/**/ResultSet rs25 = prep0.executeQuery();
2024-04-21 21:29:23.544305+03:00 jdbc[13]: 
/*SQL l:174 #:29 t:3*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'FIELDS'};
2024-04-21 21:29:23.544440+03:00 jdbc[13]: 
/**/rs25.next();
2024-04-21 21:29:23.544473+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2024-04-21 21:29:23.544514+03:00 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.544538+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2024-04-21 21:29:23.544558+03:00 jdbc[13]: 
/**/rs25.next();
2024-04-21 21:29:23.544579+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2024-04-21 21:29:23.544602+03:00 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.544625+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2024-04-21 21:29:23.544643+03:00 jdbc[13]: 
/**/rs25.next();
2024-04-21 21:29:23.544665+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2024-04-21 21:29:23.544686+03:00 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.544705+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2024-04-21 21:29:23.544727+03:00 jdbc[13]: 
/**/rs25.next();
2024-04-21 21:29:23.544745+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2024-04-21 21:29:23.544767+03:00 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.544799+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2024-04-21 21:29:23.544820+03:00 jdbc[13]: 
/**/rs25.next();
2024-04-21 21:29:23.544843+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2024-04-21 21:29:23.544862+03:00 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.544885+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2024-04-21 21:29:23.544903+03:00 jdbc[13]: 
/**/rs25.next();
2024-04-21 21:29:23.544928+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2024-04-21 21:29:23.544951+03:00 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.544972+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2024-04-21 21:29:23.544994+03:00 jdbc[13]: 
/**/rs25.next();
2024-04-21 21:29:23.545012+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2024-04-21 21:29:23.545035+03:00 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.545056+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2024-04-21 21:29:23.547418+03:00 jdbc[13]: 
/**/rs25.next();
2024-04-21 21:29:23.547487+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2024-04-21 21:29:23.547515+03:00 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.547544+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2024-04-21 21:29:23.547565+03:00 jdbc[13]: 
/**/rs25.next();
2024-04-21 21:29:23.547589+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2024-04-21 21:29:23.547613+03:00 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.547634+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2024-04-21 21:29:23.547657+03:00 jdbc[13]: 
/**/rs25.next();
2024-04-21 21:29:23.547676+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2024-04-21 21:29:23.547700+03:00 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.547725+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2024-04-21 21:29:23.547745+03:00 jdbc[13]: 
/**/rs25.next();
2024-04-21 21:29:23.547768+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2024-04-21 21:29:23.547788+03:00 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.547811+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2024-04-21 21:29:23.547834+03:00 jdbc[13]: 
/**/rs25.next();
2024-04-21 21:29:23.547853+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2024-04-21 21:29:23.547875+03:00 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.547909+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2024-04-21 21:29:23.547930+03:00 jdbc[13]: 
/**/rs25.next();
2024-04-21 21:29:23.547948+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2024-04-21 21:29:23.547970+03:00 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.547992+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2024-04-21 21:29:23.548010+03:00 jdbc[13]: 
/**/rs25.next();
2024-04-21 21:29:23.548032+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2024-04-21 21:29:23.548051+03:00 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.548073+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2024-04-21 21:29:23.548094+03:00 jdbc[13]: 
/**/rs25.next();
2024-04-21 21:29:23.548113+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2024-04-21 21:29:23.548135+03:00 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.548153+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2024-04-21 21:29:23.548175+03:00 jdbc[13]: 
/**/rs25.next();
2024-04-21 21:29:23.548195+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2024-04-21 21:29:23.548217+03:00 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.548239+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2024-04-21 21:29:23.548257+03:00 jdbc[13]: 
/**/rs25.next();
2024-04-21 21:29:23.548280+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2024-04-21 21:29:23.548298+03:00 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.548320+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2024-04-21 21:29:23.548341+03:00 jdbc[13]: 
/**/rs25.next();
2024-04-21 21:29:23.548360+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2024-04-21 21:29:23.548383+03:00 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.548402+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2024-04-21 21:29:23.548423+03:00 jdbc[13]: 
/**/rs25.next();
2024-04-21 21:29:23.548441+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2024-04-21 21:29:23.548463+03:00 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.548485+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2024-04-21 21:29:23.548502+03:00 jdbc[13]: 
/**/rs25.next();
2024-04-21 21:29:23.548524+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2024-04-21 21:29:23.548543+03:00 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.548565+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2024-04-21 21:29:23.548587+03:00 jdbc[13]: 
/**/rs25.next();
2024-04-21 21:29:23.548606+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2024-04-21 21:29:23.548628+03:00 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.548646+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2024-04-21 21:29:23.548668+03:00 jdbc[13]: 
/**/rs25.next();
2024-04-21 21:29:23.548686+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2024-04-21 21:29:23.548708+03:00 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.548730+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2024-04-21 21:29:23.548748+03:00 jdbc[13]: 
/**/rs25.next();
2024-04-21 21:29:23.548771+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2024-04-21 21:29:23.548789+03:00 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.548811+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2024-04-21 21:29:23.548832+03:00 jdbc[13]: 
/**/rs25.next();
2024-04-21 21:29:23.548850+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2024-04-21 21:29:23.548873+03:00 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.548891+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2024-04-21 21:29:23.548971+03:00 jdbc[13]: 
/**/rs25.next();
2024-04-21 21:29:23.549001+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2024-04-21 21:29:23.549023+03:00 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.549047+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2024-04-21 21:29:23.549066+03:00 jdbc[13]: 
/**/rs25.next();
2024-04-21 21:29:23.549089+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2024-04-21 21:29:23.549108+03:00 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.549131+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2024-04-21 21:29:23.549153+03:00 jdbc[13]: 
/**/rs25.next();
2024-04-21 21:29:23.549171+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2024-04-21 21:29:23.549194+03:00 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.549213+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2024-04-21 21:29:23.549235+03:00 jdbc[13]: 
/**/rs25.next();
2024-04-21 21:29:23.550093+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2024-04-21 21:29:23.550146+03:00 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.550189+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2024-04-21 21:29:23.550229+03:00 jdbc[13]: 
/**/rs25.next();
2024-04-21 21:29:23.550273+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_NAME");
2024-04-21 21:29:23.550307+03:00 jdbc[13]: 
/**/rs25.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.550341+03:00 jdbc[13]: 
/**/rs25.getString("COLUMN_TYPE");
2024-04-21 21:29:23.550366+03:00 jdbc[13]: 
/**/rs25.next();
2024-04-21 21:29:23.550388+03:00 jdbc[13]: 
/**/rs25.close();
2024-04-21 21:29:23.550429+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.550468+03:00 jdbc[13]: 
/**/prep0.setString(2, "KEY_COLUMN_USAGE");
2024-04-21 21:29:23.550504+03:00 jdbc[13]: 
/**/ResultSet rs26 = prep0.executeQuery();
2024-04-21 21:29:23.551291+03:00 jdbc[13]: 
/*SQL l:174 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'KEY_COLUMN_USAGE'};
2024-04-21 21:29:23.551412+03:00 jdbc[13]: 
/**/rs26.next();
2024-04-21 21:29:23.551442+03:00 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2024-04-21 21:29:23.551470+03:00 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.551498+03:00 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2024-04-21 21:29:23.551521+03:00 jdbc[13]: 
/**/rs26.next();
2024-04-21 21:29:23.551548+03:00 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2024-04-21 21:29:23.551571+03:00 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.551598+03:00 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2024-04-21 21:29:23.551618+03:00 jdbc[13]: 
/**/rs26.next();
2024-04-21 21:29:23.551641+03:00 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2024-04-21 21:29:23.551666+03:00 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.551688+03:00 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2024-04-21 21:29:23.551711+03:00 jdbc[13]: 
/**/rs26.next();
2024-04-21 21:29:23.551732+03:00 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2024-04-21 21:29:23.551761+03:00 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.551786+03:00 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2024-04-21 21:29:23.551806+03:00 jdbc[13]: 
/**/rs26.next();
2024-04-21 21:29:23.551829+03:00 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2024-04-21 21:29:23.551850+03:00 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.551878+03:00 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2024-04-21 21:29:23.551898+03:00 jdbc[13]: 
/**/rs26.next();
2024-04-21 21:29:23.551922+03:00 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2024-04-21 21:29:23.551945+03:00 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.551966+03:00 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2024-04-21 21:29:23.551990+03:00 jdbc[13]: 
/**/rs26.next();
2024-04-21 21:29:23.552012+03:00 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2024-04-21 21:29:23.552039+03:00 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.552063+03:00 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2024-04-21 21:29:23.552085+03:00 jdbc[13]: 
/**/rs26.next();
2024-04-21 21:29:23.552110+03:00 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2024-04-21 21:29:23.552131+03:00 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.552158+03:00 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2024-04-21 21:29:23.552177+03:00 jdbc[13]: 
/**/rs26.next();
2024-04-21 21:29:23.552203+03:00 jdbc[13]: 
/**/rs26.getString("COLUMN_NAME");
2024-04-21 21:29:23.552229+03:00 jdbc[13]: 
/**/rs26.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.552251+03:00 jdbc[13]: 
/**/rs26.getString("COLUMN_TYPE");
2024-04-21 21:29:23.552275+03:00 jdbc[13]: 
/**/rs26.next();
2024-04-21 21:29:23.552296+03:00 jdbc[13]: 
/**/rs26.close();
2024-04-21 21:29:23.552336+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.552388+03:00 jdbc[13]: 
/**/prep0.setString(2, "PARAMETERS");
2024-04-21 21:29:23.552418+03:00 jdbc[13]: 
/**/ResultSet rs27 = prep0.executeQuery();
2024-04-21 21:29:23.552893+03:00 jdbc[13]: 
/*SQL l:174 #:31*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'PARAMETERS'};
2024-04-21 21:29:23.552982+03:00 jdbc[13]: 
/**/rs27.next();
2024-04-21 21:29:23.553012+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2024-04-21 21:29:23.553035+03:00 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.553062+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2024-04-21 21:29:23.553082+03:00 jdbc[13]: 
/**/rs27.next();
2024-04-21 21:29:23.553109+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2024-04-21 21:29:23.553133+03:00 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.553155+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2024-04-21 21:29:23.553180+03:00 jdbc[13]: 
/**/rs27.next();
2024-04-21 21:29:23.553201+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2024-04-21 21:29:23.553227+03:00 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.553253+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2024-04-21 21:29:23.553272+03:00 jdbc[13]: 
/**/rs27.next();
2024-04-21 21:29:23.553300+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2024-04-21 21:29:23.553324+03:00 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.553350+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2024-04-21 21:29:23.553372+03:00 jdbc[13]: 
/**/rs27.next();
2024-04-21 21:29:23.553398+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2024-04-21 21:29:23.553421+03:00 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.553442+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2024-04-21 21:29:23.553464+03:00 jdbc[13]: 
/**/rs27.next();
2024-04-21 21:29:23.553483+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2024-04-21 21:29:23.553520+03:00 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.553545+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2024-04-21 21:29:23.553566+03:00 jdbc[13]: 
/**/rs27.next();
2024-04-21 21:29:23.553590+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2024-04-21 21:29:23.553610+03:00 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.553636+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2024-04-21 21:29:23.553660+03:00 jdbc[13]: 
/**/rs27.next();
2024-04-21 21:29:23.553683+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2024-04-21 21:29:23.553709+03:00 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.553730+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2024-04-21 21:29:23.553755+03:00 jdbc[13]: 
/**/rs27.next();
2024-04-21 21:29:23.553773+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2024-04-21 21:29:23.553798+03:00 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.553821+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2024-04-21 21:29:23.553839+03:00 jdbc[13]: 
/**/rs27.next();
2024-04-21 21:29:23.553862+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2024-04-21 21:29:23.553880+03:00 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.553905+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2024-04-21 21:29:23.553926+03:00 jdbc[13]: 
/**/rs27.next();
2024-04-21 21:29:23.553945+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2024-04-21 21:29:23.553968+03:00 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.553987+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2024-04-21 21:29:23.554009+03:00 jdbc[13]: 
/**/rs27.next();
2024-04-21 21:29:23.554027+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2024-04-21 21:29:23.554050+03:00 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.554074+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2024-04-21 21:29:23.554091+03:00 jdbc[13]: 
/**/rs27.next();
2024-04-21 21:29:23.554113+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2024-04-21 21:29:23.554131+03:00 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.554153+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2024-04-21 21:29:23.554174+03:00 jdbc[13]: 
/**/rs27.next();
2024-04-21 21:29:23.554192+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2024-04-21 21:29:23.554215+03:00 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.554235+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2024-04-21 21:29:23.554257+03:00 jdbc[13]: 
/**/rs27.next();
2024-04-21 21:29:23.554275+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2024-04-21 21:29:23.554297+03:00 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.554319+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2024-04-21 21:29:23.554336+03:00 jdbc[13]: 
/**/rs27.next();
2024-04-21 21:29:23.554358+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2024-04-21 21:29:23.554376+03:00 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.554398+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2024-04-21 21:29:23.554420+03:00 jdbc[13]: 
/**/rs27.next();
2024-04-21 21:29:23.554438+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2024-04-21 21:29:23.554461+03:00 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.554480+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2024-04-21 21:29:23.554504+03:00 jdbc[13]: 
/**/rs27.next();
2024-04-21 21:29:23.554527+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2024-04-21 21:29:23.554548+03:00 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.554573+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2024-04-21 21:29:23.554593+03:00 jdbc[13]: 
/**/rs27.next();
2024-04-21 21:29:23.554617+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2024-04-21 21:29:23.554637+03:00 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.554661+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2024-04-21 21:29:23.554684+03:00 jdbc[13]: 
/**/rs27.next();
2024-04-21 21:29:23.554704+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2024-04-21 21:29:23.554729+03:00 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.554749+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2024-04-21 21:29:23.554773+03:00 jdbc[13]: 
/**/rs27.next();
2024-04-21 21:29:23.554795+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2024-04-21 21:29:23.554816+03:00 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.554840+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2024-04-21 21:29:23.554860+03:00 jdbc[13]: 
/**/rs27.next();
2024-04-21 21:29:23.554884+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2024-04-21 21:29:23.554904+03:00 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.554929+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2024-04-21 21:29:23.554952+03:00 jdbc[13]: 
/**/rs27.next();
2024-04-21 21:29:23.554972+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2024-04-21 21:29:23.554996+03:00 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.555016+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2024-04-21 21:29:23.555040+03:00 jdbc[13]: 
/**/rs27.next();
2024-04-21 21:29:23.555063+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2024-04-21 21:29:23.555084+03:00 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.555109+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2024-04-21 21:29:23.555128+03:00 jdbc[13]: 
/**/rs27.next();
2024-04-21 21:29:23.555152+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2024-04-21 21:29:23.555176+03:00 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.555197+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2024-04-21 21:29:23.555221+03:00 jdbc[13]: 
/**/rs27.next();
2024-04-21 21:29:23.555241+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2024-04-21 21:29:23.555265+03:00 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.555285+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2024-04-21 21:29:23.555308+03:00 jdbc[13]: 
/**/rs27.next();
2024-04-21 21:29:23.555332+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2024-04-21 21:29:23.555353+03:00 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.555376+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2024-04-21 21:29:23.555396+03:00 jdbc[13]: 
/**/rs27.next();
2024-04-21 21:29:23.555419+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2024-04-21 21:29:23.555444+03:00 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.555466+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2024-04-21 21:29:23.555489+03:00 jdbc[13]: 
/**/rs27.next();
2024-04-21 21:29:23.555509+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2024-04-21 21:29:23.555534+03:00 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.555554+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2024-04-21 21:29:23.555577+03:00 jdbc[13]: 
/**/rs27.next();
2024-04-21 21:29:23.555600+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2024-04-21 21:29:23.555622+03:00 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.555646+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2024-04-21 21:29:23.555665+03:00 jdbc[13]: 
/**/rs27.next();
2024-04-21 21:29:23.555689+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_NAME");
2024-04-21 21:29:23.555712+03:00 jdbc[13]: 
/**/rs27.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.555733+03:00 jdbc[13]: 
/**/rs27.getString("COLUMN_TYPE");
2024-04-21 21:29:23.555757+03:00 jdbc[13]: 
/**/rs27.next();
2024-04-21 21:29:23.555778+03:00 jdbc[13]: 
/**/rs27.close();
2024-04-21 21:29:23.555813+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.555859+03:00 jdbc[13]: 
/**/prep0.setString(2, "REFERENTIAL_CONSTRAINTS");
2024-04-21 21:29:23.555890+03:00 jdbc[13]: 
/**/ResultSet rs28 = prep0.executeQuery();
2024-04-21 21:29:23.556162+03:00 jdbc[13]: 
/*SQL l:174 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'REFERENTIAL_CONSTRAINTS'};
2024-04-21 21:29:23.556238+03:00 jdbc[13]: 
/**/rs28.next();
2024-04-21 21:29:23.556262+03:00 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2024-04-21 21:29:23.556287+03:00 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.556312+03:00 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2024-04-21 21:29:23.556332+03:00 jdbc[13]: 
/**/rs28.next();
2024-04-21 21:29:23.556357+03:00 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2024-04-21 21:29:23.556377+03:00 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.556402+03:00 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2024-04-21 21:29:23.556424+03:00 jdbc[13]: 
/**/rs28.next();
2024-04-21 21:29:23.556444+03:00 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2024-04-21 21:29:23.556469+03:00 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.556489+03:00 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2024-04-21 21:29:23.556512+03:00 jdbc[13]: 
/**/rs28.next();
2024-04-21 21:29:23.556535+03:00 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2024-04-21 21:29:23.556555+03:00 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.556580+03:00 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2024-04-21 21:29:23.556600+03:00 jdbc[13]: 
/**/rs28.next();
2024-04-21 21:29:23.556624+03:00 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2024-04-21 21:29:23.556644+03:00 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.556669+03:00 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2024-04-21 21:29:23.556692+03:00 jdbc[13]: 
/**/rs28.next();
2024-04-21 21:29:23.556711+03:00 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2024-04-21 21:29:23.556736+03:00 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.556756+03:00 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2024-04-21 21:29:23.556780+03:00 jdbc[13]: 
/**/rs28.next();
2024-04-21 21:29:23.556803+03:00 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2024-04-21 21:29:23.556824+03:00 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.556848+03:00 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2024-04-21 21:29:23.556867+03:00 jdbc[13]: 
/**/rs28.next();
2024-04-21 21:29:23.556892+03:00 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2024-04-21 21:29:23.556911+03:00 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.556942+03:00 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2024-04-21 21:29:23.556966+03:00 jdbc[13]: 
/**/rs28.next();
2024-04-21 21:29:23.556985+03:00 jdbc[13]: 
/**/rs28.getString("COLUMN_NAME");
2024-04-21 21:29:23.557009+03:00 jdbc[13]: 
/**/rs28.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.557029+03:00 jdbc[13]: 
/**/rs28.getString("COLUMN_TYPE");
2024-04-21 21:29:23.557052+03:00 jdbc[13]: 
/**/rs28.next();
2024-04-21 21:29:23.557075+03:00 jdbc[13]: 
/**/rs28.close();
2024-04-21 21:29:23.557102+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.557131+03:00 jdbc[13]: 
/**/prep0.setString(2, "ROUTINES");
2024-04-21 21:29:23.557156+03:00 jdbc[13]: 
/**/ResultSet rs29 = prep0.executeQuery();
2024-04-21 21:29:23.558300+03:00 jdbc[13]: 
/*SQL l:174 #:36 t:1*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'ROUTINES'};
2024-04-21 21:29:23.558426+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.558461+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.558486+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.558533+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.558563+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.559186+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.559237+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.559267+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.559296+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.559320+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.559606+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.559639+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.559719+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.559745+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.559768+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.559791+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.559808+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.559830+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.559853+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.559873+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.559893+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.559910+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.559934+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.559954+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.559975+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.559994+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.560012+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.560033+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.560050+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.560071+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.560092+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.560110+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.560131+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.560147+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.560169+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.560189+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.560337+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.560365+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.560383+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.560405+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.560422+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.560446+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.560467+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.560485+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.560506+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.560523+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.560544+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.560564+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.560582+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.560602+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.560620+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.560642+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.560728+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.560754+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.560775+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.560794+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.560815+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.560833+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.560863+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.560887+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.560906+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.560926+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.560945+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.560967+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.560986+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.561010+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.561035+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.561057+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.561094+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.561116+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.561142+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.561166+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.561198+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.561220+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.561240+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.561264+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.561282+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.561305+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.561327+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.561347+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.561369+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.561387+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.561410+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.561433+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.561452+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.561474+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.561493+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.561517+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.561539+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.561558+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.561581+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.561599+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.561622+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.561640+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.561664+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.561688+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.561706+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.561729+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.561748+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.561771+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.561793+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.561811+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.561834+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.561852+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.561874+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.561892+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.561914+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.561936+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.561954+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.561976+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.561995+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.562044+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.562065+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.562084+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.562107+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.562125+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.562147+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.562165+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.562188+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.562210+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.563016+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.563079+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.563106+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.563134+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.563160+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.563186+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.563212+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.563234+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.563257+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.563277+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.563303+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.563329+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.563349+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.563387+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.563407+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.563459+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.563485+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.563503+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.563528+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.563549+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.563571+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.563593+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_NAME");
2024-04-21 21:29:23.563611+03:00 jdbc[13]: 
/**/rs29.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.563633+03:00 jdbc[13]: 
/**/rs29.getString("COLUMN_TYPE");
2024-04-21 21:29:23.563650+03:00 jdbc[13]: 
/**/rs29.next();
2024-04-21 21:29:23.563675+03:00 jdbc[13]: 
/**/rs29.close();
2024-04-21 21:29:23.563710+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.563740+03:00 jdbc[13]: 
/**/prep0.setString(2, "SCHEMATA");
2024-04-21 21:29:23.563774+03:00 jdbc[13]: 
/**/ResultSet rs30 = prep0.executeQuery();
2024-04-21 21:29:23.564137+03:00 jdbc[13]: 
/*SQL l:174 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'SCHEMATA'};
2024-04-21 21:29:23.564226+03:00 jdbc[13]: 
/**/rs30.next();
2024-04-21 21:29:23.564256+03:00 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2024-04-21 21:29:23.564281+03:00 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.564301+03:00 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2024-04-21 21:29:23.564324+03:00 jdbc[13]: 
/**/rs30.next();
2024-04-21 21:29:23.564342+03:00 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2024-04-21 21:29:23.564366+03:00 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.564401+03:00 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2024-04-21 21:29:23.564422+03:00 jdbc[13]: 
/**/rs30.next();
2024-04-21 21:29:23.564445+03:00 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2024-04-21 21:29:23.564466+03:00 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.564490+03:00 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2024-04-21 21:29:23.564510+03:00 jdbc[13]: 
/**/rs30.next();
2024-04-21 21:29:23.564536+03:00 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2024-04-21 21:29:23.564562+03:00 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.564584+03:00 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2024-04-21 21:29:23.564609+03:00 jdbc[13]: 
/**/rs30.next();
2024-04-21 21:29:23.564631+03:00 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2024-04-21 21:29:23.564659+03:00 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.564683+03:00 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2024-04-21 21:29:23.564704+03:00 jdbc[13]: 
/**/rs30.next();
2024-04-21 21:29:23.564730+03:00 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2024-04-21 21:29:23.564752+03:00 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.564777+03:00 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2024-04-21 21:29:23.564796+03:00 jdbc[13]: 
/**/rs30.next();
2024-04-21 21:29:23.564951+03:00 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2024-04-21 21:29:23.564992+03:00 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.565017+03:00 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2024-04-21 21:29:23.565043+03:00 jdbc[13]: 
/**/rs30.next();
2024-04-21 21:29:23.565063+03:00 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2024-04-21 21:29:23.565087+03:00 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.565111+03:00 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2024-04-21 21:29:23.565130+03:00 jdbc[13]: 
/**/rs30.next();
2024-04-21 21:29:23.565155+03:00 jdbc[13]: 
/**/rs30.getString("COLUMN_NAME");
2024-04-21 21:29:23.565175+03:00 jdbc[13]: 
/**/rs30.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.565199+03:00 jdbc[13]: 
/**/rs30.getString("COLUMN_TYPE");
2024-04-21 21:29:23.565218+03:00 jdbc[13]: 
/**/rs30.next();
2024-04-21 21:29:23.565242+03:00 jdbc[13]: 
/**/rs30.close();
2024-04-21 21:29:23.565276+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.565304+03:00 jdbc[13]: 
/**/prep0.setString(2, "SEQUENCES");
2024-04-21 21:29:23.565345+03:00 jdbc[13]: 
/**/ResultSet rs31 = prep0.executeQuery();
2024-04-21 21:29:23.566250+03:00 jdbc[13]: 
/*SQL l:174 #:18*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'SEQUENCES'};
2024-04-21 21:29:23.566372+03:00 jdbc[13]: 
/**/rs31.next();
2024-04-21 21:29:23.566404+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2024-04-21 21:29:23.566433+03:00 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.566459+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2024-04-21 21:29:23.566479+03:00 jdbc[13]: 
/**/rs31.next();
2024-04-21 21:29:23.566503+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2024-04-21 21:29:23.566523+03:00 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.566552+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2024-04-21 21:29:23.566572+03:00 jdbc[13]: 
/**/rs31.next();
2024-04-21 21:29:23.566596+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2024-04-21 21:29:23.566620+03:00 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.566643+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2024-04-21 21:29:23.566667+03:00 jdbc[13]: 
/**/rs31.next();
2024-04-21 21:29:23.566688+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2024-04-21 21:29:23.566711+03:00 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.566734+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2024-04-21 21:29:23.566765+03:00 jdbc[13]: 
/**/rs31.next();
2024-04-21 21:29:23.566788+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2024-04-21 21:29:23.566807+03:00 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.566831+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2024-04-21 21:29:23.566850+03:00 jdbc[13]: 
/**/rs31.next();
2024-04-21 21:29:23.567224+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2024-04-21 21:29:23.567268+03:00 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.567291+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2024-04-21 21:29:23.567316+03:00 jdbc[13]: 
/**/rs31.next();
2024-04-21 21:29:23.567393+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2024-04-21 21:29:23.567439+03:00 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.567479+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2024-04-21 21:29:23.567501+03:00 jdbc[13]: 
/**/rs31.next();
2024-04-21 21:29:23.567539+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2024-04-21 21:29:23.567677+03:00 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.567714+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2024-04-21 21:29:23.567742+03:00 jdbc[13]: 
/**/rs31.next();
2024-04-21 21:29:23.567766+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2024-04-21 21:29:23.567792+03:00 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.567815+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2024-04-21 21:29:23.567841+03:00 jdbc[13]: 
/**/rs31.next();
2024-04-21 21:29:23.567862+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2024-04-21 21:29:23.567889+03:00 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.567915+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2024-04-21 21:29:23.567937+03:00 jdbc[13]: 
/**/rs31.next();
2024-04-21 21:29:23.567969+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2024-04-21 21:29:23.567994+03:00 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.568024+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2024-04-21 21:29:23.568057+03:00 jdbc[13]: 
/**/rs31.next();
2024-04-21 21:29:23.568080+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2024-04-21 21:29:23.568108+03:00 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.568130+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2024-04-21 21:29:23.568157+03:00 jdbc[13]: 
/**/rs31.next();
2024-04-21 21:29:23.568178+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2024-04-21 21:29:23.568203+03:00 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.568229+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2024-04-21 21:29:23.568250+03:00 jdbc[13]: 
/**/rs31.next();
2024-04-21 21:29:23.568277+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2024-04-21 21:29:23.568298+03:00 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.568325+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2024-04-21 21:29:23.568348+03:00 jdbc[13]: 
/**/rs31.next();
2024-04-21 21:29:23.568369+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2024-04-21 21:29:23.568393+03:00 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.568412+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2024-04-21 21:29:23.568434+03:00 jdbc[13]: 
/**/rs31.next();
2024-04-21 21:29:23.568452+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2024-04-21 21:29:23.568478+03:00 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.568501+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2024-04-21 21:29:23.568521+03:00 jdbc[13]: 
/**/rs31.next();
2024-04-21 21:29:23.568543+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2024-04-21 21:29:23.568562+03:00 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.568585+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2024-04-21 21:29:23.568607+03:00 jdbc[13]: 
/**/rs31.next();
2024-04-21 21:29:23.568626+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_NAME");
2024-04-21 21:29:23.568649+03:00 jdbc[13]: 
/**/rs31.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.568669+03:00 jdbc[13]: 
/**/rs31.getString("COLUMN_TYPE");
2024-04-21 21:29:23.568694+03:00 jdbc[13]: 
/**/rs31.next();
2024-04-21 21:29:23.568714+03:00 jdbc[13]: 
/**/rs31.close();
2024-04-21 21:29:23.568749+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.568782+03:00 jdbc[13]: 
/**/prep0.setString(2, "TABLES");
2024-04-21 21:29:23.568811+03:00 jdbc[13]: 
/**/ResultSet rs32 = prep0.executeQuery();
2024-04-21 21:29:23.569112+03:00 jdbc[13]: 
/*SQL l:174 #:11*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'TABLES'};
2024-04-21 21:29:23.569193+03:00 jdbc[13]: 
/**/rs32.next();
2024-04-21 21:29:23.569218+03:00 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2024-04-21 21:29:23.569244+03:00 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.569264+03:00 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2024-04-21 21:29:23.569289+03:00 jdbc[13]: 
/**/rs32.next();
2024-04-21 21:29:23.569308+03:00 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2024-04-21 21:29:23.569329+03:00 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.569350+03:00 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2024-04-21 21:29:23.569369+03:00 jdbc[13]: 
/**/rs32.next();
2024-04-21 21:29:23.569391+03:00 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2024-04-21 21:29:23.569411+03:00 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.569435+03:00 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2024-04-21 21:29:23.569458+03:00 jdbc[13]: 
/**/rs32.next();
2024-04-21 21:29:23.569480+03:00 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2024-04-21 21:29:23.569506+03:00 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.569527+03:00 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2024-04-21 21:29:23.569553+03:00 jdbc[13]: 
/**/rs32.next();
2024-04-21 21:29:23.569581+03:00 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2024-04-21 21:29:23.569608+03:00 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.569633+03:00 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2024-04-21 21:29:23.569653+03:00 jdbc[13]: 
/**/rs32.next();
2024-04-21 21:29:23.569678+03:00 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2024-04-21 21:29:23.569699+03:00 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.569725+03:00 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2024-04-21 21:29:23.569749+03:00 jdbc[13]: 
/**/rs32.next();
2024-04-21 21:29:23.569771+03:00 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2024-04-21 21:29:23.569797+03:00 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.569819+03:00 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2024-04-21 21:29:23.569844+03:00 jdbc[13]: 
/**/rs32.next();
2024-04-21 21:29:23.569864+03:00 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2024-04-21 21:29:23.569890+03:00 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.569918+03:00 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2024-04-21 21:29:23.569939+03:00 jdbc[13]: 
/**/rs32.next();
2024-04-21 21:29:23.569966+03:00 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2024-04-21 21:29:23.569987+03:00 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.570041+03:00 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2024-04-21 21:29:23.570068+03:00 jdbc[13]: 
/**/rs32.next();
2024-04-21 21:29:23.570090+03:00 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2024-04-21 21:29:23.570117+03:00 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.570139+03:00 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2024-04-21 21:29:23.570165+03:00 jdbc[13]: 
/**/rs32.next();
2024-04-21 21:29:23.570185+03:00 jdbc[13]: 
/**/rs32.getString("COLUMN_NAME");
2024-04-21 21:29:23.570211+03:00 jdbc[13]: 
/**/rs32.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.570237+03:00 jdbc[13]: 
/**/rs32.getString("COLUMN_TYPE");
2024-04-21 21:29:23.570259+03:00 jdbc[13]: 
/**/rs32.next();
2024-04-21 21:29:23.570284+03:00 jdbc[13]: 
/**/rs32.close();
2024-04-21 21:29:23.570315+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.570349+03:00 jdbc[13]: 
/**/prep0.setString(2, "TABLE_CONSTRAINTS");
2024-04-21 21:29:23.570384+03:00 jdbc[13]: 
/**/ResultSet rs33 = prep0.executeQuery();
2024-04-21 21:29:23.570730+03:00 jdbc[13]: 
/*SQL l:174 #:15*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'TABLE_CONSTRAINTS'};
2024-04-21 21:29:23.570814+03:00 jdbc[13]: 
/**/rs33.next();
2024-04-21 21:29:23.570844+03:00 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2024-04-21 21:29:23.570866+03:00 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.570891+03:00 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2024-04-21 21:29:23.570914+03:00 jdbc[13]: 
/**/rs33.next();
2024-04-21 21:29:23.570933+03:00 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2024-04-21 21:29:23.570956+03:00 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.570975+03:00 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2024-04-21 21:29:23.571044+03:00 jdbc[13]: 
/**/rs33.next();
2024-04-21 21:29:23.571102+03:00 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2024-04-21 21:29:23.571132+03:00 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.571159+03:00 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2024-04-21 21:29:23.571179+03:00 jdbc[13]: 
/**/rs33.next();
2024-04-21 21:29:23.571202+03:00 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2024-04-21 21:29:23.571224+03:00 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.571244+03:00 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2024-04-21 21:29:23.571266+03:00 jdbc[13]: 
/**/rs33.next();
2024-04-21 21:29:23.571286+03:00 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2024-04-21 21:29:23.571312+03:00 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.571331+03:00 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2024-04-21 21:29:23.571355+03:00 jdbc[13]: 
/**/rs33.next();
2024-04-21 21:29:23.571376+03:00 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2024-04-21 21:29:23.571396+03:00 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.571418+03:00 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2024-04-21 21:29:23.571437+03:00 jdbc[13]: 
/**/rs33.next();
2024-04-21 21:29:23.571460+03:00 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2024-04-21 21:29:23.571485+03:00 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.571506+03:00 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2024-04-21 21:29:23.571530+03:00 jdbc[13]: 
/**/rs33.next();
2024-04-21 21:29:23.571550+03:00 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2024-04-21 21:29:23.571577+03:00 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.571598+03:00 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2024-04-21 21:29:23.571623+03:00 jdbc[13]: 
/**/rs33.next();
2024-04-21 21:29:23.571670+03:00 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2024-04-21 21:29:23.571695+03:00 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.571719+03:00 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2024-04-21 21:29:23.571737+03:00 jdbc[13]: 
/**/rs33.next();
2024-04-21 21:29:23.571771+03:00 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2024-04-21 21:29:23.571814+03:00 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.571850+03:00 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2024-04-21 21:29:23.571890+03:00 jdbc[13]: 
/**/rs33.next();
2024-04-21 21:29:23.571910+03:00 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2024-04-21 21:29:23.571935+03:00 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.571958+03:00 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2024-04-21 21:29:23.571979+03:00 jdbc[13]: 
/**/rs33.next();
2024-04-21 21:29:23.572002+03:00 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2024-04-21 21:29:23.572023+03:00 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.572050+03:00 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2024-04-21 21:29:23.572070+03:00 jdbc[13]: 
/**/rs33.next();
2024-04-21 21:29:23.572096+03:00 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2024-04-21 21:29:23.572119+03:00 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.572152+03:00 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2024-04-21 21:29:23.572180+03:00 jdbc[13]: 
/**/rs33.next();
2024-04-21 21:29:23.572202+03:00 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2024-04-21 21:29:23.572231+03:00 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.572256+03:00 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2024-04-21 21:29:23.572276+03:00 jdbc[13]: 
/**/rs33.next();
2024-04-21 21:29:23.572300+03:00 jdbc[13]: 
/**/rs33.getString("COLUMN_NAME");
2024-04-21 21:29:23.572322+03:00 jdbc[13]: 
/**/rs33.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.572349+03:00 jdbc[13]: 
/**/rs33.getString("COLUMN_TYPE");
2024-04-21 21:29:23.572369+03:00 jdbc[13]: 
/**/rs33.next();
2024-04-21 21:29:23.572392+03:00 jdbc[13]: 
/**/rs33.close();
2024-04-21 21:29:23.572423+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.572452+03:00 jdbc[13]: 
/**/prep0.setString(2, "TABLE_PRIVILEGES");
2024-04-21 21:29:23.572487+03:00 jdbc[13]: 
/**/ResultSet rs34 = prep0.executeQuery();
2024-04-21 21:29:23.572734+03:00 jdbc[13]: 
/*SQL l:174 #:8*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'TABLE_PRIVILEGES'};
2024-04-21 21:29:23.572806+03:00 jdbc[13]: 
/**/rs34.next();
2024-04-21 21:29:23.572831+03:00 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2024-04-21 21:29:23.572855+03:00 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.572873+03:00 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2024-04-21 21:29:23.572896+03:00 jdbc[13]: 
/**/rs34.next();
2024-04-21 21:29:23.572913+03:00 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2024-04-21 21:29:23.572936+03:00 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.572953+03:00 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2024-04-21 21:29:23.572975+03:00 jdbc[13]: 
/**/rs34.next();
2024-04-21 21:29:23.572995+03:00 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2024-04-21 21:29:23.573013+03:00 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.573036+03:00 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2024-04-21 21:29:23.573053+03:00 jdbc[13]: 
/**/rs34.next();
2024-04-21 21:29:23.573075+03:00 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2024-04-21 21:29:23.573096+03:00 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.573114+03:00 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2024-04-21 21:29:23.573135+03:00 jdbc[13]: 
/**/rs34.next();
2024-04-21 21:29:23.573152+03:00 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2024-04-21 21:29:23.573174+03:00 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.573192+03:00 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2024-04-21 21:29:23.573214+03:00 jdbc[13]: 
/**/rs34.next();
2024-04-21 21:29:23.573235+03:00 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2024-04-21 21:29:23.573254+03:00 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.573278+03:00 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2024-04-21 21:29:23.573295+03:00 jdbc[13]: 
/**/rs34.next();
2024-04-21 21:29:23.573317+03:00 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2024-04-21 21:29:23.573339+03:00 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.573358+03:00 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2024-04-21 21:29:23.573381+03:00 jdbc[13]: 
/**/rs34.next();
2024-04-21 21:29:23.573399+03:00 jdbc[13]: 
/**/rs34.getString("COLUMN_NAME");
2024-04-21 21:29:23.573428+03:00 jdbc[13]: 
/**/rs34.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.573446+03:00 jdbc[13]: 
/**/rs34.getString("COLUMN_TYPE");
2024-04-21 21:29:23.573467+03:00 jdbc[13]: 
/**/rs34.next();
2024-04-21 21:29:23.573488+03:00 jdbc[13]: 
/**/rs34.close();
2024-04-21 21:29:23.573516+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.573544+03:00 jdbc[13]: 
/**/prep0.setString(2, "TRIGGERS");
2024-04-21 21:29:23.573568+03:00 jdbc[13]: 
/**/ResultSet rs35 = prep0.executeQuery();
2024-04-21 21:29:23.573838+03:00 jdbc[13]: 
/*SQL l:174 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'TRIGGERS'};
2024-04-21 21:29:23.573927+03:00 jdbc[13]: 
/**/rs35.next();
2024-04-21 21:29:23.573952+03:00 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2024-04-21 21:29:23.573977+03:00 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.573998+03:00 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2024-04-21 21:29:23.574023+03:00 jdbc[13]: 
/**/rs35.next();
2024-04-21 21:29:23.574043+03:00 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2024-04-21 21:29:23.574068+03:00 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.574090+03:00 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2024-04-21 21:29:23.574112+03:00 jdbc[13]: 
/**/rs35.next();
2024-04-21 21:29:23.574135+03:00 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2024-04-21 21:29:23.574153+03:00 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.574179+03:00 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2024-04-21 21:29:23.574409+03:00 jdbc[13]: 
/**/rs35.next();
2024-04-21 21:29:23.574436+03:00 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2024-04-21 21:29:23.574460+03:00 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.574479+03:00 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2024-04-21 21:29:23.574502+03:00 jdbc[13]: 
/**/rs35.next();
2024-04-21 21:29:23.574520+03:00 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2024-04-21 21:29:23.574749+03:00 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.574778+03:00 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2024-04-21 21:29:23.574800+03:00 jdbc[13]: 
/**/rs35.next();
2024-04-21 21:29:23.574876+03:00 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2024-04-21 21:29:23.574901+03:00 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.574926+03:00 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2024-04-21 21:29:23.574948+03:00 jdbc[13]: 
/**/rs35.next();
2024-04-21 21:29:23.574966+03:00 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2024-04-21 21:29:23.574994+03:00 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.575018+03:00 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2024-04-21 21:29:23.575043+03:00 jdbc[13]: 
/**/rs35.next();
2024-04-21 21:29:23.575064+03:00 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2024-04-21 21:29:23.575196+03:00 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.575218+03:00 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2024-04-21 21:29:23.575237+03:00 jdbc[13]: 
/**/rs35.next();
2024-04-21 21:29:23.575260+03:00 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2024-04-21 21:29:23.575280+03:00 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.575375+03:00 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2024-04-21 21:29:23.575406+03:00 jdbc[13]: 
/**/rs35.next();
2024-04-21 21:29:23.575426+03:00 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2024-04-21 21:29:23.575451+03:00 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.575471+03:00 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2024-04-21 21:29:23.575495+03:00 jdbc[13]: 
/**/rs35.next();
2024-04-21 21:29:23.575519+03:00 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2024-04-21 21:29:23.575539+03:00 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.575576+03:00 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2024-04-21 21:29:23.575605+03:00 jdbc[13]: 
/**/rs35.next();
2024-04-21 21:29:23.575634+03:00 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2024-04-21 21:29:23.575657+03:00 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.575680+03:00 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2024-04-21 21:29:23.575705+03:00 jdbc[13]: 
/**/rs35.next();
2024-04-21 21:29:23.575725+03:00 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2024-04-21 21:29:23.575749+03:00 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.575769+03:00 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2024-04-21 21:29:23.575792+03:00 jdbc[13]: 
/**/rs35.next();
2024-04-21 21:29:23.575816+03:00 jdbc[13]: 
/**/rs35.getString("COLUMN_NAME");
2024-04-21 21:29:23.575837+03:00 jdbc[13]: 
/**/rs35.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.575860+03:00 jdbc[13]: 
/**/rs35.getString("COLUMN_TYPE");
2024-04-21 21:29:23.575879+03:00 jdbc[13]: 
/**/rs35.next();
2024-04-21 21:29:23.575905+03:00 jdbc[13]: 
/**/rs35.close();
2024-04-21 21:29:23.575952+03:00 jdbc[13]: 
/**/prep0.setString(1, "INFORMATION_SCHEMA");
2024-04-21 21:29:23.575989+03:00 jdbc[13]: 
/**/prep0.setString(2, "VIEWS");
2024-04-21 21:29:23.576025+03:00 jdbc[13]: 
/**/ResultSet rs36 = prep0.executeQuery();
2024-04-21 21:29:23.576333+03:00 jdbc[13]: 
/*SQL l:174 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'VIEWS'};
2024-04-21 21:29:23.576435+03:00 jdbc[13]: 
/**/rs36.next();
2024-04-21 21:29:23.576468+03:00 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2024-04-21 21:29:23.576491+03:00 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.576517+03:00 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2024-04-21 21:29:23.576543+03:00 jdbc[13]: 
/**/rs36.next();
2024-04-21 21:29:23.576564+03:00 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2024-04-21 21:29:23.576589+03:00 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.576610+03:00 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2024-04-21 21:29:23.576631+03:00 jdbc[13]: 
/**/rs36.next();
2024-04-21 21:29:23.576655+03:00 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2024-04-21 21:29:23.576677+03:00 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.576702+03:00 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2024-04-21 21:29:23.576734+03:00 jdbc[13]: 
/**/rs36.next();
2024-04-21 21:29:23.576757+03:00 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2024-04-21 21:29:23.576780+03:00 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.576801+03:00 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2024-04-21 21:29:23.576824+03:00 jdbc[13]: 
/**/rs36.next();
2024-04-21 21:29:23.576843+03:00 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2024-04-21 21:29:23.576868+03:00 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.576887+03:00 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2024-04-21 21:29:23.576910+03:00 jdbc[13]: 
/**/rs36.next();
2024-04-21 21:29:23.576934+03:00 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2024-04-21 21:29:23.576954+03:00 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.576978+03:00 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2024-04-21 21:29:23.576997+03:00 jdbc[13]: 
/**/rs36.next();
2024-04-21 21:29:23.577020+03:00 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2024-04-21 21:29:23.577047+03:00 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.577067+03:00 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2024-04-21 21:29:23.577090+03:00 jdbc[13]: 
/**/rs36.next();
2024-04-21 21:29:23.577106+03:00 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2024-04-21 21:29:23.577129+03:00 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.577151+03:00 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2024-04-21 21:29:23.577169+03:00 jdbc[13]: 
/**/rs36.next();
2024-04-21 21:29:23.577190+03:00 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2024-04-21 21:29:23.577210+03:00 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.577233+03:00 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2024-04-21 21:29:23.577251+03:00 jdbc[13]: 
/**/rs36.next();
2024-04-21 21:29:23.577272+03:00 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2024-04-21 21:29:23.577526+03:00 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.577553+03:00 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2024-04-21 21:29:23.577579+03:00 jdbc[13]: 
/**/rs36.next();
2024-04-21 21:29:23.577599+03:00 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2024-04-21 21:29:23.577622+03:00 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.577643+03:00 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2024-04-21 21:29:23.577663+03:00 jdbc[13]: 
/**/rs36.next();
2024-04-21 21:29:23.577686+03:00 jdbc[13]: 
/**/rs36.getString("COLUMN_NAME");
2024-04-21 21:29:23.577707+03:00 jdbc[13]: 
/**/rs36.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.577730+03:00 jdbc[13]: 
/**/rs36.getString("COLUMN_TYPE");
2024-04-21 21:29:23.577750+03:00 jdbc[13]: 
/**/rs36.next();
2024-04-21 21:29:23.577787+03:00 jdbc[13]: 
/**/rs36.close();
2024-04-21 21:29:23.577867+03:00 jdbc[13]: 
/**/prep0.close();
2024-04-21 21:29:23.577928+03:00 jdbc[13]: 
/**/dbMeta6.getProcedures(null, "INFORMATION_SCHEMA", null);
2024-04-21 21:29:23.578024+03:00 jdbc[13]: 
/**/rs37.next();
2024-04-21 21:29:23.578070+03:00 jdbc[13]: 
/**/rs37.close();
2024-04-21 21:29:23.578503+03:00 jdbc[13]: 
/**/dbMeta6.getTables(null, "PUBLIC", null, new String[]{"TABLE", "SYSTEM TABLE", "VIEW", "SYSTEM VIEW", "TABLE LINK", "SYNONYM", "EXTERNAL"});
2024-04-21 21:29:23.578584+03:00 jdbc[13]: 
/**/rs38.next();
2024-04-21 21:29:23.578613+03:00 jdbc[13]: 
/**/rs38.getString("TABLE_NAME");
2024-04-21 21:29:23.578728+03:00 jdbc[13]: 
/**/rs38.getString("TABLE_TYPE");
2024-04-21 21:29:23.578754+03:00 jdbc[13]: 
/**/rs38.next();
2024-04-21 21:29:23.578778+03:00 jdbc[13]: 
/**/rs38.close();
2024-04-21 21:29:23.578799+03:00 jdbc[13]: 
/**/dbMeta6.getConnection();
2024-04-21 21:29:23.578836+03:00 jdbc[13]: 
/**/PreparedStatement prep1 = conn10.prepareStatement("SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2");
2024-04-21 21:29:23.578893+03:00 jdbc[13]: 
/**/prep1.setString(1, "PUBLIC");
2024-04-21 21:29:23.578938+03:00 jdbc[13]: 
/**/prep1.setString(2, "LOCATIONS");
2024-04-21 21:29:23.579481+03:00 jdbc[13]: 
/**/ResultSet rs39 = prep1.executeQuery();
2024-04-21 21:29:23.579792+03:00 jdbc[13]: 
/*SQL l:174 #:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'PUBLIC', 2: 'LOCATIONS'};
2024-04-21 21:29:23.579884+03:00 jdbc[13]: 
/**/rs39.next();
2024-04-21 21:29:23.579913+03:00 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2024-04-21 21:29:23.579978+03:00 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.580010+03:00 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2024-04-21 21:29:23.580062+03:00 jdbc[13]: 
/**/rs39.next();
2024-04-21 21:29:23.580088+03:00 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2024-04-21 21:29:23.580109+03:00 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.580133+03:00 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2024-04-21 21:29:23.580151+03:00 jdbc[13]: 
/**/rs39.next();
2024-04-21 21:29:23.580177+03:00 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2024-04-21 21:29:23.580199+03:00 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.580218+03:00 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2024-04-21 21:29:23.580241+03:00 jdbc[13]: 
/**/rs39.next();
2024-04-21 21:29:23.580260+03:00 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2024-04-21 21:29:23.580283+03:00 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.580302+03:00 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2024-04-21 21:29:23.580319+03:00 jdbc[13]: 
/**/rs39.next();
2024-04-21 21:29:23.580339+03:00 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2024-04-21 21:29:23.580356+03:00 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.580379+03:00 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2024-04-21 21:29:23.580397+03:00 jdbc[13]: 
/**/rs39.next();
2024-04-21 21:29:23.580418+03:00 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2024-04-21 21:29:23.580470+03:00 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.580490+03:00 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2024-04-21 21:29:23.580512+03:00 jdbc[13]: 
/**/rs39.next();
2024-04-21 21:29:23.580530+03:00 jdbc[13]: 
/**/rs39.getString("COLUMN_NAME");
2024-04-21 21:29:23.580553+03:00 jdbc[13]: 
/**/rs39.getInt("ORDINAL_POSITION");
2024-04-21 21:29:23.580573+03:00 jdbc[13]: 
/**/rs39.getString("COLUMN_TYPE");
2024-04-21 21:29:23.580591+03:00 jdbc[13]: 
/**/rs39.next();
2024-04-21 21:29:23.580697+03:00 jdbc[13]: 
/**/rs39.close();
2024-04-21 21:29:23.580725+03:00 jdbc[13]: 
/**/prep1.close();
2024-04-21 21:29:23.580758+03:00 jdbc[13]: 
/**/dbMeta6.getProcedures(null, "PUBLIC", null);
2024-04-21 21:29:23.580818+03:00 jdbc[13]: 
/**/rs40.next();
2024-04-21 21:29:23.580840+03:00 jdbc[13]: 
/**/rs40.close();
2024-04-21 21:29:23.653221+03:00 jdbc[13]: 
/**/PreparedStatement prep2 = conn10.prepareStatement("SELECT VIEW_DEFINITION FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ?");
2024-04-21 21:29:23.653616+03:00 jdbc[13]: Plan       : calculate cost for plan [VIEWS:-21:org.h2.table.InformationSchemaTable@3dfe265a]
2024-04-21 21:29:23.653671+03:00 jdbc[13]: Plan       :   for table filter VIEWS:-21:org.h2.table.InformationSchemaTable@3dfe265a
2024-04-21 21:29:23.653898+03:00 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2024-04-21 21:29:23.654078+03:00 jdbc[13]: Table      :     potential plan item cost 28 index meta
2024-04-21 21:29:23.654206+03:00 jdbc[13]: Plan       :   best plan item cost 27.44 index meta
2024-04-21 21:29:23.654314+03:00 jdbc[13]: Plan       : plan cost 28.44
2024-04-21 21:29:23.654392+03:00 jdbc[13]: 
/**/prep2.setString(1, "PUBLIC");
2024-04-21 21:29:23.654831+03:00 jdbc[13]: 
/**/dbMeta5.getIndexInfo(null, "PUBLIC", "LOCATIONS", false, true);
2024-04-21 21:29:23.655019+03:00 jdbc[13]: 
/**/rs41.next();
2024-04-21 21:29:23.655058+03:00 jdbc[13]: 
/**/rs41.getString("INDEX_NAME");
2024-04-21 21:29:23.655127+03:00 jdbc[13]: 
/**/rs41.getInt("TYPE");
2024-04-21 21:29:23.655468+03:00 jdbc[13]: 
/**/rs41.getBoolean("NON_UNIQUE");
2024-04-21 21:29:23.655518+03:00 jdbc[13]: 
/**/rs41.getString("COLUMN_NAME");
2024-04-21 21:29:23.655553+03:00 jdbc[13]: 
/**/rs41.next();
2024-04-21 21:29:23.655579+03:00 jdbc[13]: 
/**/rs41.close();
2024-04-21 21:29:23.655655+03:00 jdbc[13]: 
/**/prep2.close();
2024-04-21 21:29:23.656239+03:00 jdbc[13]: 
/**/Statement stat0 = conn10.createStatement();
2024-04-21 21:29:23.656322+03:00 jdbc[13]: 
/**/ResultSet rs42 = stat0.executeQuery("SELECT SEQUENCE_NAME, BASE_VALUE, INCREMENT FROM INFORMATION_SCHEMA.SEQUENCES ORDER BY SEQUENCE_NAME");
2024-04-21 21:29:23.656961+03:00 jdbc[13]: Plan       : calculate cost for plan [SEQUENCES:-16:org.h2.table.InformationSchemaTable@6dd9ce36]
2024-04-21 21:29:23.657017+03:00 jdbc[13]: Plan       :   for table filter SEQUENCES:-16:org.h2.table.InformationSchemaTable@6dd9ce36
2024-04-21 21:29:23.657235+03:00 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2024-04-21 21:29:23.657434+03:00 jdbc[13]: Table      :     potential plan item cost 4,322 index meta
2024-04-21 21:29:23.657544+03:00 jdbc[13]: Plan       :   best plan item cost 4,322 index meta
2024-04-21 21:29:23.657648+03:00 jdbc[13]: Plan       : plan cost 4,323
2024-04-21 21:29:23.657864+03:00 jdbc[13]: 
/*SQL */SELECT SEQUENCE_NAME, BASE_VALUE, INCREMENT FROM INFORMATION_SCHEMA.SEQUENCES ORDER BY SEQUENCE_NAME;
2024-04-21 21:29:23.657946+03:00 jdbc[13]: 
/**/rs42.next();
2024-04-21 21:29:23.657973+03:00 jdbc[13]: 
/**/rs42.close();
2024-04-21 21:29:23.658009+03:00 jdbc[13]: 
/**/ResultSet rs43 = stat0.executeQuery("SELECT USER_NAME, IS_ADMIN FROM INFORMATION_SCHEMA.USERS ORDER BY USER_NAME");
2024-04-21 21:29:23.658188+03:00 jdbc[13]: Plan       : calculate cost for plan [USERS:-35:org.h2.table.InformationSchemaTable@22e6ec5c]
2024-04-21 21:29:23.658227+03:00 jdbc[13]: Plan       :   for table filter USERS:-35:org.h2.table.InformationSchemaTable@22e6ec5c
2024-04-21 21:29:23.658388+03:00 jdbc[13]: Table      :     potential plan item cost 10,000 index meta
2024-04-21 21:29:23.658505+03:00 jdbc[13]: Plan       :   best plan item cost 10,000 index meta
2024-04-21 21:29:23.658612+03:00 jdbc[13]: Plan       : plan cost 10,001
2024-04-21 21:29:23.658785+03:00 jdbc[13]: 
/*SQL #:1*/SELECT USER_NAME, IS_ADMIN FROM INFORMATION_SCHEMA.USERS ORDER BY USER_NAME;
2024-04-21 21:29:23.658852+03:00 jdbc[13]: 
/**/rs43.next();
2024-04-21 21:29:23.658895+03:00 jdbc[13]: 
/**/rs43.getString(1);
2024-04-21 21:29:23.658927+03:00 jdbc[13]: 
/**/rs43.getString(2);
2024-04-21 21:29:23.658968+03:00 jdbc[13]: 
/**/rs43.next();
2024-04-21 21:29:23.658988+03:00 jdbc[13]: 
/**/rs43.close();
2024-04-21 21:29:23.659016+03:00 jdbc[13]: 
/**/stat0.close();
2024-04-21 21:29:23.659041+03:00 jdbc[13]: 
/**/dbMeta5.getDatabaseProductName();
2024-04-21 21:29:23.659069+03:00 jdbc[13]: 
/**/dbMeta5.getDatabaseProductVersion();
2024-04-21 21:29:26.687053+03:00 jdbc[13]: 
/**/Statement stat1 = conn10.createStatement(1004, 1008);
2024-04-21 21:29:26.687169+03:00 jdbc[13]: 
/**/stat1.setMaxRows(1000);
2024-04-21 21:29:26.687198+03:00 jdbc[13]: 
/**/stat1.execute("SELECT * FROM LOCATIONS");
2024-04-21 21:29:26.687494+03:00 jdbc[13]: Plan       : calculate cost for plan [PUBLIC.LOCATIONS]
2024-04-21 21:29:26.687531+03:00 jdbc[13]: Plan       :   for table filter PUBLIC.LOCATIONS
2024-04-21 21:29:26.687677+03:00 jdbc[13]: Table      :     potential plan item cost 10,240 index PUBLIC.LOCATIONS.tableScan
2024-04-21 21:29:26.687785+03:00 jdbc[13]: Table      :     potential plan item cost 20,300 index PUBLIC.PRIMARY_KEY_5
2024-04-21 21:29:26.687870+03:00 jdbc[13]: Plan       :   best plan item cost 10,240 index PUBLIC.LOCATIONS.tableScan
2024-04-21 21:29:26.687950+03:00 jdbc[13]: Plan       : plan cost 10,241
2024-04-21 21:29:26.688232+03:00 jdbc[13]: 
/*SQL #:4*/SELECT * FROM LOCATIONS;
2024-04-21 21:29:26.688324+03:00 jdbc[13]: 
/**/ResultSet rs44 = stat1.getResultSet();
2024-04-21 21:29:26.688368+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta0 = rs44.getMetaData();
2024-04-21 21:29:26.688392+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:29:26.688500+03:00 jdbc[13]: 
/*SQL #:1*/CALL DATABASE();
2024-04-21 21:29:26.689019+03:00 jdbc[13]: 
/**/rsMeta0.getColumnCount();
2024-04-21 21:29:26.689061+03:00 jdbc[13]: 
/**/rsMeta0.getColumnLabel(1);
2024-04-21 21:29:26.689087+03:00 jdbc[13]: 
/**/rsMeta0.getColumnLabel(2);
2024-04-21 21:29:26.689108+03:00 jdbc[13]: 
/**/rsMeta0.getColumnLabel(3);
2024-04-21 21:29:26.689126+03:00 jdbc[13]: 
/**/rsMeta0.getColumnLabel(4);
2024-04-21 21:29:26.689141+03:00 jdbc[13]: 
/**/rsMeta0.getColumnLabel(5);
2024-04-21 21:29:26.689160+03:00 jdbc[13]: 
/**/rsMeta0.getColumnLabel(6);
2024-04-21 21:29:26.689182+03:00 jdbc[13]: 
/**/rsMeta0.getColumnLabel(7);
2024-04-21 21:29:26.689200+03:00 jdbc[13]: 
/**/rs44.next();
2024-04-21 21:29:26.689226+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta1 = rs44.getMetaData();
2024-04-21 21:29:26.689240+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:29:26.689266+03:00 jdbc[13]: 
/**/rsMeta1.getColumnType(1);
2024-04-21 21:29:26.689294+03:00 jdbc[13]: 
/**/rs44.getString(1);
2024-04-21 21:29:26.689332+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta2 = rs44.getMetaData();
2024-04-21 21:29:26.689347+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:29:26.689364+03:00 jdbc[13]: 
/**/rsMeta2.getColumnType(2);
2024-04-21 21:29:26.689379+03:00 jdbc[13]: 
/**/rs44.getString(2);
2024-04-21 21:29:26.689399+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta3 = rs44.getMetaData();
2024-04-21 21:29:26.689412+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:29:26.689429+03:00 jdbc[13]: 
/**/rsMeta3.getColumnType(3);
2024-04-21 21:29:26.689442+03:00 jdbc[13]: 
/**/rs44.getString(3);
2024-04-21 21:29:26.689463+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta4 = rs44.getMetaData();
2024-04-21 21:29:26.689479+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:29:26.689492+03:00 jdbc[13]: 
/**/rsMeta4.getColumnType(4);
2024-04-21 21:29:26.689509+03:00 jdbc[13]: 
/**/rs44.getString(4);
2024-04-21 21:29:26.689525+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta5 = rs44.getMetaData();
2024-04-21 21:29:26.689540+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:29:26.689559+03:00 jdbc[13]: 
/**/rsMeta5.getColumnType(5);
2024-04-21 21:29:26.689573+03:00 jdbc[13]: 
/**/rs44.getString(5);
2024-04-21 21:29:26.689591+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta6 = rs44.getMetaData();
2024-04-21 21:29:26.689603+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:29:26.689620+03:00 jdbc[13]: 
/**/rsMeta6.getColumnType(6);
2024-04-21 21:29:26.689633+03:00 jdbc[13]: 
/**/rs44.getString(6);
2024-04-21 21:29:26.689652+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta7 = rs44.getMetaData();
2024-04-21 21:29:26.689667+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:29:26.689680+03:00 jdbc[13]: 
/**/rsMeta7.getColumnType(7);
2024-04-21 21:29:26.689697+03:00 jdbc[13]: 
/**/rs44.getString(7);
2024-04-21 21:29:26.689711+03:00 jdbc[13]: 
/**/rs44.next();
2024-04-21 21:29:26.689728+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta8 = rs44.getMetaData();
2024-04-21 21:29:26.689740+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:29:26.689756+03:00 jdbc[13]: 
/**/rsMeta8.getColumnType(1);
2024-04-21 21:29:26.689772+03:00 jdbc[13]: 
/**/rs44.getString(1);
2024-04-21 21:29:26.689787+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta9 = rs44.getMetaData();
2024-04-21 21:29:26.689802+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:29:26.689815+03:00 jdbc[13]: 
/**/rsMeta9.getColumnType(2);
2024-04-21 21:29:26.689832+03:00 jdbc[13]: 
/**/rs44.getString(2);
2024-04-21 21:29:26.689847+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta10 = rs44.getMetaData();
2024-04-21 21:29:26.689862+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:29:26.689878+03:00 jdbc[13]: 
/**/rsMeta10.getColumnType(3);
2024-04-21 21:29:26.689892+03:00 jdbc[13]: 
/**/rs44.getString(3);
2024-04-21 21:29:26.689910+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta11 = rs44.getMetaData();
2024-04-21 21:29:26.689922+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:29:26.689939+03:00 jdbc[13]: 
/**/rsMeta11.getColumnType(4);
2024-04-21 21:29:26.689952+03:00 jdbc[13]: 
/**/rs44.getString(4);
2024-04-21 21:29:26.689970+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta12 = rs44.getMetaData();
2024-04-21 21:29:26.689985+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:29:26.689999+03:00 jdbc[13]: 
/**/rsMeta12.getColumnType(5);
2024-04-21 21:29:26.690015+03:00 jdbc[13]: 
/**/rs44.getString(5);
2024-04-21 21:29:26.690030+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta13 = rs44.getMetaData();
2024-04-21 21:29:26.690045+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:29:26.690058+03:00 jdbc[13]: 
/**/rsMeta13.getColumnType(6);
2024-04-21 21:29:26.690075+03:00 jdbc[13]: 
/**/rs44.getString(6);
2024-04-21 21:29:26.690094+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta14 = rs44.getMetaData();
2024-04-21 21:29:26.690106+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:29:26.690122+03:00 jdbc[13]: 
/**/rsMeta14.getColumnType(7);
2024-04-21 21:29:26.690135+03:00 jdbc[13]: 
/**/rs44.getString(7);
2024-04-21 21:29:26.690154+03:00 jdbc[13]: 
/**/rs44.next();
2024-04-21 21:29:26.690168+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta15 = rs44.getMetaData();
2024-04-21 21:29:26.690183+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:29:26.690199+03:00 jdbc[13]: 
/**/rsMeta15.getColumnType(1);
2024-04-21 21:29:26.690213+03:00 jdbc[13]: 
/**/rs44.getString(1);
2024-04-21 21:29:26.690230+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta16 = rs44.getMetaData();
2024-04-21 21:29:26.690243+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:29:26.690259+03:00 jdbc[13]: 
/**/rsMeta16.getColumnType(2);
2024-04-21 21:29:26.690273+03:00 jdbc[13]: 
/**/rs44.getString(2);
2024-04-21 21:29:26.690291+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta17 = rs44.getMetaData();
2024-04-21 21:29:26.690306+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:29:26.690319+03:00 jdbc[13]: 
/**/rsMeta17.getColumnType(3);
2024-04-21 21:29:26.690335+03:00 jdbc[13]: 
/**/rs44.getString(3);
2024-04-21 21:29:26.690350+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta18 = rs44.getMetaData();
2024-04-21 21:29:26.690366+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:29:26.690379+03:00 jdbc[13]: 
/**/rsMeta18.getColumnType(4);
2024-04-21 21:29:26.690395+03:00 jdbc[13]: 
/**/rs44.getString(4);
2024-04-21 21:29:26.690413+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta19 = rs44.getMetaData();
2024-04-21 21:29:26.690425+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:29:26.690441+03:00 jdbc[13]: 
/**/rsMeta19.getColumnType(5);
2024-04-21 21:29:26.690454+03:00 jdbc[13]: 
/**/rs44.getString(5);
2024-04-21 21:29:26.690474+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta20 = rs44.getMetaData();
2024-04-21 21:29:26.690489+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:29:26.690502+03:00 jdbc[13]: 
/**/rsMeta20.getColumnType(6);
2024-04-21 21:29:26.690519+03:00 jdbc[13]: 
/**/rs44.getString(6);
2024-04-21 21:29:26.690534+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta21 = rs44.getMetaData();
2024-04-21 21:29:26.690549+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:29:26.690562+03:00 jdbc[13]: 
/**/rsMeta21.getColumnType(7);
2024-04-21 21:29:26.690587+03:00 jdbc[13]: 
/**/rs44.getString(7);
2024-04-21 21:29:26.690607+03:00 jdbc[13]: 
/**/rs44.next();
2024-04-21 21:29:26.690622+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta22 = rs44.getMetaData();
2024-04-21 21:29:26.690637+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:29:26.690650+03:00 jdbc[13]: 
/**/rsMeta22.getColumnType(1);
2024-04-21 21:29:26.690667+03:00 jdbc[13]: 
/**/rs44.getString(1);
2024-04-21 21:29:26.690682+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta23 = rs44.getMetaData();
2024-04-21 21:29:26.690698+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:29:26.690713+03:00 jdbc[13]: 
/**/rsMeta23.getColumnType(2);
2024-04-21 21:29:26.690727+03:00 jdbc[13]: 
/**/rs44.getString(2);
2024-04-21 21:29:26.690745+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta24 = rs44.getMetaData();
2024-04-21 21:29:26.690757+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:29:26.690776+03:00 jdbc[13]: 
/**/rsMeta24.getColumnType(3);
2024-04-21 21:29:26.690800+03:00 jdbc[13]: 
/**/rs44.getString(3);
2024-04-21 21:29:26.690820+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta25 = rs44.getMetaData();
2024-04-21 21:29:26.690835+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:29:26.690849+03:00 jdbc[13]: 
/**/rsMeta25.getColumnType(4);
2024-04-21 21:29:26.690870+03:00 jdbc[13]: 
/**/rs44.getString(4);
2024-04-21 21:29:26.690886+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta26 = rs44.getMetaData();
2024-04-21 21:29:26.690902+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:29:26.690915+03:00 jdbc[13]: 
/**/rsMeta26.getColumnType(5);
2024-04-21 21:29:26.690931+03:00 jdbc[13]: 
/**/rs44.getString(5);
2024-04-21 21:29:26.690948+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta27 = rs44.getMetaData();
2024-04-21 21:29:26.690961+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:29:26.690976+03:00 jdbc[13]: 
/**/rsMeta27.getColumnType(6);
2024-04-21 21:29:26.690990+03:00 jdbc[13]: 
/**/rs44.getString(6);
2024-04-21 21:29:26.691010+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta28 = rs44.getMetaData();
2024-04-21 21:29:26.691022+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:29:26.691038+03:00 jdbc[13]: 
/**/rsMeta28.getColumnType(7);
2024-04-21 21:29:26.691053+03:00 jdbc[13]: 
/**/rs44.getString(7);
2024-04-21 21:29:26.691066+03:00 jdbc[13]: 
/**/rs44.next();
2024-04-21 21:29:26.691091+03:00 jdbc[13]: 
/**/rs44.getConcurrency();
2024-04-21 21:29:26.692067+03:00 jdbc[13]: 
/**/DatabaseMetaData dbMeta7 = conn10.getMetaData();
2024-04-21 21:29:26.692164+03:00 jdbc[13]: 
/**/dbMeta7.getTables(null, "PUBLIC", "LOCATIONS", new String[]{"BASE TABLE"});
2024-04-21 21:29:26.692263+03:00 jdbc[13]: 
/**/rs45.next();
2024-04-21 21:29:26.692305+03:00 jdbc[13]: 
/**/rs45.getString("TABLE_NAME");
2024-04-21 21:29:26.692359+03:00 jdbc[13]: 
/**/dbMeta7.getPrimaryKeys(null, "PUBLIC", "LOCATIONS");
2024-04-21 21:29:26.692426+03:00 jdbc[13]: 
/**/rs46.next();
2024-04-21 21:29:26.692453+03:00 jdbc[13]: 
/**/rs46.getString("COLUMN_NAME");
2024-04-21 21:29:26.692489+03:00 jdbc[13]: 
/**/rs46.next();
2024-04-21 21:29:26.692541+03:00 jdbc[13]: 
/**/rs44.getType();
2024-04-21 21:29:26.692564+03:00 jdbc[13]: 
/**/rs44.close();
2024-04-21 21:29:26.692612+03:00 jdbc[13]: 
/**/stat1.close();
2024-04-21 21:30:23.500965+03:00 jdbc[13]: 
/**/Statement stat2 = conn10.createStatement(1004, 1008);
2024-04-21 21:30:23.501573+03:00 jdbc[13]: 
/**/stat2.setMaxRows(1000);
2024-04-21 21:30:23.502462+03:00 jdbc[13]: 
/**/stat2.execute("SELECT * FROM LOCATIONS \r\n\r\nUPDATE locations SET trashed=true WHERE code = 'NYC_US'");
2024-04-21 21:30:23.505440+03:00 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "SELECT * FROM LOCATIONS \000d\000a\000d\000aUPDATE [*]locations SET trashed=true WHERE code = 'NYC_US'"; SQL statement:
SELECT * FROM LOCATIONS 

UPDATE locations SET trashed=true WHERE code = 'NYC_US' [42000-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:514)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.getSyntaxError(DbException.java:247)
	at org.h2.command.ParserBase.getSyntaxError(ParserBase.java:748)
	at org.h2.command.Parser.prepareCommand(Parser.java:486)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:639)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:559)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1166)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at org.h2.server.web.WebApp.getResult(WebApp.java:1345)
	at org.h2.server.web.WebApp.query(WebApp.java:1143)
	at org.h2.server.web.WebApp.query(WebApp.java:1119)
	at org.h2.server.web.WebApp.process(WebApp.java:245)
	at org.h2.server.web.WebApp.processRequest(WebApp.java:177)
	at org.h2.server.web.JakartaWebServlet.doGet(JakartaWebServlet.java:129)
	at org.h2.server.web.JakartaWebServlet.doPost(JakartaWebServlet.java:166)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:206)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:150)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:175)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:150)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:175)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:150)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:175)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:150)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:175)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:150)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1736)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-21 21:31:17.060063+03:00 jdbc[13]: 
/**/Statement stat3 = conn10.createStatement();
2024-04-21 21:31:17.060707+03:00 jdbc[13]: 
/**/stat3.setMaxRows(1000);
2024-04-21 21:31:17.060781+03:00 jdbc[13]: 
/**/stat3.execute("SELECT * FROM LOCATIONS");
2024-04-21 21:31:17.061082+03:00 jdbc[13]: 
/*SQL #:4*/SELECT * FROM LOCATIONS;
2024-04-21 21:31:17.061202+03:00 jdbc[13]: 
/**/ResultSet rs48 = stat3.getResultSet();
2024-04-21 21:31:17.061240+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta29 = rs48.getMetaData();
2024-04-21 21:31:17.061268+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:17.061293+03:00 jdbc[13]: 
/**/rsMeta29.getColumnCount();
2024-04-21 21:31:17.061321+03:00 jdbc[13]: 
/**/rsMeta29.getColumnLabel(1);
2024-04-21 21:31:17.061351+03:00 jdbc[13]: 
/**/rsMeta29.getColumnLabel(2);
2024-04-21 21:31:17.061374+03:00 jdbc[13]: 
/**/rsMeta29.getColumnLabel(3);
2024-04-21 21:31:17.061402+03:00 jdbc[13]: 
/**/rsMeta29.getColumnLabel(4);
2024-04-21 21:31:17.061519+03:00 jdbc[13]: 
/**/rsMeta29.getColumnLabel(5);
2024-04-21 21:31:17.061551+03:00 jdbc[13]: 
/**/rsMeta29.getColumnLabel(6);
2024-04-21 21:31:17.061578+03:00 jdbc[13]: 
/**/rsMeta29.getColumnLabel(7);
2024-04-21 21:31:17.061603+03:00 jdbc[13]: 
/**/rs48.next();
2024-04-21 21:31:17.061636+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta30 = rs48.getMetaData();
2024-04-21 21:31:17.061659+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:17.061689+03:00 jdbc[13]: 
/**/rsMeta30.getColumnType(1);
2024-04-21 21:31:17.061716+03:00 jdbc[13]: 
/**/rs48.getString(1);
2024-04-21 21:31:17.061751+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta31 = rs48.getMetaData();
2024-04-21 21:31:17.061776+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:17.061802+03:00 jdbc[13]: 
/**/rsMeta31.getColumnType(2);
2024-04-21 21:31:17.061836+03:00 jdbc[13]: 
/**/rs48.getString(2);
2024-04-21 21:31:17.061884+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta32 = rs48.getMetaData();
2024-04-21 21:31:17.061928+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:17.061956+03:00 jdbc[13]: 
/**/rsMeta32.getColumnType(3);
2024-04-21 21:31:17.061986+03:00 jdbc[13]: 
/**/rs48.getString(3);
2024-04-21 21:31:17.062021+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta33 = rs48.getMetaData();
2024-04-21 21:31:17.062043+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:17.062071+03:00 jdbc[13]: 
/**/rsMeta33.getColumnType(4);
2024-04-21 21:31:17.062095+03:00 jdbc[13]: 
/**/rs48.getString(4);
2024-04-21 21:31:17.062124+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta34 = rs48.getMetaData();
2024-04-21 21:31:17.062146+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:17.062168+03:00 jdbc[13]: 
/**/rsMeta34.getColumnType(5);
2024-04-21 21:31:17.062194+03:00 jdbc[13]: 
/**/rs48.getString(5);
2024-04-21 21:31:17.062218+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta35 = rs48.getMetaData();
2024-04-21 21:31:17.062241+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:17.062262+03:00 jdbc[13]: 
/**/rsMeta35.getColumnType(6);
2024-04-21 21:31:17.062287+03:00 jdbc[13]: 
/**/rs48.getString(6);
2024-04-21 21:31:17.062313+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta36 = rs48.getMetaData();
2024-04-21 21:31:17.062333+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:17.062357+03:00 jdbc[13]: 
/**/rsMeta36.getColumnType(7);
2024-04-21 21:31:17.062377+03:00 jdbc[13]: 
/**/rs48.getString(7);
2024-04-21 21:31:17.062403+03:00 jdbc[13]: 
/**/rs48.next();
2024-04-21 21:31:17.062426+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta37 = rs48.getMetaData();
2024-04-21 21:31:17.062449+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:17.062470+03:00 jdbc[13]: 
/**/rsMeta37.getColumnType(1);
2024-04-21 21:31:17.062497+03:00 jdbc[13]: 
/**/rs48.getString(1);
2024-04-21 21:31:17.062525+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta38 = rs48.getMetaData();
2024-04-21 21:31:17.062546+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:17.062571+03:00 jdbc[13]: 
/**/rsMeta38.getColumnType(2);
2024-04-21 21:31:17.062592+03:00 jdbc[13]: 
/**/rs48.getString(2);
2024-04-21 21:31:17.062621+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta39 = rs48.getMetaData();
2024-04-21 21:31:17.062644+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:17.062666+03:00 jdbc[13]: 
/**/rsMeta39.getColumnType(3);
2024-04-21 21:31:17.062691+03:00 jdbc[13]: 
/**/rs48.getString(3);
2024-04-21 21:31:17.062717+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta40 = rs48.getMetaData();
2024-04-21 21:31:17.062741+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:17.062762+03:00 jdbc[13]: 
/**/rsMeta40.getColumnType(4);
2024-04-21 21:31:17.062788+03:00 jdbc[13]: 
/**/rs48.getString(4);
2024-04-21 21:31:17.062816+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta41 = rs48.getMetaData();
2024-04-21 21:31:17.062836+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:17.062860+03:00 jdbc[13]: 
/**/rsMeta41.getColumnType(5);
2024-04-21 21:31:17.062882+03:00 jdbc[13]: 
/**/rs48.getString(5);
2024-04-21 21:31:17.062910+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta42 = rs48.getMetaData();
2024-04-21 21:31:17.062930+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:17.062955+03:00 jdbc[13]: 
/**/rsMeta42.getColumnType(6);
2024-04-21 21:31:17.062980+03:00 jdbc[13]: 
/**/rs48.getString(6);
2024-04-21 21:31:17.063004+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta43 = rs48.getMetaData();
2024-04-21 21:31:17.063027+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:17.063048+03:00 jdbc[13]: 
/**/rsMeta43.getColumnType(7);
2024-04-21 21:31:17.063080+03:00 jdbc[13]: 
/**/rs48.getString(7);
2024-04-21 21:31:17.063102+03:00 jdbc[13]: 
/**/rs48.next();
2024-04-21 21:31:17.063129+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta44 = rs48.getMetaData();
2024-04-21 21:31:17.063152+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:17.063174+03:00 jdbc[13]: 
/**/rsMeta44.getColumnType(1);
2024-04-21 21:31:17.063203+03:00 jdbc[13]: 
/**/rs48.getString(1);
2024-04-21 21:31:17.063228+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta45 = rs48.getMetaData();
2024-04-21 21:31:17.063252+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:17.063289+03:00 jdbc[13]: 
/**/rsMeta45.getColumnType(2);
2024-04-21 21:31:17.063318+03:00 jdbc[13]: 
/**/rs48.getString(2);
2024-04-21 21:31:17.063349+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta46 = rs48.getMetaData();
2024-04-21 21:31:17.063371+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:17.063400+03:00 jdbc[13]: 
/**/rsMeta46.getColumnType(3);
2024-04-21 21:31:17.063425+03:00 jdbc[13]: 
/**/rs48.getString(3);
2024-04-21 21:31:17.063458+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta47 = rs48.getMetaData();
2024-04-21 21:31:17.063482+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:17.063512+03:00 jdbc[13]: 
/**/rsMeta47.getColumnType(4);
2024-04-21 21:31:17.063541+03:00 jdbc[13]: 
/**/rs48.getString(4);
2024-04-21 21:31:17.063571+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta48 = rs48.getMetaData();
2024-04-21 21:31:17.063599+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:17.063627+03:00 jdbc[13]: 
/**/rsMeta48.getColumnType(5);
2024-04-21 21:31:17.063657+03:00 jdbc[13]: 
/**/rs48.getString(5);
2024-04-21 21:31:17.063691+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta49 = rs48.getMetaData();
2024-04-21 21:31:17.063715+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:17.063745+03:00 jdbc[13]: 
/**/rsMeta49.getColumnType(6);
2024-04-21 21:31:17.063771+03:00 jdbc[13]: 
/**/rs48.getString(6);
2024-04-21 21:31:17.063807+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta50 = rs48.getMetaData();
2024-04-21 21:31:17.063835+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:17.063861+03:00 jdbc[13]: 
/**/rsMeta50.getColumnType(7);
2024-04-21 21:31:17.063890+03:00 jdbc[13]: 
/**/rs48.getString(7);
2024-04-21 21:31:17.063914+03:00 jdbc[13]: 
/**/rs48.next();
2024-04-21 21:31:17.063945+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta51 = rs48.getMetaData();
2024-04-21 21:31:17.063967+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:17.063998+03:00 jdbc[13]: 
/**/rsMeta51.getColumnType(1);
2024-04-21 21:31:17.064023+03:00 jdbc[13]: 
/**/rs48.getString(1);
2024-04-21 21:31:17.064054+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta52 = rs48.getMetaData();
2024-04-21 21:31:17.064079+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:17.064106+03:00 jdbc[13]: 
/**/rsMeta52.getColumnType(2);
2024-04-21 21:31:17.064135+03:00 jdbc[13]: 
/**/rs48.getString(2);
2024-04-21 21:31:17.064163+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta53 = rs48.getMetaData();
2024-04-21 21:31:17.064188+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:17.064211+03:00 jdbc[13]: 
/**/rsMeta53.getColumnType(3);
2024-04-21 21:31:17.064239+03:00 jdbc[13]: 
/**/rs48.getString(3);
2024-04-21 21:31:17.064272+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta54 = rs48.getMetaData();
2024-04-21 21:31:17.064296+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:17.064326+03:00 jdbc[13]: 
/**/rsMeta54.getColumnType(4);
2024-04-21 21:31:17.064350+03:00 jdbc[13]: 
/**/rs48.getString(4);
2024-04-21 21:31:17.064381+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta55 = rs48.getMetaData();
2024-04-21 21:31:17.064401+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:17.064428+03:00 jdbc[13]: 
/**/rsMeta55.getColumnType(5);
2024-04-21 21:31:17.064453+03:00 jdbc[13]: 
/**/rs48.getString(5);
2024-04-21 21:31:17.064478+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta56 = rs48.getMetaData();
2024-04-21 21:31:17.064502+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:17.064522+03:00 jdbc[13]: 
/**/rsMeta56.getColumnType(6);
2024-04-21 21:31:17.064547+03:00 jdbc[13]: 
/**/rs48.getString(6);
2024-04-21 21:31:17.064571+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta57 = rs48.getMetaData();
2024-04-21 21:31:17.064594+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:17.064618+03:00 jdbc[13]: 
/**/rsMeta57.getColumnType(7);
2024-04-21 21:31:17.064644+03:00 jdbc[13]: 
/**/rs48.getString(7);
2024-04-21 21:31:17.064669+03:00 jdbc[13]: 
/**/rs48.next();
2024-04-21 21:31:17.064691+03:00 jdbc[13]: 
/**/rs48.getConcurrency();
2024-04-21 21:31:17.064714+03:00 jdbc[13]: 
/**/rs48.close();
2024-04-21 21:31:17.064742+03:00 jdbc[13]: 
/**/stat3.close();
2024-04-21 21:31:17.064802+03:00 jdbc[13]: 
/**/Statement stat4 = conn10.createStatement();
2024-04-21 21:31:17.064966+03:00 jdbc[13]: 
/**/stat4.setMaxRows(1000);
2024-04-21 21:31:17.064992+03:00 jdbc[13]: 
/**/stat4.execute("UPDATE locations SET trashed=true WHERE code = 'NYC_US'");
2024-04-21 21:31:17.068448+03:00 jdbc[13]: Table      :     potential plan item cost 10,240 index PUBLIC.LOCATIONS.tableScan
2024-04-21 21:31:17.068626+03:00 jdbc[13]: Table      :     potential plan item cost 40 index PUBLIC.PRIMARY_KEY_5
2024-04-21 21:31:17.068956+03:00 lock: 13 shared write requesting for LOCATIONS 
2024-04-21 21:31:17.069108+03:00 lock: 13 shared write ok LOCATIONS 
2024-04-21 21:31:17.069746+03:00 jdbc[13]: 
/*SQL */UPDATE locations SET trashed=true WHERE code = 'NYC_US';
2024-04-21 21:31:17.069959+03:00 lock: 13 shared write unlock LOCATIONS 
2024-04-21 21:31:17.070024+03:00 jdbc[13]: 
/**/stat4.getLargeUpdateCount();
2024-04-21 21:31:17.070060+03:00 jdbc[13]: 
/**/stat4.close();
2024-04-21 21:31:36.086449+03:00 jdbc[13]: 
/**/Statement stat5 = conn10.createStatement();
2024-04-21 21:31:36.086845+03:00 jdbc[13]: 
/**/stat5.setMaxRows(1000);
2024-04-21 21:31:36.086898+03:00 jdbc[13]: 
/**/stat5.execute("SELECT * FROM LOCATIONS");
2024-04-21 21:31:36.087187+03:00 jdbc[13]: 
/*SQL #:4*/SELECT * FROM LOCATIONS;
2024-04-21 21:31:36.087375+03:00 jdbc[13]: 
/**/ResultSet rs50 = stat5.getResultSet();
2024-04-21 21:31:36.087448+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta58 = rs50.getMetaData();
2024-04-21 21:31:36.087483+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:36.087524+03:00 jdbc[13]: 
/**/rsMeta58.getColumnCount();
2024-04-21 21:31:36.087564+03:00 jdbc[13]: 
/**/rsMeta58.getColumnLabel(1);
2024-04-21 21:31:36.087598+03:00 jdbc[13]: 
/**/rsMeta58.getColumnLabel(2);
2024-04-21 21:31:36.087633+03:00 jdbc[13]: 
/**/rsMeta58.getColumnLabel(3);
2024-04-21 21:31:36.087662+03:00 jdbc[13]: 
/**/rsMeta58.getColumnLabel(4);
2024-04-21 21:31:36.087705+03:00 jdbc[13]: 
/**/rsMeta58.getColumnLabel(5);
2024-04-21 21:31:36.087742+03:00 jdbc[13]: 
/**/rsMeta58.getColumnLabel(6);
2024-04-21 21:31:36.087772+03:00 jdbc[13]: 
/**/rsMeta58.getColumnLabel(7);
2024-04-21 21:31:36.087805+03:00 jdbc[13]: 
/**/rs50.next();
2024-04-21 21:31:36.087837+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta59 = rs50.getMetaData();
2024-04-21 21:31:36.087868+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:36.087903+03:00 jdbc[13]: 
/**/rsMeta59.getColumnType(1);
2024-04-21 21:31:36.087937+03:00 jdbc[13]: 
/**/rs50.getString(1);
2024-04-21 21:31:36.087977+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta60 = rs50.getMetaData();
2024-04-21 21:31:36.088002+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:36.088036+03:00 jdbc[13]: 
/**/rsMeta60.getColumnType(2);
2024-04-21 21:31:36.088065+03:00 jdbc[13]: 
/**/rs50.getString(2);
2024-04-21 21:31:36.088102+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta61 = rs50.getMetaData();
2024-04-21 21:31:36.088131+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:36.088162+03:00 jdbc[13]: 
/**/rsMeta61.getColumnType(3);
2024-04-21 21:31:36.088193+03:00 jdbc[13]: 
/**/rs50.getString(3);
2024-04-21 21:31:36.088223+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta62 = rs50.getMetaData();
2024-04-21 21:31:36.088252+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:36.088281+03:00 jdbc[13]: 
/**/rsMeta62.getColumnType(4);
2024-04-21 21:31:36.088308+03:00 jdbc[13]: 
/**/rs50.getString(4);
2024-04-21 21:31:36.088341+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta63 = rs50.getMetaData();
2024-04-21 21:31:36.088366+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:36.088396+03:00 jdbc[13]: 
/**/rsMeta63.getColumnType(5);
2024-04-21 21:31:36.088422+03:00 jdbc[13]: 
/**/rs50.getString(5);
2024-04-21 21:31:36.088622+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta64 = rs50.getMetaData();
2024-04-21 21:31:36.088659+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:36.088694+03:00 jdbc[13]: 
/**/rsMeta64.getColumnType(6);
2024-04-21 21:31:36.088728+03:00 jdbc[13]: 
/**/rs50.getString(6);
2024-04-21 21:31:36.088760+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta65 = rs50.getMetaData();
2024-04-21 21:31:36.088791+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:36.088817+03:00 jdbc[13]: 
/**/rsMeta65.getColumnType(7);
2024-04-21 21:31:36.088852+03:00 jdbc[13]: 
/**/rs50.getString(7);
2024-04-21 21:31:36.088884+03:00 jdbc[13]: 
/**/rs50.next();
2024-04-21 21:31:36.088913+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta66 = rs50.getMetaData();
2024-04-21 21:31:36.088942+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:36.088967+03:00 jdbc[13]: 
/**/rsMeta66.getColumnType(1);
2024-04-21 21:31:36.088999+03:00 jdbc[13]: 
/**/rs50.getString(1);
2024-04-21 21:31:36.089030+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta67 = rs50.getMetaData();
2024-04-21 21:31:36.089060+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:36.089085+03:00 jdbc[13]: 
/**/rsMeta67.getColumnType(2);
2024-04-21 21:31:36.089117+03:00 jdbc[13]: 
/**/rs50.getString(2);
2024-04-21 21:31:36.089150+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta68 = rs50.getMetaData();
2024-04-21 21:31:36.089174+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:36.089219+03:00 jdbc[13]: 
/**/rsMeta68.getColumnType(3);
2024-04-21 21:31:36.089334+03:00 jdbc[13]: 
/**/rs50.getString(3);
2024-04-21 21:31:36.089378+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta69 = rs50.getMetaData();
2024-04-21 21:31:36.089408+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:36.089438+03:00 jdbc[13]: 
/**/rsMeta69.getColumnType(4);
2024-04-21 21:31:36.089471+03:00 jdbc[13]: 
/**/rs50.getString(4);
2024-04-21 21:31:36.089501+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta70 = rs50.getMetaData();
2024-04-21 21:31:36.089530+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:36.089556+03:00 jdbc[13]: 
/**/rsMeta70.getColumnType(5);
2024-04-21 21:31:36.089588+03:00 jdbc[13]: 
/**/rs50.getString(5);
2024-04-21 21:31:36.089620+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta71 = rs50.getMetaData();
2024-04-21 21:31:36.089646+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:36.089676+03:00 jdbc[13]: 
/**/rsMeta71.getColumnType(6);
2024-04-21 21:31:36.089704+03:00 jdbc[13]: 
/**/rs50.getString(6);
2024-04-21 21:31:36.089739+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta72 = rs50.getMetaData();
2024-04-21 21:31:36.089764+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:36.089797+03:00 jdbc[13]: 
/**/rsMeta72.getColumnType(7);
2024-04-21 21:31:36.089828+03:00 jdbc[13]: 
/**/rs50.getString(7);
2024-04-21 21:31:36.089857+03:00 jdbc[13]: 
/**/rs50.next();
2024-04-21 21:31:36.089889+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta73 = rs50.getMetaData();
2024-04-21 21:31:36.089913+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:36.089944+03:00 jdbc[13]: 
/**/rsMeta73.getColumnType(1);
2024-04-21 21:31:36.089971+03:00 jdbc[13]: 
/**/rs50.getString(1);
2024-04-21 21:31:36.090022+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta74 = rs50.getMetaData();
2024-04-21 21:31:36.090049+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:36.090083+03:00 jdbc[13]: 
/**/rsMeta74.getColumnType(2);
2024-04-21 21:31:36.090114+03:00 jdbc[13]: 
/**/rs50.getString(2);
2024-04-21 21:31:36.090144+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta75 = rs50.getMetaData();
2024-04-21 21:31:36.090173+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:36.090198+03:00 jdbc[13]: 
/**/rsMeta75.getColumnType(3);
2024-04-21 21:31:36.090229+03:00 jdbc[13]: 
/**/rs50.getString(3);
2024-04-21 21:31:36.090257+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta76 = rs50.getMetaData();
2024-04-21 21:31:36.090287+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:36.090318+03:00 jdbc[13]: 
/**/rsMeta76.getColumnType(4);
2024-04-21 21:31:36.090346+03:00 jdbc[13]: 
/**/rs50.getString(4);
2024-04-21 21:31:36.090383+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta77 = rs50.getMetaData();
2024-04-21 21:31:36.090408+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:36.090439+03:00 jdbc[13]: 
/**/rsMeta77.getColumnType(5);
2024-04-21 21:31:36.090466+03:00 jdbc[13]: 
/**/rs50.getString(5);
2024-04-21 21:31:36.090501+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta78 = rs50.getMetaData();
2024-04-21 21:31:36.090530+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:36.090556+03:00 jdbc[13]: 
/**/rsMeta78.getColumnType(6);
2024-04-21 21:31:36.090587+03:00 jdbc[13]: 
/**/rs50.getString(6);
2024-04-21 21:31:36.090620+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta79 = rs50.getMetaData();
2024-04-21 21:31:36.090645+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:36.090675+03:00 jdbc[13]: 
/**/rsMeta79.getColumnType(7);
2024-04-21 21:31:36.090701+03:00 jdbc[13]: 
/**/rs50.getString(7);
2024-04-21 21:31:36.090731+03:00 jdbc[13]: 
/**/rs50.next();
2024-04-21 21:31:36.090758+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta80 = rs50.getMetaData();
2024-04-21 21:31:36.090786+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:36.090812+03:00 jdbc[13]: 
/**/rsMeta80.getColumnType(1);
2024-04-21 21:31:36.090843+03:00 jdbc[13]: 
/**/rs50.getString(1);
2024-04-21 21:31:36.090875+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta81 = rs50.getMetaData();
2024-04-21 21:31:36.090900+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:36.090930+03:00 jdbc[13]: 
/**/rsMeta81.getColumnType(2);
2024-04-21 21:31:36.090955+03:00 jdbc[13]: 
/**/rs50.getString(2);
2024-04-21 21:31:36.090989+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta82 = rs50.getMetaData();
2024-04-21 21:31:36.091017+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:36.091044+03:00 jdbc[13]: 
/**/rsMeta82.getColumnType(3);
2024-04-21 21:31:36.091075+03:00 jdbc[13]: 
/**/rs50.getString(3);
2024-04-21 21:31:36.091105+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta83 = rs50.getMetaData();
2024-04-21 21:31:36.091134+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:36.091159+03:00 jdbc[13]: 
/**/rsMeta83.getColumnType(4);
2024-04-21 21:31:36.091190+03:00 jdbc[13]: 
/**/rs50.getString(4);
2024-04-21 21:31:36.091221+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta84 = rs50.getMetaData();
2024-04-21 21:31:36.091248+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:36.091278+03:00 jdbc[13]: 
/**/rsMeta84.getColumnType(5);
2024-04-21 21:31:36.091305+03:00 jdbc[13]: 
/**/rs50.getString(5);
2024-04-21 21:31:36.091338+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta85 = rs50.getMetaData();
2024-04-21 21:31:36.091362+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:36.091409+03:00 jdbc[13]: 
/**/rsMeta85.getColumnType(6);
2024-04-21 21:31:36.091438+03:00 jdbc[13]: 
/**/rs50.getString(6);
2024-04-21 21:31:36.091472+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta86 = rs50.getMetaData();
2024-04-21 21:31:36.091500+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:36.091526+03:00 jdbc[13]: 
/**/rsMeta86.getColumnType(7);
2024-04-21 21:31:36.091558+03:00 jdbc[13]: 
/**/rs50.getString(7);
2024-04-21 21:31:36.091583+03:00 jdbc[13]: 
/**/rs50.next();
2024-04-21 21:31:36.091615+03:00 jdbc[13]: 
/**/rs50.getConcurrency();
2024-04-21 21:31:36.091638+03:00 jdbc[13]: 
/**/rs50.close();
2024-04-21 21:31:36.091676+03:00 jdbc[13]: 
/**/stat5.close();
2024-04-21 21:31:36.091731+03:00 jdbc[13]: 
/**/Statement stat6 = conn10.createStatement();
2024-04-21 21:31:36.091769+03:00 jdbc[13]: 
/**/stat6.setMaxRows(1000);
2024-04-21 21:31:36.091803+03:00 jdbc[13]: 
/**/stat6.execute("UPDATE locations SET trashed=true WHERE code = 'NYC_US'");
2024-04-21 21:31:36.092129+03:00 lock: 13 shared write requesting for LOCATIONS 
2024-04-21 21:31:36.092253+03:00 lock: 13 shared write ok LOCATIONS 
2024-04-21 21:31:36.092367+03:00 jdbc[13]: 
/*SQL */UPDATE locations SET trashed=true WHERE code = 'NYC_US';
2024-04-21 21:31:36.092552+03:00 lock: 13 shared write unlock LOCATIONS 
2024-04-21 21:31:36.092607+03:00 jdbc[13]: 
/**/stat6.getLargeUpdateCount();
2024-04-21 21:31:36.092667+03:00 jdbc[13]: 
/**/stat6.close();
2024-04-21 21:31:59.607586+03:00 jdbc[13]: 
/**/Statement stat7 = conn10.createStatement();
2024-04-21 21:31:59.607941+03:00 jdbc[13]: 
/**/stat7.setMaxRows(1000);
2024-04-21 21:31:59.608006+03:00 jdbc[13]: 
/**/stat7.execute("UPDATE locations SET trashed=true WHERE code = 'NYC_US'");
2024-04-21 21:31:59.608339+03:00 lock: 13 shared write requesting for LOCATIONS 
2024-04-21 21:31:59.608460+03:00 lock: 13 shared write ok LOCATIONS 
2024-04-21 21:31:59.608562+03:00 jdbc[13]: 
/*SQL */UPDATE locations SET trashed=true WHERE code = 'NYC_US';
2024-04-21 21:31:59.608716+03:00 lock: 13 shared write unlock LOCATIONS 
2024-04-21 21:31:59.610467+03:00 jdbc[13]: 
/**/stat7.getLargeUpdateCount();
2024-04-21 21:31:59.610563+03:00 jdbc[13]: 
/**/stat7.close();
2024-04-21 21:31:59.610626+03:00 jdbc[13]: 
/**/Statement stat8 = conn10.createStatement();
2024-04-21 21:31:59.610670+03:00 jdbc[13]: 
/**/stat8.setMaxRows(1000);
2024-04-21 21:31:59.610695+03:00 jdbc[13]: 
/**/stat8.execute("SELECT * FROM LOCATIONS");
2024-04-21 21:31:59.610947+03:00 jdbc[13]: 
/*SQL #:4*/SELECT * FROM LOCATIONS;
2024-04-21 21:31:59.611052+03:00 jdbc[13]: 
/**/ResultSet rs53 = stat8.getResultSet();
2024-04-21 21:31:59.611092+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta87 = rs53.getMetaData();
2024-04-21 21:31:59.611116+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:59.611146+03:00 jdbc[13]: 
/**/rsMeta87.getColumnCount();
2024-04-21 21:31:59.611175+03:00 jdbc[13]: 
/**/rsMeta87.getColumnLabel(1);
2024-04-21 21:31:59.611203+03:00 jdbc[13]: 
/**/rsMeta87.getColumnLabel(2);
2024-04-21 21:31:59.611233+03:00 jdbc[13]: 
/**/rsMeta87.getColumnLabel(3);
2024-04-21 21:31:59.611258+03:00 jdbc[13]: 
/**/rsMeta87.getColumnLabel(4);
2024-04-21 21:31:59.611287+03:00 jdbc[13]: 
/**/rsMeta87.getColumnLabel(5);
2024-04-21 21:31:59.611315+03:00 jdbc[13]: 
/**/rsMeta87.getColumnLabel(6);
2024-04-21 21:31:59.611339+03:00 jdbc[13]: 
/**/rsMeta87.getColumnLabel(7);
2024-04-21 21:31:59.611368+03:00 jdbc[13]: 
/**/rs53.next();
2024-04-21 21:31:59.611395+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta88 = rs53.getMetaData();
2024-04-21 21:31:59.611422+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:59.611450+03:00 jdbc[13]: 
/**/rsMeta88.getColumnType(1);
2024-04-21 21:31:59.611477+03:00 jdbc[13]: 
/**/rs53.getString(1);
2024-04-21 21:31:59.611509+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta89 = rs53.getMetaData();
2024-04-21 21:31:59.611532+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:59.611560+03:00 jdbc[13]: 
/**/rsMeta89.getColumnType(2);
2024-04-21 21:31:59.611585+03:00 jdbc[13]: 
/**/rs53.getString(2);
2024-04-21 21:31:59.611617+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta90 = rs53.getMetaData();
2024-04-21 21:31:59.611642+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:59.611666+03:00 jdbc[13]: 
/**/rsMeta90.getColumnType(3);
2024-04-21 21:31:59.611693+03:00 jdbc[13]: 
/**/rs53.getString(3);
2024-04-21 21:31:59.611719+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta91 = rs53.getMetaData();
2024-04-21 21:31:59.611746+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:59.611773+03:00 jdbc[13]: 
/**/rsMeta91.getColumnType(4);
2024-04-21 21:31:59.611796+03:00 jdbc[13]: 
/**/rs53.getString(4);
2024-04-21 21:31:59.611826+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta92 = rs53.getMetaData();
2024-04-21 21:31:59.611849+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:59.611877+03:00 jdbc[13]: 
/**/rsMeta92.getColumnType(5);
2024-04-21 21:31:59.611925+03:00 jdbc[13]: 
/**/rs53.getString(5);
2024-04-21 21:31:59.611979+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta93 = rs53.getMetaData();
2024-04-21 21:31:59.612016+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:59.612052+03:00 jdbc[13]: 
/**/rsMeta93.getColumnType(6);
2024-04-21 21:31:59.612092+03:00 jdbc[13]: 
/**/rs53.getString(6);
2024-04-21 21:31:59.612154+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta94 = rs53.getMetaData();
2024-04-21 21:31:59.612181+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:59.612209+03:00 jdbc[13]: 
/**/rsMeta94.getColumnType(7);
2024-04-21 21:31:59.612238+03:00 jdbc[13]: 
/**/rs53.getString(7);
2024-04-21 21:31:59.612261+03:00 jdbc[13]: 
/**/rs53.next();
2024-04-21 21:31:59.612290+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta95 = rs53.getMetaData();
2024-04-21 21:31:59.612316+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:59.612340+03:00 jdbc[13]: 
/**/rsMeta95.getColumnType(1);
2024-04-21 21:31:59.612368+03:00 jdbc[13]: 
/**/rs53.getString(1);
2024-04-21 21:31:59.612393+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta96 = rs53.getMetaData();
2024-04-21 21:31:59.612420+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:59.612443+03:00 jdbc[13]: 
/**/rsMeta96.getColumnType(2);
2024-04-21 21:31:59.612471+03:00 jdbc[13]: 
/**/rs53.getString(2);
2024-04-21 21:31:59.612501+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta97 = rs53.getMetaData();
2024-04-21 21:31:59.612523+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:59.612561+03:00 jdbc[13]: 
/**/rsMeta97.getColumnType(3);
2024-04-21 21:31:59.612583+03:00 jdbc[13]: 
/**/rs53.getString(3);
2024-04-21 21:31:59.612612+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta98 = rs53.getMetaData();
2024-04-21 21:31:59.612636+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:59.612658+03:00 jdbc[13]: 
/**/rsMeta98.getColumnType(4);
2024-04-21 21:31:59.612683+03:00 jdbc[13]: 
/**/rs53.getString(4);
2024-04-21 21:31:59.612708+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta99 = rs53.getMetaData();
2024-04-21 21:31:59.612732+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:59.612754+03:00 jdbc[13]: 
/**/rsMeta99.getColumnType(5);
2024-04-21 21:31:59.612782+03:00 jdbc[13]: 
/**/rs53.getString(5);
2024-04-21 21:31:59.612806+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta100 = rs53.getMetaData();
2024-04-21 21:31:59.612831+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:59.612857+03:00 jdbc[13]: 
/**/rsMeta100.getColumnType(6);
2024-04-21 21:31:59.612879+03:00 jdbc[13]: 
/**/rs53.getString(6);
2024-04-21 21:31:59.612907+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta101 = rs53.getMetaData();
2024-04-21 21:31:59.612928+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:59.612954+03:00 jdbc[13]: 
/**/rsMeta101.getColumnType(7);
2024-04-21 21:31:59.612976+03:00 jdbc[13]: 
/**/rs53.getString(7);
2024-04-21 21:31:59.613002+03:00 jdbc[13]: 
/**/rs53.next();
2024-04-21 21:31:59.613028+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta102 = rs53.getMetaData();
2024-04-21 21:31:59.613049+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:59.613075+03:00 jdbc[13]: 
/**/rsMeta102.getColumnType(1);
2024-04-21 21:31:59.613097+03:00 jdbc[13]: 
/**/rs53.getString(1);
2024-04-21 21:31:59.613126+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta103 = rs53.getMetaData();
2024-04-21 21:31:59.613146+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:59.613173+03:00 jdbc[13]: 
/**/rsMeta103.getColumnType(2);
2024-04-21 21:31:59.613198+03:00 jdbc[13]: 
/**/rs53.getString(2);
2024-04-21 21:31:59.613222+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta104 = rs53.getMetaData();
2024-04-21 21:31:59.613247+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:59.613268+03:00 jdbc[13]: 
/**/rsMeta104.getColumnType(3);
2024-04-21 21:31:59.613294+03:00 jdbc[13]: 
/**/rs53.getString(3);
2024-04-21 21:31:59.613318+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta105 = rs53.getMetaData();
2024-04-21 21:31:59.613342+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:59.613367+03:00 jdbc[13]: 
/**/rsMeta105.getColumnType(4);
2024-04-21 21:31:59.613389+03:00 jdbc[13]: 
/**/rs53.getString(4);
2024-04-21 21:31:59.613417+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta106 = rs53.getMetaData();
2024-04-21 21:31:59.613437+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:59.613463+03:00 jdbc[13]: 
/**/rsMeta106.getColumnType(5);
2024-04-21 21:31:59.613484+03:00 jdbc[13]: 
/**/rs53.getString(5);
2024-04-21 21:31:59.613514+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta107 = rs53.getMetaData();
2024-04-21 21:31:59.613540+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:59.613562+03:00 jdbc[13]: 
/**/rsMeta107.getColumnType(6);
2024-04-21 21:31:59.613588+03:00 jdbc[13]: 
/**/rs53.getString(6);
2024-04-21 21:31:59.613629+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta108 = rs53.getMetaData();
2024-04-21 21:31:59.613652+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:59.613679+03:00 jdbc[13]: 
/**/rsMeta108.getColumnType(7);
2024-04-21 21:31:59.613702+03:00 jdbc[13]: 
/**/rs53.getString(7);
2024-04-21 21:31:59.613731+03:00 jdbc[13]: 
/**/rs53.next();
2024-04-21 21:31:59.613756+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta109 = rs53.getMetaData();
2024-04-21 21:31:59.613782+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:59.613804+03:00 jdbc[13]: 
/**/rsMeta109.getColumnType(1);
2024-04-21 21:31:59.613834+03:00 jdbc[13]: 
/**/rs53.getString(1);
2024-04-21 21:31:59.613864+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta110 = rs53.getMetaData();
2024-04-21 21:31:59.613886+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:59.613914+03:00 jdbc[13]: 
/**/rsMeta110.getColumnType(2);
2024-04-21 21:31:59.613952+03:00 jdbc[13]: 
/**/rs53.getString(2);
2024-04-21 21:31:59.613983+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta111 = rs53.getMetaData();
2024-04-21 21:31:59.614009+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:59.614032+03:00 jdbc[13]: 
/**/rsMeta111.getColumnType(3);
2024-04-21 21:31:59.614072+03:00 jdbc[13]: 
/**/rs53.getString(3);
2024-04-21 21:31:59.614275+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta112 = rs53.getMetaData();
2024-04-21 21:31:59.614319+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:59.614348+03:00 jdbc[13]: 
/**/rsMeta112.getColumnType(4);
2024-04-21 21:31:59.614381+03:00 jdbc[13]: 
/**/rs53.getString(4);
2024-04-21 21:31:59.614425+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta113 = rs53.getMetaData();
2024-04-21 21:31:59.614447+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:59.614471+03:00 jdbc[13]: 
/**/rsMeta113.getColumnType(5);
2024-04-21 21:31:59.614496+03:00 jdbc[13]: 
/**/rs53.getString(5);
2024-04-21 21:31:59.614524+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta114 = rs53.getMetaData();
2024-04-21 21:31:59.614552+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:59.614581+03:00 jdbc[13]: 
/**/rsMeta114.getColumnType(6);
2024-04-21 21:31:59.614609+03:00 jdbc[13]: 
/**/rs53.getString(6);
2024-04-21 21:31:59.614638+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta115 = rs53.getMetaData();
2024-04-21 21:31:59.614665+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:31:59.614689+03:00 jdbc[13]: 
/**/rsMeta115.getColumnType(7);
2024-04-21 21:31:59.614718+03:00 jdbc[13]: 
/**/rs53.getString(7);
2024-04-21 21:31:59.614741+03:00 jdbc[13]: 
/**/rs53.next();
2024-04-21 21:31:59.614771+03:00 jdbc[13]: 
/**/rs53.getConcurrency();
2024-04-21 21:31:59.614794+03:00 jdbc[13]: 
/**/rs53.close();
2024-04-21 21:31:59.614824+03:00 jdbc[13]: 
/**/stat8.close();
2024-04-21 21:32:24.773580+03:00 jdbc[13]: 
/**/Statement stat9 = conn10.createStatement();
2024-04-21 21:32:24.774008+03:00 jdbc[13]: 
/**/stat9.setMaxRows(1000);
2024-04-21 21:32:24.774066+03:00 jdbc[13]: 
/**/stat9.execute("UPDATE locations SET trashed=true WHERE code = 'NY_US'");
2024-04-21 21:32:24.774476+03:00 jdbc[13]: Table      :     potential plan item cost 10,240 index PUBLIC.LOCATIONS.tableScan
2024-04-21 21:32:24.774630+03:00 jdbc[13]: Table      :     potential plan item cost 40 index PUBLIC.PRIMARY_KEY_5
2024-04-21 21:32:24.774882+03:00 lock: 13 shared write requesting for LOCATIONS 
2024-04-21 21:32:24.774986+03:00 lock: 13 shared write ok LOCATIONS 
2024-04-21 21:32:24.776628+03:00 jdbc[13]: 
/*SQL #:1 t:1*/UPDATE locations SET trashed=true WHERE code = 'NY_US';
2024-04-21 21:32:24.777283+03:00 lock: 13 shared write unlock LOCATIONS 
2024-04-21 21:32:24.777371+03:00 jdbc[13]: 
/**/stat9.getLargeUpdateCount();
2024-04-21 21:32:24.777401+03:00 jdbc[13]: 
/**/stat9.close();
2024-04-21 21:32:24.777450+03:00 jdbc[13]: 
/**/Statement stat10 = conn10.createStatement();
2024-04-21 21:32:24.777492+03:00 jdbc[13]: 
/**/stat10.setMaxRows(1000);
2024-04-21 21:32:24.777518+03:00 jdbc[13]: 
/**/stat10.execute("SELECT * FROM LOCATIONS");
2024-04-21 21:32:24.777735+03:00 jdbc[13]: 
/*SQL #:4*/SELECT * FROM LOCATIONS;
2024-04-21 21:32:24.777824+03:00 jdbc[13]: 
/**/ResultSet rs55 = stat10.getResultSet();
2024-04-21 21:32:24.777862+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta116 = rs55.getMetaData();
2024-04-21 21:32:24.777886+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:24.777916+03:00 jdbc[13]: 
/**/rsMeta116.getColumnCount();
2024-04-21 21:32:24.777944+03:00 jdbc[13]: 
/**/rsMeta116.getColumnLabel(1);
2024-04-21 21:32:24.777972+03:00 jdbc[13]: 
/**/rsMeta116.getColumnLabel(2);
2024-04-21 21:32:24.778017+03:00 jdbc[13]: 
/**/rsMeta116.getColumnLabel(3);
2024-04-21 21:32:24.778040+03:00 jdbc[13]: 
/**/rsMeta116.getColumnLabel(4);
2024-04-21 21:32:24.778068+03:00 jdbc[13]: 
/**/rsMeta116.getColumnLabel(5);
2024-04-21 21:32:24.778095+03:00 jdbc[13]: 
/**/rsMeta116.getColumnLabel(6);
2024-04-21 21:32:24.778119+03:00 jdbc[13]: 
/**/rsMeta116.getColumnLabel(7);
2024-04-21 21:32:24.778147+03:00 jdbc[13]: 
/**/rs55.next();
2024-04-21 21:32:24.778175+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta117 = rs55.getMetaData();
2024-04-21 21:32:24.778202+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:24.778227+03:00 jdbc[13]: 
/**/rsMeta117.getColumnType(1);
2024-04-21 21:32:24.778258+03:00 jdbc[13]: 
/**/rs55.getString(1);
2024-04-21 21:32:24.778292+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta118 = rs55.getMetaData();
2024-04-21 21:32:24.778315+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:24.778338+03:00 jdbc[13]: 
/**/rsMeta118.getColumnType(2);
2024-04-21 21:32:24.778385+03:00 jdbc[13]: 
/**/rs55.getString(2);
2024-04-21 21:32:24.778415+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta119 = rs55.getMetaData();
2024-04-21 21:32:24.778441+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:24.778467+03:00 jdbc[13]: 
/**/rsMeta119.getColumnType(3);
2024-04-21 21:32:24.778492+03:00 jdbc[13]: 
/**/rs55.getString(3);
2024-04-21 21:32:24.778522+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta120 = rs55.getMetaData();
2024-04-21 21:32:24.778546+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:24.778575+03:00 jdbc[13]: 
/**/rsMeta120.getColumnType(4);
2024-04-21 21:32:24.778603+03:00 jdbc[13]: 
/**/rs55.getString(4);
2024-04-21 21:32:24.778631+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta121 = rs55.getMetaData();
2024-04-21 21:32:24.778658+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:24.778681+03:00 jdbc[13]: 
/**/rsMeta121.getColumnType(5);
2024-04-21 21:32:24.778710+03:00 jdbc[13]: 
/**/rs55.getString(5);
2024-04-21 21:32:24.778738+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta122 = rs55.getMetaData();
2024-04-21 21:32:24.778764+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:24.778790+03:00 jdbc[13]: 
/**/rsMeta122.getColumnType(6);
2024-04-21 21:32:24.778814+03:00 jdbc[13]: 
/**/rs55.getString(6);
2024-04-21 21:32:24.778844+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta123 = rs55.getMetaData();
2024-04-21 21:32:24.778867+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:24.778895+03:00 jdbc[13]: 
/**/rsMeta123.getColumnType(7);
2024-04-21 21:32:24.778920+03:00 jdbc[13]: 
/**/rs55.getString(7);
2024-04-21 21:32:24.778948+03:00 jdbc[13]: 
/**/rs55.next();
2024-04-21 21:32:24.778977+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta124 = rs55.getMetaData();
2024-04-21 21:32:24.778999+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:24.779024+03:00 jdbc[13]: 
/**/rsMeta124.getColumnType(1);
2024-04-21 21:32:24.779048+03:00 jdbc[13]: 
/**/rs55.getString(1);
2024-04-21 21:32:24.779078+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta125 = rs55.getMetaData();
2024-04-21 21:32:24.779099+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:24.779127+03:00 jdbc[13]: 
/**/rsMeta125.getColumnType(2);
2024-04-21 21:32:24.779152+03:00 jdbc[13]: 
/**/rs55.getString(2);
2024-04-21 21:32:24.779184+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta126 = rs55.getMetaData();
2024-04-21 21:32:24.779217+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:24.779241+03:00 jdbc[13]: 
/**/rsMeta126.getColumnType(3);
2024-04-21 21:32:24.779270+03:00 jdbc[13]: 
/**/rs55.getString(3);
2024-04-21 21:32:24.779313+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta127 = rs55.getMetaData();
2024-04-21 21:32:24.779340+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:24.779367+03:00 jdbc[13]: 
/**/rsMeta127.getColumnType(4);
2024-04-21 21:32:24.779391+03:00 jdbc[13]: 
/**/rs55.getString(4);
2024-04-21 21:32:24.779421+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta128 = rs55.getMetaData();
2024-04-21 21:32:24.779443+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:24.779470+03:00 jdbc[13]: 
/**/rsMeta128.getColumnType(5);
2024-04-21 21:32:24.779494+03:00 jdbc[13]: 
/**/rs55.getString(5);
2024-04-21 21:32:24.779524+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta129 = rs55.getMetaData();
2024-04-21 21:32:24.779550+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:24.779575+03:00 jdbc[13]: 
/**/rsMeta129.getColumnType(6);
2024-04-21 21:32:24.779602+03:00 jdbc[13]: 
/**/rs55.getString(6);
2024-04-21 21:32:24.779627+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta130 = rs55.getMetaData();
2024-04-21 21:32:24.779652+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:24.779674+03:00 jdbc[13]: 
/**/rsMeta130.getColumnType(7);
2024-04-21 21:32:24.779701+03:00 jdbc[13]: 
/**/rs55.getString(7);
2024-04-21 21:32:24.779729+03:00 jdbc[13]: 
/**/rs55.next();
2024-04-21 21:32:24.779753+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta131 = rs55.getMetaData();
2024-04-21 21:32:24.779777+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:24.779798+03:00 jdbc[13]: 
/**/rsMeta131.getColumnType(1);
2024-04-21 21:32:24.779824+03:00 jdbc[13]: 
/**/rs55.getString(1);
2024-04-21 21:32:24.779850+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta132 = rs55.getMetaData();
2024-04-21 21:32:24.779875+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:24.779901+03:00 jdbc[13]: 
/**/rsMeta132.getColumnType(2);
2024-04-21 21:32:24.779925+03:00 jdbc[13]: 
/**/rs55.getString(2);
2024-04-21 21:32:24.779954+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta133 = rs55.getMetaData();
2024-04-21 21:32:24.779974+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:24.779999+03:00 jdbc[13]: 
/**/rsMeta133.getColumnType(3);
2024-04-21 21:32:24.780021+03:00 jdbc[13]: 
/**/rs55.getString(3);
2024-04-21 21:32:24.780049+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta134 = rs55.getMetaData();
2024-04-21 21:32:24.780073+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:24.780094+03:00 jdbc[13]: 
/**/rsMeta134.getColumnType(4);
2024-04-21 21:32:24.780119+03:00 jdbc[13]: 
/**/rs55.getString(4);
2024-04-21 21:32:24.780143+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta135 = rs55.getMetaData();
2024-04-21 21:32:24.780168+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:24.780188+03:00 jdbc[13]: 
/**/rsMeta135.getColumnType(5);
2024-04-21 21:32:24.780214+03:00 jdbc[13]: 
/**/rs55.getString(5);
2024-04-21 21:32:24.780243+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta136 = rs55.getMetaData();
2024-04-21 21:32:24.780264+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:24.780289+03:00 jdbc[13]: 
/**/rsMeta136.getColumnType(6);
2024-04-21 21:32:24.780311+03:00 jdbc[13]: 
/**/rs55.getString(6);
2024-04-21 21:32:24.780339+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta137 = rs55.getMetaData();
2024-04-21 21:32:24.780364+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:24.780384+03:00 jdbc[13]: 
/**/rsMeta137.getColumnType(7);
2024-04-21 21:32:24.780410+03:00 jdbc[13]: 
/**/rs55.getString(7);
2024-04-21 21:32:24.780432+03:00 jdbc[13]: 
/**/rs55.next();
2024-04-21 21:32:24.780459+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta138 = rs55.getMetaData();
2024-04-21 21:32:24.780479+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:24.780505+03:00 jdbc[13]: 
/**/rsMeta138.getColumnType(1);
2024-04-21 21:32:24.780530+03:00 jdbc[13]: 
/**/rs55.getString(1);
2024-04-21 21:32:24.780557+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta139 = rs55.getMetaData();
2024-04-21 21:32:24.780582+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:24.780605+03:00 jdbc[13]: 
/**/rsMeta139.getColumnType(2);
2024-04-21 21:32:24.780631+03:00 jdbc[13]: 
/**/rs55.getString(2);
2024-04-21 21:32:24.780654+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta140 = rs55.getMetaData();
2024-04-21 21:32:24.780679+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:24.780704+03:00 jdbc[13]: 
/**/rsMeta140.getColumnType(3);
2024-04-21 21:32:24.780726+03:00 jdbc[13]: 
/**/rs55.getString(3);
2024-04-21 21:32:24.780754+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta141 = rs55.getMetaData();
2024-04-21 21:32:24.780776+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:24.780803+03:00 jdbc[13]: 
/**/rsMeta141.getColumnType(4);
2024-04-21 21:32:24.780825+03:00 jdbc[13]: 
/**/rs55.getString(4);
2024-04-21 21:32:24.780854+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta142 = rs55.getMetaData();
2024-04-21 21:32:24.780878+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:24.780899+03:00 jdbc[13]: 
/**/rsMeta142.getColumnType(5);
2024-04-21 21:32:24.780925+03:00 jdbc[13]: 
/**/rs55.getString(5);
2024-04-21 21:32:24.780949+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta143 = rs55.getMetaData();
2024-04-21 21:32:24.780973+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:24.780994+03:00 jdbc[13]: 
/**/rsMeta143.getColumnType(6);
2024-04-21 21:32:24.781020+03:00 jdbc[13]: 
/**/rs55.getString(6);
2024-04-21 21:32:24.781048+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta144 = rs55.getMetaData();
2024-04-21 21:32:24.781069+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:24.781094+03:00 jdbc[13]: 
/**/rsMeta144.getColumnType(7);
2024-04-21 21:32:24.781116+03:00 jdbc[13]: 
/**/rs55.getString(7);
2024-04-21 21:32:24.781142+03:00 jdbc[13]: 
/**/rs55.next();
2024-04-21 21:32:24.781164+03:00 jdbc[13]: 
/**/rs55.getConcurrency();
2024-04-21 21:32:24.781189+03:00 jdbc[13]: 
/**/rs55.close();
2024-04-21 21:32:24.781219+03:00 jdbc[13]: 
/**/stat10.close();
2024-04-21 21:32:59.895673+03:00 jdbc[13]: 
/**/Statement stat11 = conn10.createStatement();
2024-04-21 21:32:59.896040+03:00 jdbc[13]: 
/**/stat11.setMaxRows(1000);
2024-04-21 21:32:59.896264+03:00 jdbc[13]: 
/**/stat11.execute("UPDATE locations SET trashed=true WHERE code = 'NY_US'");
2024-04-21 21:32:59.896630+03:00 lock: 13 shared write requesting for LOCATIONS 
2024-04-21 21:32:59.896775+03:00 lock: 13 shared write ok LOCATIONS 
2024-04-21 21:32:59.897308+03:00 jdbc[13]: 
/*SQL #:1*/UPDATE locations SET trashed=true WHERE code = 'NY_US';
2024-04-21 21:32:59.897777+03:00 lock: 13 shared write unlock LOCATIONS 
2024-04-21 21:32:59.897868+03:00 jdbc[13]: 
/**/stat11.getLargeUpdateCount();
2024-04-21 21:32:59.897907+03:00 jdbc[13]: 
/**/stat11.close();
2024-04-21 21:32:59.897959+03:00 jdbc[13]: 
/**/Statement stat12 = conn10.createStatement();
2024-04-21 21:32:59.897997+03:00 jdbc[13]: 
/**/stat12.setMaxRows(1000);
2024-04-21 21:32:59.898028+03:00 jdbc[13]: 
/**/stat12.execute("SELECT * FROM LOCATIONS");
2024-04-21 21:32:59.898290+03:00 jdbc[13]: 
/*SQL #:4*/SELECT * FROM LOCATIONS;
2024-04-21 21:32:59.898390+03:00 jdbc[13]: 
/**/ResultSet rs57 = stat12.getResultSet();
2024-04-21 21:32:59.898431+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta145 = rs57.getMetaData();
2024-04-21 21:32:59.898455+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:59.898482+03:00 jdbc[13]: 
/**/rsMeta145.getColumnCount();
2024-04-21 21:32:59.898505+03:00 jdbc[13]: 
/**/rsMeta145.getColumnLabel(1);
2024-04-21 21:32:59.898535+03:00 jdbc[13]: 
/**/rsMeta145.getColumnLabel(2);
2024-04-21 21:32:59.898559+03:00 jdbc[13]: 
/**/rsMeta145.getColumnLabel(3);
2024-04-21 21:32:59.898587+03:00 jdbc[13]: 
/**/rsMeta145.getColumnLabel(4);
2024-04-21 21:32:59.898613+03:00 jdbc[13]: 
/**/rsMeta145.getColumnLabel(5);
2024-04-21 21:32:59.898635+03:00 jdbc[13]: 
/**/rsMeta145.getColumnLabel(6);
2024-04-21 21:32:59.898662+03:00 jdbc[13]: 
/**/rsMeta145.getColumnLabel(7);
2024-04-21 21:32:59.898692+03:00 jdbc[13]: 
/**/rs57.next();
2024-04-21 21:32:59.898719+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta146 = rs57.getMetaData();
2024-04-21 21:32:59.898744+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:59.898768+03:00 jdbc[13]: 
/**/rsMeta146.getColumnType(1);
2024-04-21 21:32:59.898798+03:00 jdbc[13]: 
/**/rs57.getString(1);
2024-04-21 21:32:59.898827+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta147 = rs57.getMetaData();
2024-04-21 21:32:59.898853+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:59.898879+03:00 jdbc[13]: 
/**/rsMeta147.getColumnType(2);
2024-04-21 21:32:59.898902+03:00 jdbc[13]: 
/**/rs57.getString(2);
2024-04-21 21:32:59.898933+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta148 = rs57.getMetaData();
2024-04-21 21:32:59.898954+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:59.898979+03:00 jdbc[13]: 
/**/rsMeta148.getColumnType(3);
2024-04-21 21:32:59.899002+03:00 jdbc[13]: 
/**/rs57.getString(3);
2024-04-21 21:32:59.899031+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta149 = rs57.getMetaData();
2024-04-21 21:32:59.899057+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:59.899079+03:00 jdbc[13]: 
/**/rsMeta149.getColumnType(4);
2024-04-21 21:32:59.899105+03:00 jdbc[13]: 
/**/rs57.getString(4);
2024-04-21 21:32:59.899130+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta150 = rs57.getMetaData();
2024-04-21 21:32:59.899150+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:59.899168+03:00 jdbc[13]: 
/**/rsMeta150.getColumnType(5);
2024-04-21 21:32:59.899183+03:00 jdbc[13]: 
/**/rs57.getString(5);
2024-04-21 21:32:59.899202+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta151 = rs57.getMetaData();
2024-04-21 21:32:59.899217+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:59.899234+03:00 jdbc[13]: 
/**/rsMeta151.getColumnType(6);
2024-04-21 21:32:59.899248+03:00 jdbc[13]: 
/**/rs57.getString(6);
2024-04-21 21:32:59.899268+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta152 = rs57.getMetaData();
2024-04-21 21:32:59.899284+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:59.899299+03:00 jdbc[13]: 
/**/rsMeta152.getColumnType(7);
2024-04-21 21:32:59.899316+03:00 jdbc[13]: 
/**/rs57.getString(7);
2024-04-21 21:32:59.899330+03:00 jdbc[13]: 
/**/rs57.next();
2024-04-21 21:32:59.899349+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta153 = rs57.getMetaData();
2024-04-21 21:32:59.899363+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:59.899389+03:00 jdbc[13]: 
/**/rsMeta153.getColumnType(1);
2024-04-21 21:32:59.899404+03:00 jdbc[13]: 
/**/rs57.getString(1);
2024-04-21 21:32:59.899423+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta154 = rs57.getMetaData();
2024-04-21 21:32:59.899440+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:59.899454+03:00 jdbc[13]: 
/**/rsMeta154.getColumnType(2);
2024-04-21 21:32:59.899471+03:00 jdbc[13]: 
/**/rs57.getString(2);
2024-04-21 21:32:59.899487+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta155 = rs57.getMetaData();
2024-04-21 21:32:59.899504+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:59.899518+03:00 jdbc[13]: 
/**/rsMeta155.getColumnType(3);
2024-04-21 21:32:59.899536+03:00 jdbc[13]: 
/**/rs57.getString(3);
2024-04-21 21:32:59.899554+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta156 = rs57.getMetaData();
2024-04-21 21:32:59.899568+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:59.899585+03:00 jdbc[13]: 
/**/rsMeta156.getColumnType(4);
2024-04-21 21:32:59.899599+03:00 jdbc[13]: 
/**/rs57.getString(4);
2024-04-21 21:32:59.899619+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta157 = rs57.getMetaData();
2024-04-21 21:32:59.899635+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:59.899649+03:00 jdbc[13]: 
/**/rsMeta157.getColumnType(5);
2024-04-21 21:32:59.899666+03:00 jdbc[13]: 
/**/rs57.getString(5);
2024-04-21 21:32:59.899682+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta158 = rs57.getMetaData();
2024-04-21 21:32:59.899699+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:59.899713+03:00 jdbc[13]: 
/**/rsMeta158.getColumnType(6);
2024-04-21 21:32:59.899732+03:00 jdbc[13]: 
/**/rs57.getString(6);
2024-04-21 21:32:59.899751+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta159 = rs57.getMetaData();
2024-04-21 21:32:59.899765+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:59.899782+03:00 jdbc[13]: 
/**/rsMeta159.getColumnType(7);
2024-04-21 21:32:59.899797+03:00 jdbc[13]: 
/**/rs57.getString(7);
2024-04-21 21:32:59.899814+03:00 jdbc[13]: 
/**/rs57.next();
2024-04-21 21:32:59.899841+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta160 = rs57.getMetaData();
2024-04-21 21:32:59.899860+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:59.899874+03:00 jdbc[13]: 
/**/rsMeta160.getColumnType(1);
2024-04-21 21:32:59.899892+03:00 jdbc[13]: 
/**/rs57.getString(1);
2024-04-21 21:32:59.899911+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta161 = rs57.getMetaData();
2024-04-21 21:32:59.899925+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:59.899942+03:00 jdbc[13]: 
/**/rsMeta161.getColumnType(2);
2024-04-21 21:32:59.899956+03:00 jdbc[13]: 
/**/rs57.getString(2);
2024-04-21 21:32:59.899976+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta162 = rs57.getMetaData();
2024-04-21 21:32:59.899990+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:59.900007+03:00 jdbc[13]: 
/**/rsMeta162.getColumnType(3);
2024-04-21 21:32:59.900024+03:00 jdbc[13]: 
/**/rs57.getString(3);
2024-04-21 21:32:59.900040+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta163 = rs57.getMetaData();
2024-04-21 21:32:59.900058+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:59.900074+03:00 jdbc[13]: 
/**/rsMeta163.getColumnType(4);
2024-04-21 21:32:59.900093+03:00 jdbc[13]: 
/**/rs57.getString(4);
2024-04-21 21:32:59.900112+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta164 = rs57.getMetaData();
2024-04-21 21:32:59.900126+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:59.900143+03:00 jdbc[13]: 
/**/rsMeta164.getColumnType(5);
2024-04-21 21:32:59.900158+03:00 jdbc[13]: 
/**/rs57.getString(5);
2024-04-21 21:32:59.900177+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta165 = rs57.getMetaData();
2024-04-21 21:32:59.900194+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:59.900209+03:00 jdbc[13]: 
/**/rsMeta165.getColumnType(6);
2024-04-21 21:32:59.900226+03:00 jdbc[13]: 
/**/rs57.getString(6);
2024-04-21 21:32:59.900241+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta166 = rs57.getMetaData();
2024-04-21 21:32:59.900258+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:59.900274+03:00 jdbc[13]: 
/**/rsMeta166.getColumnType(7);
2024-04-21 21:32:59.900293+03:00 jdbc[13]: 
/**/rs57.getString(7);
2024-04-21 21:32:59.900310+03:00 jdbc[13]: 
/**/rs57.next();
2024-04-21 21:32:59.900325+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta167 = rs57.getMetaData();
2024-04-21 21:32:59.900342+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:59.900356+03:00 jdbc[13]: 
/**/rsMeta167.getColumnType(1);
2024-04-21 21:32:59.900373+03:00 jdbc[13]: 
/**/rs57.getString(1);
2024-04-21 21:32:59.900388+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta168 = rs57.getMetaData();
2024-04-21 21:32:59.900405+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:59.900421+03:00 jdbc[13]: 
/**/rsMeta168.getColumnType(2);
2024-04-21 21:32:59.900436+03:00 jdbc[13]: 
/**/rs57.getString(2);
2024-04-21 21:32:59.900454+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta169 = rs57.getMetaData();
2024-04-21 21:32:59.900468+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:59.900486+03:00 jdbc[13]: 
/**/rsMeta169.getColumnType(3);
2024-04-21 21:32:59.900502+03:00 jdbc[13]: 
/**/rs57.getString(3);
2024-04-21 21:32:59.900521+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta170 = rs57.getMetaData();
2024-04-21 21:32:59.900538+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:59.900555+03:00 jdbc[13]: 
/**/rsMeta170.getColumnType(4);
2024-04-21 21:32:59.900583+03:00 jdbc[13]: 
/**/rs57.getString(4);
2024-04-21 21:32:59.900606+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta171 = rs57.getMetaData();
2024-04-21 21:32:59.900630+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:59.900650+03:00 jdbc[13]: 
/**/rsMeta171.getColumnType(5);
2024-04-21 21:32:59.900693+03:00 jdbc[13]: 
/**/rs57.getString(5);
2024-04-21 21:32:59.900724+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta172 = rs57.getMetaData();
2024-04-21 21:32:59.900753+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:59.900775+03:00 jdbc[13]: 
/**/rsMeta172.getColumnType(6);
2024-04-21 21:32:59.900796+03:00 jdbc[13]: 
/**/rs57.getString(6);
2024-04-21 21:32:59.900812+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta173 = rs57.getMetaData();
2024-04-21 21:32:59.900829+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:32:59.900846+03:00 jdbc[13]: 
/**/rsMeta173.getColumnType(7);
2024-04-21 21:32:59.900862+03:00 jdbc[13]: 
/**/rs57.getString(7);
2024-04-21 21:32:59.900880+03:00 jdbc[13]: 
/**/rs57.next();
2024-04-21 21:32:59.900895+03:00 jdbc[13]: 
/**/rs57.getConcurrency();
2024-04-21 21:32:59.900913+03:00 jdbc[13]: 
/**/rs57.close();
2024-04-21 21:32:59.900933+03:00 jdbc[13]: 
/**/stat12.close();
2024-04-21 21:32:59.900969+03:00 jdbc[13]: 
/**/Statement stat13 = conn10.createStatement();
2024-04-21 21:32:59.900996+03:00 jdbc[13]: 
/**/stat13.setMaxRows(1000);
2024-04-21 21:32:59.901012+03:00 jdbc[13]: 
/**/stat13.execute("SELCT COUNT(*) FROM LOCATIONS");
2024-04-21 21:32:59.901265+03:00 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]SELCT COUNT(*) FROM LOCATIONS"; expected "SAVEPOINT, SCRIPT, SHUTDOWN"; SQL statement:
SELCT COUNT(*) FROM LOCATIONS [42001-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:514)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.getSyntaxError(DbException.java:261)
	at org.h2.command.ParserBase.getSyntaxError(ParserBase.java:750)
	at org.h2.command.Parser.parsePrepared(Parser.java:773)
	at org.h2.command.Parser.parse(Parser.java:592)
	at org.h2.command.Parser.parse(Parser.java:569)
	at org.h2.command.Parser.prepareCommand(Parser.java:483)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:639)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:559)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1166)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at org.h2.server.web.WebApp.getResult(WebApp.java:1345)
	at org.h2.server.web.WebApp.query(WebApp.java:1143)
	at org.h2.server.web.WebApp.query(WebApp.java:1119)
	at org.h2.server.web.WebApp.process(WebApp.java:245)
	at org.h2.server.web.WebApp.processRequest(WebApp.java:177)
	at org.h2.server.web.JakartaWebServlet.doGet(JakartaWebServlet.java:129)
	at org.h2.server.web.JakartaWebServlet.doPost(JakartaWebServlet.java:166)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:206)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:150)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:175)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:150)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:175)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:150)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:175)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:150)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:175)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:150)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1736)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-21 21:33:19.578786+03:00 jdbc[13]: 
/**/Statement stat14 = conn10.createStatement();
2024-04-21 21:33:19.579132+03:00 jdbc[13]: 
/**/stat14.setMaxRows(1000);
2024-04-21 21:33:19.579184+03:00 jdbc[13]: 
/**/stat14.execute("UPDATE locations SET trashed=true WHERE code = 'NY_US'");
2024-04-21 21:33:19.579521+03:00 lock: 13 shared write requesting for LOCATIONS 
2024-04-21 21:33:19.579637+03:00 lock: 13 shared write ok LOCATIONS 
2024-04-21 21:33:19.579991+03:00 jdbc[13]: 
/*SQL #:1*/UPDATE locations SET trashed=true WHERE code = 'NY_US';
2024-04-21 21:33:19.580273+03:00 lock: 13 shared write unlock LOCATIONS 
2024-04-21 21:33:19.580319+03:00 jdbc[13]: 
/**/stat14.getLargeUpdateCount();
2024-04-21 21:33:19.580341+03:00 jdbc[13]: 
/**/stat14.close();
2024-04-21 21:33:19.580375+03:00 jdbc[13]: 
/**/Statement stat15 = conn10.createStatement();
2024-04-21 21:33:19.580406+03:00 jdbc[13]: 
/**/stat15.setMaxRows(1000);
2024-04-21 21:33:19.580441+03:00 jdbc[13]: 
/**/stat15.execute("SELECT * FROM LOCATIONS");
2024-04-21 21:33:19.580646+03:00 jdbc[13]: 
/*SQL #:4*/SELECT * FROM LOCATIONS;
2024-04-21 21:33:19.580722+03:00 jdbc[13]: 
/**/ResultSet rs60 = stat15.getResultSet();
2024-04-21 21:33:19.580760+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta174 = rs60.getMetaData();
2024-04-21 21:33:19.580790+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.580816+03:00 jdbc[13]: 
/**/rsMeta174.getColumnCount();
2024-04-21 21:33:19.580845+03:00 jdbc[13]: 
/**/rsMeta174.getColumnLabel(1);
2024-04-21 21:33:19.580889+03:00 jdbc[13]: 
/**/rsMeta174.getColumnLabel(2);
2024-04-21 21:33:19.580922+03:00 jdbc[13]: 
/**/rsMeta174.getColumnLabel(3);
2024-04-21 21:33:19.580953+03:00 jdbc[13]: 
/**/rsMeta174.getColumnLabel(4);
2024-04-21 21:33:19.580975+03:00 jdbc[13]: 
/**/rsMeta174.getColumnLabel(5);
2024-04-21 21:33:19.580998+03:00 jdbc[13]: 
/**/rsMeta174.getColumnLabel(6);
2024-04-21 21:33:19.581017+03:00 jdbc[13]: 
/**/rsMeta174.getColumnLabel(7);
2024-04-21 21:33:19.581041+03:00 jdbc[13]: 
/**/rs60.next();
2024-04-21 21:33:19.581066+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta175 = rs60.getMetaData();
2024-04-21 21:33:19.581085+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.581108+03:00 jdbc[13]: 
/**/rsMeta175.getColumnType(1);
2024-04-21 21:33:19.581133+03:00 jdbc[13]: 
/**/rs60.getString(1);
2024-04-21 21:33:19.581162+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta176 = rs60.getMetaData();
2024-04-21 21:33:19.581192+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.581217+03:00 jdbc[13]: 
/**/rsMeta176.getColumnType(2);
2024-04-21 21:33:19.581241+03:00 jdbc[13]: 
/**/rs60.getString(2);
2024-04-21 21:33:19.581264+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta177 = rs60.getMetaData();
2024-04-21 21:33:19.581286+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.581311+03:00 jdbc[13]: 
/**/rsMeta177.getColumnType(3);
2024-04-21 21:33:19.581340+03:00 jdbc[13]: 
/**/rs60.getString(3);
2024-04-21 21:33:19.581364+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta178 = rs60.getMetaData();
2024-04-21 21:33:19.581384+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.581411+03:00 jdbc[13]: 
/**/rsMeta178.getColumnType(4);
2024-04-21 21:33:19.581435+03:00 jdbc[13]: 
/**/rs60.getString(4);
2024-04-21 21:33:19.581467+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta179 = rs60.getMetaData();
2024-04-21 21:33:19.581491+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.581522+03:00 jdbc[13]: 
/**/rsMeta179.getColumnType(5);
2024-04-21 21:33:19.581555+03:00 jdbc[13]: 
/**/rs60.getString(5);
2024-04-21 21:33:19.581577+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta180 = rs60.getMetaData();
2024-04-21 21:33:19.581598+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.581616+03:00 jdbc[13]: 
/**/rsMeta180.getColumnType(6);
2024-04-21 21:33:19.581638+03:00 jdbc[13]: 
/**/rs60.getString(6);
2024-04-21 21:33:19.581670+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta181 = rs60.getMetaData();
2024-04-21 21:33:19.581693+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.581714+03:00 jdbc[13]: 
/**/rsMeta181.getColumnType(7);
2024-04-21 21:33:19.581733+03:00 jdbc[13]: 
/**/rs60.getString(7);
2024-04-21 21:33:19.581757+03:00 jdbc[13]: 
/**/rs60.next();
2024-04-21 21:33:19.581776+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta182 = rs60.getMetaData();
2024-04-21 21:33:19.581797+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.581814+03:00 jdbc[13]: 
/**/rsMeta182.getColumnType(1);
2024-04-21 21:33:19.581837+03:00 jdbc[13]: 
/**/rs60.getString(1);
2024-04-21 21:33:19.581860+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta183 = rs60.getMetaData();
2024-04-21 21:33:19.581878+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.581898+03:00 jdbc[13]: 
/**/rsMeta183.getColumnType(2);
2024-04-21 21:33:19.581917+03:00 jdbc[13]: 
/**/rs60.getString(2);
2024-04-21 21:33:19.581941+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta184 = rs60.getMetaData();
2024-04-21 21:33:19.581971+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.582011+03:00 jdbc[13]: 
/**/rsMeta184.getColumnType(3);
2024-04-21 21:33:19.582034+03:00 jdbc[13]: 
/**/rs60.getString(3);
2024-04-21 21:33:19.582069+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta185 = rs60.getMetaData();
2024-04-21 21:33:19.582099+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.582125+03:00 jdbc[13]: 
/**/rsMeta185.getColumnType(4);
2024-04-21 21:33:19.582157+03:00 jdbc[13]: 
/**/rs60.getString(4);
2024-04-21 21:33:19.582187+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta186 = rs60.getMetaData();
2024-04-21 21:33:19.582218+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.582249+03:00 jdbc[13]: 
/**/rsMeta186.getColumnType(5);
2024-04-21 21:33:19.582278+03:00 jdbc[13]: 
/**/rs60.getString(5);
2024-04-21 21:33:19.582312+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta187 = rs60.getMetaData();
2024-04-21 21:33:19.582339+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.582368+03:00 jdbc[13]: 
/**/rsMeta187.getColumnType(6);
2024-04-21 21:33:19.582392+03:00 jdbc[13]: 
/**/rs60.getString(6);
2024-04-21 21:33:19.582444+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta188 = rs60.getMetaData();
2024-04-21 21:33:19.582478+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.582529+03:00 jdbc[13]: 
/**/rsMeta188.getColumnType(7);
2024-04-21 21:33:19.582570+03:00 jdbc[13]: 
/**/rs60.getString(7);
2024-04-21 21:33:19.582603+03:00 jdbc[13]: 
/**/rs60.next();
2024-04-21 21:33:19.582695+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta189 = rs60.getMetaData();
2024-04-21 21:33:19.582721+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.582751+03:00 jdbc[13]: 
/**/rsMeta189.getColumnType(1);
2024-04-21 21:33:19.582776+03:00 jdbc[13]: 
/**/rs60.getString(1);
2024-04-21 21:33:19.582818+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta190 = rs60.getMetaData();
2024-04-21 21:33:19.582843+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.582866+03:00 jdbc[13]: 
/**/rsMeta190.getColumnType(2);
2024-04-21 21:33:19.582896+03:00 jdbc[13]: 
/**/rs60.getString(2);
2024-04-21 21:33:19.582923+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta191 = rs60.getMetaData();
2024-04-21 21:33:19.582951+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.582974+03:00 jdbc[13]: 
/**/rsMeta191.getColumnType(3);
2024-04-21 21:33:19.583004+03:00 jdbc[13]: 
/**/rs60.getString(3);
2024-04-21 21:33:19.583033+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta192 = rs60.getMetaData();
2024-04-21 21:33:19.583055+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.583084+03:00 jdbc[13]: 
/**/rsMeta192.getColumnType(4);
2024-04-21 21:33:19.583107+03:00 jdbc[13]: 
/**/rs60.getString(4);
2024-04-21 21:33:19.583138+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta193 = rs60.getMetaData();
2024-04-21 21:33:19.583166+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.583192+03:00 jdbc[13]: 
/**/rsMeta193.getColumnType(5);
2024-04-21 21:33:19.583221+03:00 jdbc[13]: 
/**/rs60.getString(5);
2024-04-21 21:33:19.583260+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta194 = rs60.getMetaData();
2024-04-21 21:33:19.583294+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.583321+03:00 jdbc[13]: 
/**/rsMeta194.getColumnType(6);
2024-04-21 21:33:19.583345+03:00 jdbc[13]: 
/**/rs60.getString(6);
2024-04-21 21:33:19.583374+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta195 = rs60.getMetaData();
2024-04-21 21:33:19.583395+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.583422+03:00 jdbc[13]: 
/**/rsMeta195.getColumnType(7);
2024-04-21 21:33:19.583444+03:00 jdbc[13]: 
/**/rs60.getString(7);
2024-04-21 21:33:19.583471+03:00 jdbc[13]: 
/**/rs60.next();
2024-04-21 21:33:19.583555+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta196 = rs60.getMetaData();
2024-04-21 21:33:19.583589+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.583618+03:00 jdbc[13]: 
/**/rsMeta196.getColumnType(1);
2024-04-21 21:33:19.583643+03:00 jdbc[13]: 
/**/rs60.getString(1);
2024-04-21 21:33:19.583671+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta197 = rs60.getMetaData();
2024-04-21 21:33:19.583691+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.583716+03:00 jdbc[13]: 
/**/rsMeta197.getColumnType(2);
2024-04-21 21:33:19.583741+03:00 jdbc[13]: 
/**/rs60.getString(2);
2024-04-21 21:33:19.583764+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta198 = rs60.getMetaData();
2024-04-21 21:33:19.583787+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.583807+03:00 jdbc[13]: 
/**/rsMeta198.getColumnType(3);
2024-04-21 21:33:19.583832+03:00 jdbc[13]: 
/**/rs60.getString(3);
2024-04-21 21:33:19.583854+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta199 = rs60.getMetaData();
2024-04-21 21:33:19.583877+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.583903+03:00 jdbc[13]: 
/**/rsMeta199.getColumnType(4);
2024-04-21 21:33:19.583928+03:00 jdbc[13]: 
/**/rs60.getString(4);
2024-04-21 21:33:19.583956+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta200 = rs60.getMetaData();
2024-04-21 21:33:19.583978+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.584005+03:00 jdbc[13]: 
/**/rsMeta200.getColumnType(5);
2024-04-21 21:33:19.584029+03:00 jdbc[13]: 
/**/rs60.getString(5);
2024-04-21 21:33:19.584064+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta201 = rs60.getMetaData();
2024-04-21 21:33:19.584089+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.584209+03:00 jdbc[13]: 
/**/rsMeta201.getColumnType(6);
2024-04-21 21:33:19.584238+03:00 jdbc[13]: 
/**/rs60.getString(6);
2024-04-21 21:33:19.584261+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta202 = rs60.getMetaData();
2024-04-21 21:33:19.584288+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.584310+03:00 jdbc[13]: 
/**/rsMeta202.getColumnType(7);
2024-04-21 21:33:19.584336+03:00 jdbc[13]: 
/**/rs60.getString(7);
2024-04-21 21:33:19.584358+03:00 jdbc[13]: 
/**/rs60.next();
2024-04-21 21:33:19.584386+03:00 jdbc[13]: 
/**/rs60.getConcurrency();
2024-04-21 21:33:19.584410+03:00 jdbc[13]: 
/**/rs60.close();
2024-04-21 21:33:19.584438+03:00 jdbc[13]: 
/**/stat15.close();
2024-04-21 21:33:19.584486+03:00 jdbc[13]: 
/**/Statement stat16 = conn10.createStatement();
2024-04-21 21:33:19.584522+03:00 jdbc[13]: 
/**/stat16.setMaxRows(1000);
2024-04-21 21:33:19.584547+03:00 jdbc[13]: 
/**/stat16.execute("SELECT * FROM locations WHERE trashed = true");
2024-04-21 21:33:19.584815+03:00 jdbc[13]: Plan       : calculate cost for plan [PUBLIC.LOCATIONS]
2024-04-21 21:33:19.584863+03:00 jdbc[13]: Plan       :   for table filter PUBLIC.LOCATIONS
2024-04-21 21:33:19.585057+03:00 jdbc[13]: Table      :     potential plan item cost 10,240 index PUBLIC.LOCATIONS.tableScan
2024-04-21 21:33:19.585228+03:00 jdbc[13]: Table      :     potential plan item cost 20,300 index PUBLIC.PRIMARY_KEY_5
2024-04-21 21:33:19.585412+03:00 jdbc[13]: Plan       :   best plan item cost 10,137.6 index PUBLIC.LOCATIONS.tableScan
2024-04-21 21:33:19.585534+03:00 jdbc[13]: Plan       : plan cost 10,138.6
2024-04-21 21:33:19.585817+03:00 jdbc[13]: 
/*SQL #:2*/SELECT * FROM locations WHERE trashed = true;
2024-04-21 21:33:19.585907+03:00 jdbc[13]: 
/**/ResultSet rs61 = stat16.getResultSet();
2024-04-21 21:33:19.585941+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta203 = rs61.getMetaData();
2024-04-21 21:33:19.585972+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.585999+03:00 jdbc[13]: 
/**/rsMeta203.getColumnCount();
2024-04-21 21:33:19.586031+03:00 jdbc[13]: 
/**/rsMeta203.getColumnLabel(1);
2024-04-21 21:33:19.586064+03:00 jdbc[13]: 
/**/rsMeta203.getColumnLabel(2);
2024-04-21 21:33:19.586090+03:00 jdbc[13]: 
/**/rsMeta203.getColumnLabel(3);
2024-04-21 21:33:19.586126+03:00 jdbc[13]: 
/**/rsMeta203.getColumnLabel(4);
2024-04-21 21:33:19.586153+03:00 jdbc[13]: 
/**/rsMeta203.getColumnLabel(5);
2024-04-21 21:33:19.586184+03:00 jdbc[13]: 
/**/rsMeta203.getColumnLabel(6);
2024-04-21 21:33:19.586211+03:00 jdbc[13]: 
/**/rsMeta203.getColumnLabel(7);
2024-04-21 21:33:19.586235+03:00 jdbc[13]: 
/**/rs61.next();
2024-04-21 21:33:19.586262+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta204 = rs61.getMetaData();
2024-04-21 21:33:19.586283+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.586327+03:00 jdbc[13]: 
/**/rsMeta204.getColumnType(1);
2024-04-21 21:33:19.586355+03:00 jdbc[13]: 
/**/rs61.getString(1);
2024-04-21 21:33:19.586382+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta205 = rs61.getMetaData();
2024-04-21 21:33:19.586408+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.586432+03:00 jdbc[13]: 
/**/rsMeta205.getColumnType(2);
2024-04-21 21:33:19.586462+03:00 jdbc[13]: 
/**/rs61.getString(2);
2024-04-21 21:33:19.586488+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta206 = rs61.getMetaData();
2024-04-21 21:33:19.586514+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.586540+03:00 jdbc[13]: 
/**/rsMeta206.getColumnType(3);
2024-04-21 21:33:19.586564+03:00 jdbc[13]: 
/**/rs61.getString(3);
2024-04-21 21:33:19.586591+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta207 = rs61.getMetaData();
2024-04-21 21:33:19.586613+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.586643+03:00 jdbc[13]: 
/**/rsMeta207.getColumnType(4);
2024-04-21 21:33:19.586669+03:00 jdbc[13]: 
/**/rs61.getString(4);
2024-04-21 21:33:19.586693+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta208 = rs61.getMetaData();
2024-04-21 21:33:19.586718+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.586739+03:00 jdbc[13]: 
/**/rsMeta208.getColumnType(5);
2024-04-21 21:33:19.586770+03:00 jdbc[13]: 
/**/rs61.getString(5);
2024-04-21 21:33:19.586796+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta209 = rs61.getMetaData();
2024-04-21 21:33:19.586821+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.586847+03:00 jdbc[13]: 
/**/rsMeta209.getColumnType(6);
2024-04-21 21:33:19.586869+03:00 jdbc[13]: 
/**/rs61.getString(6);
2024-04-21 21:33:19.586898+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta210 = rs61.getMetaData();
2024-04-21 21:33:19.586920+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.586947+03:00 jdbc[13]: 
/**/rsMeta210.getColumnType(7);
2024-04-21 21:33:19.586971+03:00 jdbc[13]: 
/**/rs61.getString(7);
2024-04-21 21:33:19.586997+03:00 jdbc[13]: 
/**/rs61.next();
2024-04-21 21:33:19.587019+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta211 = rs61.getMetaData();
2024-04-21 21:33:19.587043+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.587070+03:00 jdbc[13]: 
/**/rsMeta211.getColumnType(1);
2024-04-21 21:33:19.587095+03:00 jdbc[13]: 
/**/rs61.getString(1);
2024-04-21 21:33:19.587125+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta212 = rs61.getMetaData();
2024-04-21 21:33:19.587147+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.587176+03:00 jdbc[13]: 
/**/rsMeta212.getColumnType(2);
2024-04-21 21:33:19.587200+03:00 jdbc[13]: 
/**/rs61.getString(2);
2024-04-21 21:33:19.587230+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta213 = rs61.getMetaData();
2024-04-21 21:33:19.587258+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.587283+03:00 jdbc[13]: 
/**/rsMeta213.getColumnType(3);
2024-04-21 21:33:19.587312+03:00 jdbc[13]: 
/**/rs61.getString(3);
2024-04-21 21:33:19.587337+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta214 = rs61.getMetaData();
2024-04-21 21:33:19.587365+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.587391+03:00 jdbc[13]: 
/**/rsMeta214.getColumnType(4);
2024-04-21 21:33:19.587416+03:00 jdbc[13]: 
/**/rs61.getString(4);
2024-04-21 21:33:19.587444+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta215 = rs61.getMetaData();
2024-04-21 21:33:19.587467+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.587494+03:00 jdbc[13]: 
/**/rsMeta215.getColumnType(5);
2024-04-21 21:33:19.587529+03:00 jdbc[13]: 
/**/rs61.getString(5);
2024-04-21 21:33:19.587564+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta216 = rs61.getMetaData();
2024-04-21 21:33:19.587592+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.587617+03:00 jdbc[13]: 
/**/rsMeta216.getColumnType(6);
2024-04-21 21:33:19.587646+03:00 jdbc[13]: 
/**/rs61.getString(6);
2024-04-21 21:33:19.587699+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta217 = rs61.getMetaData();
2024-04-21 21:33:19.587728+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:19.587751+03:00 jdbc[13]: 
/**/rsMeta217.getColumnType(7);
2024-04-21 21:33:19.587779+03:00 jdbc[13]: 
/**/rs61.getString(7);
2024-04-21 21:33:19.587801+03:00 jdbc[13]: 
/**/rs61.next();
2024-04-21 21:33:19.587831+03:00 jdbc[13]: 
/**/rs61.getConcurrency();
2024-04-21 21:33:19.587855+03:00 jdbc[13]: 
/**/rs61.close();
2024-04-21 21:33:19.587886+03:00 jdbc[13]: 
/**/stat16.close();
2024-04-21 21:33:40.203181+03:00 jdbc[13]: 
/**/Statement stat17 = conn10.createStatement(1004, 1008);
2024-04-21 21:33:40.203558+03:00 jdbc[13]: 
/**/stat17.setMaxRows(1000);
2024-04-21 21:33:40.203621+03:00 jdbc[13]: 
/**/stat17.execute("SELECT * FROM locations WHERE trashed = true");
2024-04-21 21:33:40.203816+03:00 jdbc[13]: 
/*SQL #:2*/SELECT * FROM locations WHERE trashed = true;
2024-04-21 21:33:40.203906+03:00 jdbc[13]: 
/**/ResultSet rs62 = stat17.getResultSet();
2024-04-21 21:33:40.203938+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta218 = rs62.getMetaData();
2024-04-21 21:33:40.203966+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:40.203990+03:00 jdbc[13]: 
/**/rsMeta218.getColumnCount();
2024-04-21 21:33:40.204035+03:00 jdbc[13]: 
/**/rsMeta218.getColumnLabel(1);
2024-04-21 21:33:40.204076+03:00 jdbc[13]: 
/**/rsMeta218.getColumnLabel(2);
2024-04-21 21:33:40.204102+03:00 jdbc[13]: 
/**/rsMeta218.getColumnLabel(3);
2024-04-21 21:33:40.204135+03:00 jdbc[13]: 
/**/rsMeta218.getColumnLabel(4);
2024-04-21 21:33:40.204162+03:00 jdbc[13]: 
/**/rsMeta218.getColumnLabel(5);
2024-04-21 21:33:40.204184+03:00 jdbc[13]: 
/**/rsMeta218.getColumnLabel(6);
2024-04-21 21:33:40.204211+03:00 jdbc[13]: 
/**/rsMeta218.getColumnLabel(7);
2024-04-21 21:33:40.204234+03:00 jdbc[13]: 
/**/rs62.next();
2024-04-21 21:33:40.204261+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta219 = rs62.getMetaData();
2024-04-21 21:33:40.204281+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:40.204309+03:00 jdbc[13]: 
/**/rsMeta219.getColumnType(1);
2024-04-21 21:33:40.204337+03:00 jdbc[13]: 
/**/rs62.getString(1);
2024-04-21 21:33:40.204365+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta220 = rs62.getMetaData();
2024-04-21 21:33:40.204389+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:40.204410+03:00 jdbc[13]: 
/**/rsMeta220.getColumnType(2);
2024-04-21 21:33:40.204439+03:00 jdbc[13]: 
/**/rs62.getString(2);
2024-04-21 21:33:40.204485+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta221 = rs62.getMetaData();
2024-04-21 21:33:40.204510+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:40.204538+03:00 jdbc[13]: 
/**/rsMeta221.getColumnType(3);
2024-04-21 21:33:40.204561+03:00 jdbc[13]: 
/**/rs62.getString(3);
2024-04-21 21:33:40.204592+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta222 = rs62.getMetaData();
2024-04-21 21:33:40.204617+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:40.204646+03:00 jdbc[13]: 
/**/rsMeta222.getColumnType(4);
2024-04-21 21:33:40.204674+03:00 jdbc[13]: 
/**/rs62.getString(4);
2024-04-21 21:33:40.204700+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta223 = rs62.getMetaData();
2024-04-21 21:33:40.204727+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:40.204754+03:00 jdbc[13]: 
/**/rsMeta223.getColumnType(5);
2024-04-21 21:33:40.204783+03:00 jdbc[13]: 
/**/rs62.getString(5);
2024-04-21 21:33:40.204812+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta224 = rs62.getMetaData();
2024-04-21 21:33:40.204835+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:40.204863+03:00 jdbc[13]: 
/**/rsMeta224.getColumnType(6);
2024-04-21 21:33:40.204888+03:00 jdbc[13]: 
/**/rs62.getString(6);
2024-04-21 21:33:40.204918+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta225 = rs62.getMetaData();
2024-04-21 21:33:40.204941+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:40.204971+03:00 jdbc[13]: 
/**/rsMeta225.getColumnType(7);
2024-04-21 21:33:40.204998+03:00 jdbc[13]: 
/**/rs62.getString(7);
2024-04-21 21:33:40.205025+03:00 jdbc[13]: 
/**/rs62.next();
2024-04-21 21:33:40.205053+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta226 = rs62.getMetaData();
2024-04-21 21:33:40.205076+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:40.205104+03:00 jdbc[13]: 
/**/rsMeta226.getColumnType(1);
2024-04-21 21:33:40.205129+03:00 jdbc[13]: 
/**/rs62.getString(1);
2024-04-21 21:33:40.205159+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta227 = rs62.getMetaData();
2024-04-21 21:33:40.205181+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:40.205209+03:00 jdbc[13]: 
/**/rsMeta227.getColumnType(2);
2024-04-21 21:33:40.205240+03:00 jdbc[13]: 
/**/rs62.getString(2);
2024-04-21 21:33:40.205265+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta228 = rs62.getMetaData();
2024-04-21 21:33:40.205291+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:40.205314+03:00 jdbc[13]: 
/**/rsMeta228.getColumnType(3);
2024-04-21 21:33:40.205355+03:00 jdbc[13]: 
/**/rs62.getString(3);
2024-04-21 21:33:40.205378+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta229 = rs62.getMetaData();
2024-04-21 21:33:40.205404+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:40.205429+03:00 jdbc[13]: 
/**/rsMeta229.getColumnType(4);
2024-04-21 21:33:40.205452+03:00 jdbc[13]: 
/**/rs62.getString(4);
2024-04-21 21:33:40.205480+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta230 = rs62.getMetaData();
2024-04-21 21:33:40.205502+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:40.205528+03:00 jdbc[13]: 
/**/rsMeta230.getColumnType(5);
2024-04-21 21:33:40.205553+03:00 jdbc[13]: 
/**/rs62.getString(5);
2024-04-21 21:33:40.205582+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta231 = rs62.getMetaData();
2024-04-21 21:33:40.205608+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:40.205631+03:00 jdbc[13]: 
/**/rsMeta231.getColumnType(6);
2024-04-21 21:33:40.205657+03:00 jdbc[13]: 
/**/rs62.getString(6);
2024-04-21 21:33:40.205680+03:00 jdbc[13]: 
/**/ResultSetMetaData rsMeta232 = rs62.getMetaData();
2024-04-21 21:33:40.205703+03:00 jdbc[13]: 
/**/conn10.getCatalog();
2024-04-21 21:33:40.205723+03:00 jdbc[13]: 
/**/rsMeta232.getColumnType(7);
2024-04-21 21:33:40.205747+03:00 jdbc[13]: 
/**/rs62.getString(7);
2024-04-21 21:33:40.205773+03:00 jdbc[13]: 
/**/rs62.next();
2024-04-21 21:33:40.205796+03:00 jdbc[13]: 
/**/rs62.getConcurrency();
2024-04-21 21:33:40.205829+03:00 jdbc[13]: 
/**/DatabaseMetaData dbMeta8 = conn10.getMetaData();
2024-04-21 21:33:40.205871+03:00 jdbc[13]: 
/**/dbMeta8.getTables(null, "PUBLIC", "LOCATIONS", new String[]{"BASE TABLE"});
2024-04-21 21:33:40.205979+03:00 jdbc[13]: 
/**/rs63.next();
2024-04-21 21:33:40.206006+03:00 jdbc[13]: 
/**/rs63.getString("TABLE_NAME");
2024-04-21 21:33:40.206049+03:00 jdbc[13]: 
/**/dbMeta8.getPrimaryKeys(null, "PUBLIC", "LOCATIONS");
2024-04-21 21:33:40.206099+03:00 jdbc[13]: 
/**/rs64.next();
2024-04-21 21:33:40.206127+03:00 jdbc[13]: 
/**/rs64.getString("COLUMN_NAME");
2024-04-21 21:33:40.206160+03:00 jdbc[13]: 
/**/rs64.next();
2024-04-21 21:33:40.206190+03:00 jdbc[13]: 
/**/rs62.getType();
2024-04-21 21:33:40.206215+03:00 jdbc[13]: 
/**/rs62.close();
2024-04-21 21:33:40.206249+03:00 jdbc[13]: 
/**/stat17.close();
2024-04-21 21:35:14.970314+03:00 jdbc[3]: 
/**/conn0.isValid(5);
2024-04-21 21:35:14.970889+03:00 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2024-04-21 21:35:14.971004+03:00 jdbc[3]: 
/**/conn0.getAutoCommit();
2024-04-21 21:35:14.971096+03:00 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2024-04-21 21:35:15.092744+03:00 jdbc[3]: 
/**/PreparedStatement prep3 = conn0.prepareStatement("select l1_0.code,l1_0.city_name,l1_0.country_code,l1_0.country_name,l1_0.enabled,l1_0.region_name,l1_0.trashed from locations l1_0 where l1_0.trashed=false");
2024-04-21 21:35:15.093171+03:00 jdbc[3]: Plan       : calculate cost for plan [L1_0]
2024-04-21 21:35:15.093218+03:00 jdbc[3]: Plan       :   for table filter L1_0
2024-04-21 21:35:15.093450+03:00 jdbc[3]: Table      :     potential plan item cost 10,240 index PUBLIC.LOCATIONS.tableScan
2024-04-21 21:35:15.093624+03:00 jdbc[3]: Table      :     potential plan item cost 20,300 index PUBLIC.PRIMARY_KEY_5
2024-04-21 21:35:15.093747+03:00 jdbc[3]: Plan       :   best plan item cost 10,137.6 index PUBLIC.LOCATIONS.tableScan
2024-04-21 21:35:15.093841+03:00 jdbc[3]: Plan       : plan cost 10,138.6
2024-04-21 21:35:15.096692+03:00 jdbc[3]: 
/**/ResultSet rs65 = prep3.executeQuery();
2024-04-21 21:35:15.096991+03:00 jdbc[3]: 
/*SQL #:2*/select l1_0.code,l1_0.city_name,l1_0.country_code,l1_0.country_name,l1_0.enabled,l1_0.region_name,l1_0.trashed from locations l1_0 where l1_0.trashed=false;
2024-04-21 21:35:15.100308+03:00 jdbc[3]: 
/**/rs65.next();
2024-04-21 21:35:15.101504+03:00 jdbc[3]: 
/**/rs65.getString(1);
2024-04-21 21:35:15.101567+03:00 jdbc[3]: 
/**/rs65.wasNull();
2024-04-21 21:35:15.103183+03:00 jdbc[3]: 
/**/rs65.getString(2);
2024-04-21 21:35:15.103229+03:00 jdbc[3]: 
/**/rs65.wasNull();
2024-04-21 21:35:15.103259+03:00 jdbc[3]: 
/**/rs65.getString(3);
2024-04-21 21:35:15.103277+03:00 jdbc[3]: 
/**/rs65.wasNull();
2024-04-21 21:35:15.103355+03:00 jdbc[3]: 
/**/rs65.getString(4);
2024-04-21 21:35:15.103388+03:00 jdbc[3]: 
/**/rs65.wasNull();
2024-04-21 21:35:15.103437+03:00 jdbc[3]: 
/**/rs65.getBoolean(5);
2024-04-21 21:35:15.103479+03:00 jdbc[3]: 
/**/rs65.wasNull();
2024-04-21 21:35:15.103517+03:00 jdbc[3]: 
/**/rs65.getString(6);
2024-04-21 21:35:15.103544+03:00 jdbc[3]: 
/**/rs65.wasNull();
2024-04-21 21:35:15.103580+03:00 jdbc[3]: 
/**/rs65.getBoolean(7);
2024-04-21 21:35:15.103608+03:00 jdbc[3]: 
/**/rs65.wasNull();
2024-04-21 21:35:15.107828+03:00 jdbc[3]: 
/**/rs65.next();
2024-04-21 21:35:15.107913+03:00 jdbc[3]: 
/**/rs65.getString(1);
2024-04-21 21:35:15.107933+03:00 jdbc[3]: 
/**/rs65.wasNull();
2024-04-21 21:35:15.108003+03:00 jdbc[3]: 
/**/rs65.getString(2);
2024-04-21 21:35:15.108023+03:00 jdbc[3]: 
/**/rs65.wasNull();
2024-04-21 21:35:15.108039+03:00 jdbc[3]: 
/**/rs65.getString(3);
2024-04-21 21:35:15.108055+03:00 jdbc[3]: 
/**/rs65.wasNull();
2024-04-21 21:35:15.108071+03:00 jdbc[3]: 
/**/rs65.getString(4);
2024-04-21 21:35:15.108087+03:00 jdbc[3]: 
/**/rs65.wasNull();
2024-04-21 21:35:15.108103+03:00 jdbc[3]: 
/**/rs65.getBoolean(5);
2024-04-21 21:35:15.108122+03:00 jdbc[3]: 
/**/rs65.wasNull();
2024-04-21 21:35:15.108137+03:00 jdbc[3]: 
/**/rs65.getString(6);
2024-04-21 21:35:15.108153+03:00 jdbc[3]: 
/**/rs65.wasNull();
2024-04-21 21:35:15.108168+03:00 jdbc[3]: 
/**/rs65.getBoolean(7);
2024-04-21 21:35:15.108185+03:00 jdbc[3]: 
/**/rs65.wasNull();
2024-04-21 21:35:15.108247+03:00 jdbc[3]: 
/**/rs65.next();
2024-04-21 21:35:15.109153+03:00 jdbc[3]: 
/**/prep3.isClosed();
2024-04-21 21:35:15.109196+03:00 jdbc[3]: 
/**/rs65.close();
2024-04-21 21:35:15.109360+03:00 jdbc[3]: 
/**/prep3.getMaxRows();
2024-04-21 21:35:15.109386+03:00 jdbc[3]: 
/**/prep3.getQueryTimeout();
2024-04-21 21:35:15.109676+03:00 jdbc[3]: Plan       : calculate cost for plan [SETTINGS:-33:org.h2.table.InformationSchemaTable@1aad6507]
2024-04-21 21:35:15.109717+03:00 jdbc[3]: Plan       :   for table filter SETTINGS:-33:org.h2.table.InformationSchemaTable@1aad6507
2024-04-21 21:35:15.109868+03:00 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2024-04-21 21:35:15.109947+03:00 jdbc[3]: Plan       :   best plan item cost 9,900 index meta
2024-04-21 21:35:15.110071+03:00 jdbc[3]: Plan       : plan cost 9,901
2024-04-21 21:35:15.114039+03:00 jdbc[3]: 
/*SQL l:74 #:1 t:3*/SELECT SETTING_VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE SETTING_NAME=? {1: 'QUERY_TIMEOUT'};
2024-04-21 21:35:15.114218+03:00 jdbc[3]: 
/**/prep3.close();
2024-04-21 21:35:15.125911+03:00 jdbc[3]: 
/**/conn0.commit();
2024-04-21 21:35:15.126182+03:00 jdbc[3]: 
/*SQL */COMMIT;
2024-04-21 21:35:15.126257+03:00 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2024-04-21 21:35:15.126291+03:00 jdbc[3]: 
/**/conn0.commit();
2024-04-21 21:35:15.126365+03:00 jdbc[3]: 
/*SQL */COMMIT;
2024-04-21 21:35:15.139579+03:00 jdbc[3]: 
/**/conn0.getWarnings();
2024-04-21 21:35:15.139642+03:00 jdbc[3]: 
/**/conn0.clearWarnings();
2024-04-21 21:35:15.139696+03:00 jdbc[3]: 
/**/conn0.clearWarnings();
2024-04-21 21:35:19.616415+03:00 jdbc[3]: 
/**/conn0.isValid(5);
2024-04-21 21:35:19.616490+03:00 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2024-04-21 21:35:19.616531+03:00 jdbc[3]: 
/**/conn0.getAutoCommit();
2024-04-21 21:35:19.616569+03:00 jdbc[3]: 
/**/conn0.setAutoCommit(false);
2024-04-21 21:35:19.618953+03:00 jdbc[3]: 
/**/PreparedStatement prep4 = conn0.prepareStatement("select l1_0.code,l1_0.city_name,l1_0.country_code,l1_0.country_name,l1_0.enabled,l1_0.region_name,l1_0.trashed from locations l1_0 where l1_0.trashed=false");
2024-04-21 21:35:19.619075+03:00 jdbc[3]: 
/**/ResultSet rs66 = prep4.executeQuery();
2024-04-21 21:35:19.619245+03:00 jdbc[3]: 
/*SQL #:2*/select l1_0.code,l1_0.city_name,l1_0.country_code,l1_0.country_name,l1_0.enabled,l1_0.region_name,l1_0.trashed from locations l1_0 where l1_0.trashed=false;
2024-04-21 21:35:19.619322+03:00 jdbc[3]: 
/**/rs66.next();
2024-04-21 21:35:19.619363+03:00 jdbc[3]: 
/**/rs66.getString(1);
2024-04-21 21:35:19.619393+03:00 jdbc[3]: 
/**/rs66.wasNull();
2024-04-21 21:35:19.619500+03:00 jdbc[3]: 
/**/rs66.getString(2);
2024-04-21 21:35:19.619528+03:00 jdbc[3]: 
/**/rs66.wasNull();
2024-04-21 21:35:19.619552+03:00 jdbc[3]: 
/**/rs66.getString(3);
2024-04-21 21:35:19.619576+03:00 jdbc[3]: 
/**/rs66.wasNull();
2024-04-21 21:35:19.619601+03:00 jdbc[3]: 
/**/rs66.getString(4);
2024-04-21 21:35:19.619621+03:00 jdbc[3]: 
/**/rs66.wasNull();
2024-04-21 21:35:19.619648+03:00 jdbc[3]: 
/**/rs66.getBoolean(5);
2024-04-21 21:35:19.619670+03:00 jdbc[3]: 
/**/rs66.wasNull();
2024-04-21 21:35:19.619699+03:00 jdbc[3]: 
/**/rs66.getString(6);
2024-04-21 21:35:19.619719+03:00 jdbc[3]: 
/**/rs66.wasNull();
2024-04-21 21:35:19.619745+03:00 jdbc[3]: 
/**/rs66.getBoolean(7);
2024-04-21 21:35:19.619765+03:00 jdbc[3]: 
/**/rs66.wasNull();
2024-04-21 21:35:19.619877+03:00 jdbc[3]: 
/**/rs66.next();
2024-04-21 21:35:19.619904+03:00 jdbc[3]: 
/**/rs66.getString(1);
2024-04-21 21:35:19.619929+03:00 jdbc[3]: 
/**/rs66.wasNull();
2024-04-21 21:35:19.619984+03:00 jdbc[3]: 
/**/rs66.getString(2);
2024-04-21 21:35:19.620009+03:00 jdbc[3]: 
/**/rs66.wasNull();
2024-04-21 21:35:19.620031+03:00 jdbc[3]: 
/**/rs66.getString(3);
2024-04-21 21:35:19.620055+03:00 jdbc[3]: 
/**/rs66.wasNull();
2024-04-21 21:35:19.620080+03:00 jdbc[3]: 
/**/rs66.getString(4);
2024-04-21 21:35:19.620100+03:00 jdbc[3]: 
/**/rs66.wasNull();
2024-04-21 21:35:19.620126+03:00 jdbc[3]: 
/**/rs66.getBoolean(5);
2024-04-21 21:35:19.620146+03:00 jdbc[3]: 
/**/rs66.wasNull();
2024-04-21 21:35:19.620171+03:00 jdbc[3]: 
/**/rs66.getString(6);
2024-04-21 21:35:19.620191+03:00 jdbc[3]: 
/**/rs66.wasNull();
2024-04-21 21:35:19.620216+03:00 jdbc[3]: 
/**/rs66.getBoolean(7);
2024-04-21 21:35:19.620236+03:00 jdbc[3]: 
/**/rs66.wasNull();
2024-04-21 21:35:19.620309+03:00 jdbc[3]: 
/**/rs66.next();
2024-04-21 21:35:19.620370+03:00 jdbc[3]: 
/**/prep4.isClosed();
2024-04-21 21:35:19.620395+03:00 jdbc[3]: 
/**/rs66.close();
2024-04-21 21:35:19.620421+03:00 jdbc[3]: 
/**/prep4.getMaxRows();
2024-04-21 21:35:19.620445+03:00 jdbc[3]: 
/**/prep4.getQueryTimeout();
2024-04-21 21:35:19.620468+03:00 jdbc[3]: 
/**/prep4.close();
2024-04-21 21:35:19.620821+03:00 jdbc[3]: 
/**/conn0.commit();
2024-04-21 21:35:19.620906+03:00 jdbc[3]: 
/*SQL */COMMIT;
2024-04-21 21:35:19.620942+03:00 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2024-04-21 21:35:19.620968+03:00 jdbc[3]: 
/**/conn0.commit();
2024-04-21 21:35:19.621051+03:00 jdbc[3]: 
/*SQL */COMMIT;
2024-04-21 21:35:19.622186+03:00 jdbc[3]: 
/**/conn0.getWarnings();
2024-04-21 21:35:19.622240+03:00 jdbc[3]: 
/**/conn0.clearWarnings();
2024-04-21 21:35:19.622277+03:00 jdbc[3]: 
/**/conn0.clearWarnings();
2024-04-22 00:38:39.152967+03:00 jdbc[11]: 
/**/conn8.close();
2024-04-22 00:38:39.168276+03:00 database: connecting session #14 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 00:38:39.168330+03:00 lock: 11 shared read unlock SYS 
2024-04-22 00:38:39.168935+03:00 database: disconnecting session #11
2024-04-22 00:38:39.169467+03:00 database: disconnected session #11
2024-04-22 00:38:39.170468+03:00 jdbc[14]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 00:38:39.171474+03:00 jdbc[14]: 
/**/Connection conn11 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 00:38:39.171598+03:00 jdbc[14]: 
/**/conn11.isReadOnly();
2024-04-22 00:38:39.172188+03:00 jdbc[14]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 00:38:39.172321+03:00 jdbc[14]: 
/**/conn11.getAutoCommit();
2024-04-22 00:38:39.364672+03:00 jdbc[12]: 
/**/conn9.close();
2024-04-22 00:38:39.365001+03:00 lock: 12 shared read unlock SYS 
2024-04-22 00:38:39.365137+03:00 database: disconnecting session #12
2024-04-22 00:38:39.365288+03:00 database: disconnected session #12
2024-04-22 00:38:39.365492+03:00 database: connecting session #15 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 00:38:39.365706+03:00 jdbc[15]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 00:38:39.365813+03:00 jdbc[15]: 
/**/Connection conn12 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 00:38:39.365858+03:00 jdbc[15]: 
/**/conn12.isReadOnly();
2024-04-22 00:38:39.365992+03:00 jdbc[15]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 00:38:39.366072+03:00 jdbc[15]: 
/**/conn12.getAutoCommit();
2024-04-22 00:38:40.031036+03:00 jdbc[10]: 
/**/conn7.close();
2024-04-22 00:38:40.031310+03:00 lock: 10 shared read unlock SYS 
2024-04-22 00:38:40.031463+03:00 database: disconnecting session #10
2024-04-22 00:38:40.031605+03:00 database: disconnected session #10
2024-04-22 00:38:40.031795+03:00 database: connecting session #16 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 00:38:40.031995+03:00 jdbc[16]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 00:38:40.032108+03:00 jdbc[16]: 
/**/Connection conn13 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 00:38:40.032155+03:00 jdbc[16]: 
/**/conn13.isReadOnly();
2024-04-22 00:38:40.032287+03:00 jdbc[16]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 00:38:40.032359+03:00 jdbc[16]: 
/**/conn13.getAutoCommit();
2024-04-22 00:38:49.303964+03:00 jdbc[4]: 
/**/conn1.close();
2024-04-22 00:38:49.304761+03:00 lock: 4 shared read unlock SYS 
2024-04-22 00:38:49.304761+03:00 database: connecting session #17 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 00:38:49.305002+03:00 database: disconnecting session #4
2024-04-22 00:38:49.305084+03:00 jdbc[17]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 00:38:49.305179+03:00 jdbc[17]: 
/**/Connection conn14 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 00:38:49.305250+03:00 database: disconnected session #4
2024-04-22 00:38:49.305290+03:00 jdbc[17]: 
/**/conn14.isReadOnly();
2024-04-22 00:38:49.305593+03:00 jdbc[17]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 00:38:49.305676+03:00 jdbc[17]: 
/**/conn14.getAutoCommit();
2024-04-22 00:38:51.393257+03:00 jdbc[3]: 
/**/conn0.close();
2024-04-22 00:38:51.393998+03:00 database: connecting session #18 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 00:38:51.398806+03:00 lock: 3 shared read unlock SYS 
2024-04-22 00:38:51.398940+03:00 database: disconnecting session #3
2024-04-22 00:38:51.398967+03:00 jdbc[18]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 00:38:51.399060+03:00 database: disconnected session #3
2024-04-22 00:38:51.399073+03:00 jdbc[18]: 
/**/Connection conn15 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 00:38:51.399168+03:00 jdbc[18]: 
/**/conn15.isReadOnly();
2024-04-22 00:38:51.399408+03:00 jdbc[18]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 00:38:51.399503+03:00 jdbc[18]: 
/**/conn15.getAutoCommit();
2024-04-22 00:38:52.981118+03:00 jdbc[9]: 
/**/conn6.close();
2024-04-22 00:38:52.981390+03:00 lock: 9 shared read unlock SYS 
2024-04-22 00:38:52.981519+03:00 database: disconnecting session #9
2024-04-22 00:38:52.981618+03:00 database: disconnected session #9
2024-04-22 00:38:52.981749+03:00 database: connecting session #19 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 00:38:52.981927+03:00 jdbc[19]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 00:38:52.982017+03:00 jdbc[19]: 
/**/Connection conn16 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 00:38:52.982057+03:00 jdbc[19]: 
/**/conn16.isReadOnly();
2024-04-22 00:38:52.982177+03:00 jdbc[19]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 00:38:52.982245+03:00 jdbc[19]: 
/**/conn16.getAutoCommit();
2024-04-22 00:39:04.820483+03:00 jdbc[6]: 
/**/conn3.close();
2024-04-22 00:39:04.821179+03:00 database: connecting session #20 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 00:39:04.826017+03:00 lock: 6 shared read unlock SYS 
2024-04-22 00:39:04.826089+03:00 jdbc[20]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 00:39:04.826191+03:00 jdbc[20]: 
/**/Connection conn17 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 00:39:04.826215+03:00 database: disconnecting session #6
2024-04-22 00:39:04.826264+03:00 jdbc[20]: 
/**/conn17.isReadOnly();
2024-04-22 00:39:04.826376+03:00 database: disconnected session #6
2024-04-22 00:39:04.826444+03:00 jdbc[20]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 00:39:04.826522+03:00 jdbc[20]: 
/**/conn17.getAutoCommit();
2024-04-22 00:39:06.464738+03:00 jdbc[5]: 
/**/conn2.close();
2024-04-22 00:39:06.464969+03:00 lock: 5 shared read unlock SYS 
2024-04-22 00:39:06.465088+03:00 database: disconnecting session #5
2024-04-22 00:39:06.465195+03:00 database: disconnected session #5
2024-04-22 00:39:06.465350+03:00 database: connecting session #21 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 00:39:06.465530+03:00 jdbc[21]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 00:39:06.465614+03:00 jdbc[21]: 
/**/Connection conn18 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 00:39:06.465654+03:00 jdbc[21]: 
/**/conn18.isReadOnly();
2024-04-22 00:39:06.465774+03:00 jdbc[21]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 00:39:06.465836+03:00 jdbc[21]: 
/**/conn18.getAutoCommit();
2024-04-22 00:39:07.946312+03:00 jdbc[8]: 
/**/conn5.close();
2024-04-22 00:39:07.946575+03:00 lock: 8 shared read unlock SYS 
2024-04-22 00:39:07.946707+03:00 database: disconnecting session #8
2024-04-22 00:39:07.946798+03:00 database: disconnected session #8
2024-04-22 00:39:07.946964+03:00 database: connecting session #22 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 00:39:07.947151+03:00 jdbc[22]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 00:39:07.947285+03:00 jdbc[22]: 
/**/Connection conn19 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 00:39:07.947327+03:00 jdbc[22]: 
/**/conn19.isReadOnly();
2024-04-22 00:39:07.947481+03:00 jdbc[22]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 00:39:07.947549+03:00 jdbc[22]: 
/**/conn19.getAutoCommit();
2024-04-22 00:39:14.931661+03:00 jdbc[7]: 
/**/conn4.close();
2024-04-22 00:39:14.932202+03:00 lock: 7 shared read unlock SYS 
2024-04-22 00:39:14.932356+03:00 database: connecting session #23 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 00:39:14.932518+03:00 database: disconnecting session #7
2024-04-22 00:39:14.932579+03:00 jdbc[23]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 00:39:14.932655+03:00 database: disconnected session #7
2024-04-22 00:39:14.932683+03:00 jdbc[23]: 
/**/Connection conn20 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 00:39:14.932758+03:00 jdbc[23]: 
/**/conn20.isReadOnly();
2024-04-22 00:39:14.932896+03:00 jdbc[23]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 00:39:14.932960+03:00 jdbc[23]: 
/**/conn20.getAutoCommit();
2024-04-22 01:07:58.579036+03:00 jdbc[16]: 
/**/conn13.close();
2024-04-22 01:07:58.580815+03:00 database: connecting session #24 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 01:07:58.585683+03:00 lock: 16 shared read unlock SYS 
2024-04-22 01:07:58.585875+03:00 jdbc[24]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 01:07:58.586039+03:00 database: disconnecting session #16
2024-04-22 01:07:58.586107+03:00 jdbc[24]: 
/**/Connection conn21 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 01:07:58.586339+03:00 database: disconnected session #16
2024-04-22 01:07:58.586373+03:00 jdbc[24]: 
/**/conn21.isReadOnly();
2024-04-22 01:07:58.586739+03:00 jdbc[24]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 01:07:58.586957+03:00 jdbc[24]: 
/**/conn21.getAutoCommit();
2024-04-22 01:07:58.962926+03:00 jdbc[14]: 
/**/conn11.close();
2024-04-22 01:07:58.963445+03:00 lock: 14 shared read unlock SYS 
2024-04-22 01:07:58.964345+03:00 database: disconnecting session #14
2024-04-22 01:07:58.964657+03:00 database: disconnected session #14
2024-04-22 01:07:58.965141+03:00 database: connecting session #25 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 01:07:58.965559+03:00 jdbc[25]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 01:07:58.965769+03:00 jdbc[25]: 
/**/Connection conn22 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 01:07:58.965874+03:00 jdbc[25]: 
/**/conn22.isReadOnly();
2024-04-22 01:07:58.966162+03:00 jdbc[25]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 01:07:58.966326+03:00 jdbc[25]: 
/**/conn22.getAutoCommit();
2024-04-22 01:08:08.796011+03:00 jdbc[15]: 
/**/conn12.close();
2024-04-22 01:08:08.799098+03:00 database: connecting session #26 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 01:08:08.799101+03:00 lock: 15 shared read unlock SYS 
2024-04-22 01:08:08.799758+03:00 database: disconnecting session #15
2024-04-22 01:08:08.799830+03:00 jdbc[26]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 01:08:08.800122+03:00 database: disconnected session #15
2024-04-22 01:08:08.800241+03:00 jdbc[26]: 
/**/Connection conn23 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 01:08:08.800416+03:00 jdbc[26]: 
/**/conn23.isReadOnly();
2024-04-22 01:08:08.800775+03:00 jdbc[26]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 01:08:08.800962+03:00 jdbc[26]: 
/**/conn23.getAutoCommit();
2024-04-22 01:08:23.858931+03:00 jdbc[22]: 
/**/conn19.close();
2024-04-22 01:08:23.859738+03:00 lock: 22 shared read unlock SYS 
2024-04-22 01:08:23.860154+03:00 database: disconnecting session #22
2024-04-22 01:08:23.860466+03:00 database: disconnected session #22
2024-04-22 01:08:23.860882+03:00 database: connecting session #27 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 01:08:23.861363+03:00 jdbc[27]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 01:08:23.861593+03:00 jdbc[27]: 
/**/Connection conn24 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 01:08:23.861752+03:00 jdbc[27]: 
/**/conn24.isReadOnly();
2024-04-22 01:08:23.862066+03:00 jdbc[27]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 01:08:23.862243+03:00 jdbc[27]: 
/**/conn24.getAutoCommit();
2024-04-22 01:08:26.618795+03:00 jdbc[21]: 
/**/conn18.close();
2024-04-22 01:08:26.620103+03:00 lock: 21 shared read unlock SYS 
2024-04-22 01:08:26.620170+03:00 database: connecting session #28 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 01:08:26.620566+03:00 database: disconnecting session #21
2024-04-22 01:08:26.620664+03:00 jdbc[28]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 01:08:26.620861+03:00 database: disconnected session #21
2024-04-22 01:08:26.621069+03:00 jdbc[28]: 
/**/Connection conn25 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 01:08:26.621200+03:00 jdbc[28]: 
/**/conn25.isReadOnly();
2024-04-22 01:08:26.621546+03:00 jdbc[28]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 01:08:26.621739+03:00 jdbc[28]: 
/**/conn25.getAutoCommit();
2024-04-22 01:08:28.568251+03:00 jdbc[17]: 
/**/conn14.close();
2024-04-22 01:08:28.569008+03:00 lock: 17 shared read unlock SYS 
2024-04-22 01:08:28.569270+03:00 database: disconnecting session #17
2024-04-22 01:08:28.569481+03:00 database: disconnected session #17
2024-04-22 01:08:28.569846+03:00 database: connecting session #29 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 01:08:28.570351+03:00 jdbc[29]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 01:08:28.570576+03:00 jdbc[29]: 
/**/Connection conn26 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 01:08:28.570696+03:00 jdbc[29]: 
/**/conn26.isReadOnly();
2024-04-22 01:08:28.571019+03:00 jdbc[29]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 01:08:28.571221+03:00 jdbc[29]: 
/**/conn26.getAutoCommit();
2024-04-22 01:08:37.395850+03:00 jdbc[18]: 
/**/conn15.close();
2024-04-22 01:08:37.396378+03:00 lock: 18 shared read unlock SYS 
2024-04-22 01:08:37.396681+03:00 database: disconnecting session #18
2024-04-22 01:08:37.396971+03:00 database: disconnected session #18
2024-04-22 01:08:37.397494+03:00 database: connecting session #30 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 01:08:37.397969+03:00 jdbc[30]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 01:08:37.398235+03:00 jdbc[30]: 
/**/Connection conn27 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 01:08:37.398389+03:00 jdbc[30]: 
/**/conn27.isReadOnly();
2024-04-22 01:08:37.398682+03:00 jdbc[30]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 01:08:37.398841+03:00 jdbc[30]: 
/**/conn27.getAutoCommit();
2024-04-22 01:08:41.516913+03:00 jdbc[23]: 
/**/conn20.close();
2024-04-22 01:08:41.517324+03:00 lock: 23 shared read unlock SYS 
2024-04-22 01:08:41.517541+03:00 database: disconnecting session #23
2024-04-22 01:08:41.517763+03:00 database: disconnected session #23
2024-04-22 01:08:41.518226+03:00 database: connecting session #31 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 01:08:41.518607+03:00 jdbc[31]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 01:08:41.518898+03:00 jdbc[31]: 
/**/Connection conn28 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 01:08:41.519010+03:00 jdbc[31]: 
/**/conn28.isReadOnly();
2024-04-22 01:08:41.519288+03:00 jdbc[31]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 01:08:41.519439+03:00 jdbc[31]: 
/**/conn28.getAutoCommit();
2024-04-22 01:08:41.817632+03:00 jdbc[19]: 
/**/conn16.close();
2024-04-22 01:08:41.818249+03:00 lock: 19 shared read unlock SYS 
2024-04-22 01:08:41.818488+03:00 database: disconnecting session #19
2024-04-22 01:08:41.818720+03:00 database: disconnected session #19
2024-04-22 01:08:41.819181+03:00 database: connecting session #32 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 01:08:41.819639+03:00 jdbc[32]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 01:08:41.819858+03:00 jdbc[32]: 
/**/Connection conn29 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 01:08:41.819978+03:00 jdbc[32]: 
/**/conn29.isReadOnly();
2024-04-22 01:08:41.820319+03:00 jdbc[32]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 01:08:41.820512+03:00 jdbc[32]: 
/**/conn29.getAutoCommit();
2024-04-22 01:09:03.765597+03:00 jdbc[20]: 
/**/conn17.close();
2024-04-22 01:09:03.766130+03:00 lock: 20 shared read unlock SYS 
2024-04-22 01:09:03.766439+03:00 database: disconnecting session #20
2024-04-22 01:09:03.766698+03:00 database: disconnected session #20
2024-04-22 01:09:03.767234+03:00 database: connecting session #33 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 01:09:03.767661+03:00 jdbc[33]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 01:09:03.767864+03:00 jdbc[33]: 
/**/Connection conn30 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 01:09:03.768010+03:00 jdbc[33]: 
/**/conn30.isReadOnly();
2024-04-22 01:09:03.768358+03:00 jdbc[33]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 01:09:03.768567+03:00 jdbc[33]: 
/**/conn30.getAutoCommit();
2024-04-22 01:37:44.202277+03:00 jdbc[27]: 
/**/conn24.close();
2024-04-22 01:37:44.211364+03:00 database: connecting session #34 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 01:37:44.211358+03:00 lock: 27 shared read unlock SYS 
2024-04-22 01:37:44.211899+03:00 database: disconnecting session #27
2024-04-22 01:37:44.211934+03:00 jdbc[34]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 01:37:44.212177+03:00 database: disconnected session #27
2024-04-22 01:37:44.212367+03:00 jdbc[34]: 
/**/Connection conn31 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 01:37:44.212546+03:00 jdbc[34]: 
/**/conn31.isReadOnly();
2024-04-22 01:37:44.212830+03:00 jdbc[34]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 01:37:44.213037+03:00 jdbc[34]: 
/**/conn31.getAutoCommit();
2024-04-22 01:37:46.801844+03:00 jdbc[24]: 
/**/conn21.close();
2024-04-22 01:37:46.802270+03:00 lock: 24 shared read unlock SYS 
2024-04-22 01:37:46.802513+03:00 database: disconnecting session #24
2024-04-22 01:37:46.802721+03:00 database: disconnected session #24
2024-04-22 01:37:46.803052+03:00 database: connecting session #35 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 01:37:46.803590+03:00 jdbc[35]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 01:37:46.803796+03:00 jdbc[35]: 
/**/Connection conn32 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 01:37:46.803894+03:00 jdbc[35]: 
/**/conn32.isReadOnly();
2024-04-22 01:37:46.804203+03:00 jdbc[35]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 01:37:46.804364+03:00 jdbc[35]: 
/**/conn32.getAutoCommit();
2024-04-22 01:37:46.954041+03:00 jdbc[25]: 
/**/conn22.close();
2024-04-22 01:37:46.954467+03:00 lock: 25 shared read unlock SYS 
2024-04-22 01:37:46.954731+03:00 database: disconnecting session #25
2024-04-22 01:37:46.955014+03:00 database: disconnected session #25
2024-04-22 01:37:46.955345+03:00 database: connecting session #36 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 01:37:46.955745+03:00 jdbc[36]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 01:37:46.955977+03:00 jdbc[36]: 
/**/Connection conn33 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 01:37:46.956097+03:00 jdbc[36]: 
/**/conn33.isReadOnly();
2024-04-22 01:37:46.956417+03:00 jdbc[36]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 01:37:46.956612+03:00 jdbc[36]: 
/**/conn33.getAutoCommit();
2024-04-22 01:37:48.214880+03:00 jdbc[26]: 
/**/conn23.close();
2024-04-22 01:37:48.215364+03:00 lock: 26 shared read unlock SYS 
2024-04-22 01:37:48.215618+03:00 database: disconnecting session #26
2024-04-22 01:37:48.215818+03:00 database: disconnected session #26
2024-04-22 01:37:48.216164+03:00 database: connecting session #37 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 01:37:48.216487+03:00 jdbc[37]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 01:37:48.216647+03:00 jdbc[37]: 
/**/Connection conn34 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 01:37:48.216735+03:00 jdbc[37]: 
/**/conn34.isReadOnly();
2024-04-22 01:37:48.216932+03:00 jdbc[37]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 01:37:48.217068+03:00 jdbc[37]: 
/**/conn34.getAutoCommit();
2024-04-22 01:38:05.207562+03:00 jdbc[29]: 
/**/conn26.close();
2024-04-22 01:38:05.208033+03:00 lock: 29 shared read unlock SYS 
2024-04-22 01:38:05.208309+03:00 database: disconnecting session #29
2024-04-22 01:38:05.208550+03:00 database: disconnected session #29
2024-04-22 01:38:05.208967+03:00 database: connecting session #38 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 01:38:05.209458+03:00 jdbc[38]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 01:38:05.209666+03:00 jdbc[38]: 
/**/Connection conn35 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 01:38:05.209827+03:00 jdbc[38]: 
/**/conn35.isReadOnly();
2024-04-22 01:38:05.210099+03:00 jdbc[38]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 01:38:05.210223+03:00 jdbc[38]: 
/**/conn35.getAutoCommit();
2024-04-22 01:38:16.810560+03:00 jdbc[28]: 
/**/conn25.close();
2024-04-22 01:38:16.812511+03:00 database: connecting session #39 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 01:38:16.816485+03:00 lock: 28 shared read unlock SYS 
2024-04-22 01:38:16.816787+03:00 jdbc[39]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 01:38:16.816812+03:00 database: disconnecting session #28
2024-04-22 01:38:16.817036+03:00 jdbc[39]: 
/**/Connection conn36 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 01:38:16.817489+03:00 database: disconnected session #28
2024-04-22 01:38:16.817562+03:00 jdbc[39]: 
/**/conn36.isReadOnly();
2024-04-22 01:38:16.817847+03:00 jdbc[39]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 01:38:16.818013+03:00 jdbc[39]: 
/**/conn36.getAutoCommit();
2024-04-22 01:38:24.690617+03:00 jdbc[30]: 
/**/conn27.close();
2024-04-22 01:38:24.691134+03:00 lock: 30 shared read unlock SYS 
2024-04-22 01:38:24.691404+03:00 database: disconnecting session #30
2024-04-22 01:38:24.691624+03:00 database: disconnected session #30
2024-04-22 01:38:24.691920+03:00 database: connecting session #40 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 01:38:24.692330+03:00 jdbc[40]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 01:38:24.692519+03:00 jdbc[40]: 
/**/Connection conn37 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 01:38:24.692639+03:00 jdbc[40]: 
/**/conn37.isReadOnly();
2024-04-22 01:38:24.692862+03:00 jdbc[40]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 01:38:24.693017+03:00 jdbc[40]: 
/**/conn37.getAutoCommit();
2024-04-22 01:38:28.157154+03:00 jdbc[31]: 
/**/conn28.close();
2024-04-22 01:38:28.158390+03:00 database: connecting session #41 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 01:38:28.169505+03:00 lock: 31 shared read unlock SYS 
2024-04-22 01:38:28.169671+03:00 jdbc[41]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 01:38:28.169754+03:00 database: disconnecting session #31
2024-04-22 01:38:28.169869+03:00 jdbc[41]: 
/**/Connection conn38 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 01:38:28.169945+03:00 database: disconnected session #31
2024-04-22 01:38:28.169973+03:00 jdbc[41]: 
/**/conn38.isReadOnly();
2024-04-22 01:38:28.170229+03:00 jdbc[41]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 01:38:28.170372+03:00 jdbc[41]: 
/**/conn38.getAutoCommit();
2024-04-22 01:38:32.992157+03:00 jdbc[32]: 
/**/conn29.close();
2024-04-22 01:38:32.993396+03:00 database: connecting session #42 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 01:38:32.994460+03:00 lock: 32 shared read unlock SYS 
2024-04-22 01:38:32.994619+03:00 jdbc[42]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 01:38:32.994722+03:00 database: disconnecting session #32
2024-04-22 01:38:32.994822+03:00 jdbc[42]: 
/**/Connection conn39 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 01:38:32.994953+03:00 jdbc[42]: 
/**/conn39.isReadOnly();
2024-04-22 01:38:32.994933+03:00 database: disconnected session #32
2024-04-22 01:38:32.995247+03:00 jdbc[42]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 01:38:32.995378+03:00 jdbc[42]: 
/**/conn39.getAutoCommit();
2024-04-22 01:38:57.852790+03:00 jdbc[33]: 
/**/conn30.close();
2024-04-22 01:38:57.853598+03:00 lock: 33 shared read unlock SYS 
2024-04-22 01:38:57.853873+03:00 database: disconnecting session #33
2024-04-22 01:38:57.854100+03:00 database: disconnected session #33
2024-04-22 01:38:57.854400+03:00 database: connecting session #43 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 01:38:57.854789+03:00 jdbc[43]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 01:38:57.854965+03:00 jdbc[43]: 
/**/Connection conn40 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 01:38:57.855108+03:00 jdbc[43]: 
/**/conn40.isReadOnly();
2024-04-22 01:38:57.855358+03:00 jdbc[43]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 01:38:57.855513+03:00 jdbc[43]: 
/**/conn40.getAutoCommit();
2024-04-22 02:07:09.216095+03:00 jdbc[37]: 
/**/conn34.close();
2024-04-22 02:07:09.218188+03:00 database: connecting session #44 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 02:07:09.222397+03:00 lock: 37 shared read unlock SYS 
2024-04-22 02:07:09.222627+03:00 database: disconnecting session #37
2024-04-22 02:07:09.222637+03:00 jdbc[44]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 02:07:09.222826+03:00 database: disconnected session #37
2024-04-22 02:07:09.222885+03:00 jdbc[44]: 
/**/Connection conn41 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 02:07:09.223009+03:00 jdbc[44]: 
/**/conn41.isReadOnly();
2024-04-22 02:07:09.223230+03:00 jdbc[44]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 02:07:09.223341+03:00 jdbc[44]: 
/**/conn41.getAutoCommit();
2024-04-22 02:07:14.916737+03:00 jdbc[34]: 
/**/conn31.close();
2024-04-22 02:07:14.917157+03:00 lock: 34 shared read unlock SYS 
2024-04-22 02:07:14.917400+03:00 database: disconnecting session #34
2024-04-22 02:07:14.917599+03:00 database: disconnected session #34
2024-04-22 02:07:14.917853+03:00 database: connecting session #45 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 02:07:14.918210+03:00 jdbc[45]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 02:07:14.918371+03:00 jdbc[45]: 
/**/Connection conn42 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 02:07:14.918509+03:00 jdbc[45]: 
/**/conn42.isReadOnly();
2024-04-22 02:07:14.918743+03:00 jdbc[45]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 02:07:14.918866+03:00 jdbc[45]: 
/**/conn42.getAutoCommit();
2024-04-22 02:07:16.203478+03:00 jdbc[36]: 
/**/conn33.close();
2024-04-22 02:07:16.203847+03:00 lock: 36 shared read unlock SYS 
2024-04-22 02:07:16.204034+03:00 database: disconnecting session #36
2024-04-22 02:07:16.204181+03:00 database: disconnected session #36
2024-04-22 02:07:16.204398+03:00 database: connecting session #46 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 02:07:16.204720+03:00 jdbc[46]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 02:07:16.204863+03:00 jdbc[46]: 
/**/Connection conn43 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 02:07:16.204943+03:00 jdbc[46]: 
/**/conn43.isReadOnly();
2024-04-22 02:07:16.205159+03:00 jdbc[46]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 02:07:16.205290+03:00 jdbc[46]: 
/**/conn43.getAutoCommit();
2024-04-22 02:07:40.416282+03:00 jdbc[35]: 
/**/conn32.close();
2024-04-22 02:07:40.416752+03:00 lock: 35 shared read unlock SYS 
2024-04-22 02:07:40.416992+03:00 database: disconnecting session #35
2024-04-22 02:07:40.417189+03:00 database: disconnected session #35
2024-04-22 02:07:40.417488+03:00 database: connecting session #47 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 02:07:40.417918+03:00 jdbc[47]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 02:07:40.418073+03:00 jdbc[47]: 
/**/Connection conn44 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 02:07:40.418197+03:00 jdbc[47]: 
/**/conn44.isReadOnly();
2024-04-22 02:07:40.418421+03:00 jdbc[47]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 02:07:40.418533+03:00 jdbc[47]: 
/**/conn44.getAutoCommit();
2024-04-22 02:07:56.949873+03:00 jdbc[41]: 
/**/conn38.close();
2024-04-22 02:07:56.951153+03:00 database: connecting session #48 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 02:07:56.955641+03:00 lock: 41 shared read unlock SYS 
2024-04-22 02:07:56.955885+03:00 jdbc[48]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 02:07:56.955908+03:00 database: disconnecting session #41
2024-04-22 02:07:56.956061+03:00 jdbc[48]: 
/**/Connection conn45 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 02:07:56.956243+03:00 database: disconnected session #41
2024-04-22 02:07:56.956291+03:00 jdbc[48]: 
/**/conn45.isReadOnly();
2024-04-22 02:07:56.956538+03:00 jdbc[48]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 02:07:56.956667+03:00 jdbc[48]: 
/**/conn45.getAutoCommit();
2024-04-22 02:07:57.349488+03:00 jdbc[39]: 
/**/conn36.close();
2024-04-22 02:07:57.349865+03:00 lock: 39 shared read unlock SYS 
2024-04-22 02:07:57.350073+03:00 database: disconnecting session #39
2024-04-22 02:07:57.350235+03:00 database: disconnected session #39
2024-04-22 02:07:57.350555+03:00 database: connecting session #49 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 02:07:57.350976+03:00 jdbc[49]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 02:07:57.351143+03:00 jdbc[49]: 
/**/Connection conn46 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 02:07:57.351236+03:00 jdbc[49]: 
/**/conn46.isReadOnly();
2024-04-22 02:07:57.351514+03:00 jdbc[49]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 02:07:57.351640+03:00 jdbc[49]: 
/**/conn46.getAutoCommit();
2024-04-22 02:08:02.690616+03:00 jdbc[38]: 
/**/conn35.close();
2024-04-22 02:08:02.691076+03:00 lock: 38 shared read unlock SYS 
2024-04-22 02:08:02.691327+03:00 database: disconnecting session #38
2024-04-22 02:08:02.691541+03:00 database: disconnected session #38
2024-04-22 02:08:02.691902+03:00 database: connecting session #50 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 02:08:02.692240+03:00 jdbc[50]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 02:08:02.692396+03:00 jdbc[50]: 
/**/Connection conn47 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 02:08:02.692518+03:00 jdbc[50]: 
/**/conn47.isReadOnly();
2024-04-22 02:08:02.692805+03:00 jdbc[50]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 02:08:02.692925+03:00 jdbc[50]: 
/**/conn47.getAutoCommit();
2024-04-22 02:08:10.777589+03:00 jdbc[42]: 
/**/conn39.close();
2024-04-22 02:08:10.778023+03:00 lock: 42 shared read unlock SYS 
2024-04-22 02:08:10.778267+03:00 database: disconnecting session #42
2024-04-22 02:08:10.778493+03:00 database: disconnected session #42
2024-04-22 02:08:10.780062+03:00 database: connecting session #51 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 02:08:10.780410+03:00 jdbc[51]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 02:08:10.780565+03:00 jdbc[51]: 
/**/Connection conn48 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 02:08:10.780687+03:00 jdbc[51]: 
/**/conn48.isReadOnly();
2024-04-22 02:08:10.780924+03:00 jdbc[51]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 02:08:10.781041+03:00 jdbc[51]: 
/**/conn48.getAutoCommit();
2024-04-22 02:08:22.900076+03:00 jdbc[40]: 
/**/conn37.close();
2024-04-22 02:08:22.901361+03:00 database: connecting session #52 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 02:08:22.902490+03:00 lock: 40 shared read unlock SYS 
2024-04-22 02:08:22.902708+03:00 jdbc[52]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 02:08:22.902726+03:00 database: disconnecting session #40
2024-04-22 02:08:22.902888+03:00 jdbc[52]: 
/**/Connection conn49 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 02:08:22.903069+03:00 database: disconnected session #40
2024-04-22 02:08:22.903111+03:00 jdbc[52]: 
/**/conn49.isReadOnly();
2024-04-22 02:08:22.903396+03:00 jdbc[52]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 02:08:22.903520+03:00 jdbc[52]: 
/**/conn49.getAutoCommit();
2024-04-22 02:08:30.083876+03:00 jdbc[43]: 
/**/conn40.close();
2024-04-22 02:08:30.084369+03:00 lock: 43 shared read unlock SYS 
2024-04-22 02:08:30.084613+03:00 database: disconnecting session #43
2024-04-22 02:08:30.084826+03:00 database: disconnected session #43
2024-04-22 02:08:30.085223+03:00 database: connecting session #53 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 02:08:30.085491+03:00 jdbc[53]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 02:08:30.085603+03:00 jdbc[53]: 
/**/Connection conn50 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 02:08:30.085691+03:00 jdbc[53]: 
/**/conn50.isReadOnly();
2024-04-22 02:08:30.085882+03:00 jdbc[53]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 02:08:30.086006+03:00 jdbc[53]: 
/**/conn50.getAutoCommit();
2024-04-22 02:36:44.242549+03:00 jdbc[45]: 
/**/conn42.close();
2024-04-22 02:36:44.243831+03:00 lock: 45 shared read unlock SYS 
2024-04-22 02:36:44.243911+03:00 database: connecting session #54 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 02:36:44.244323+03:00 database: disconnecting session #45
2024-04-22 02:36:44.244387+03:00 jdbc[54]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 02:36:44.244562+03:00 database: disconnected session #45
2024-04-22 02:36:44.244643+03:00 jdbc[54]: 
/**/Connection conn51 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 02:36:44.244764+03:00 jdbc[54]: 
/**/conn51.isReadOnly();
2024-04-22 02:36:44.244985+03:00 jdbc[54]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 02:36:44.245120+03:00 jdbc[54]: 
/**/conn51.getAutoCommit();
2024-04-22 02:36:57.197864+03:00 jdbc[44]: 
/**/conn41.close();
2024-04-22 02:36:57.198595+03:00 lock: 44 shared read unlock SYS 
2024-04-22 02:36:57.198876+03:00 database: disconnecting session #44
2024-04-22 02:36:57.199086+03:00 database: disconnected session #44
2024-04-22 02:36:57.199365+03:00 database: connecting session #55 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 02:36:57.199702+03:00 jdbc[55]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 02:36:57.199915+03:00 jdbc[55]: 
/**/Connection conn52 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 02:36:57.200043+03:00 jdbc[55]: 
/**/conn52.isReadOnly();
2024-04-22 02:36:57.200329+03:00 jdbc[55]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 02:36:57.200475+03:00 jdbc[55]: 
/**/conn52.getAutoCommit();
2024-04-22 02:37:09.718297+03:00 jdbc[46]: 
/**/conn43.close();
2024-04-22 02:37:09.718775+03:00 lock: 46 shared read unlock SYS 
2024-04-22 02:37:09.719023+03:00 database: disconnecting session #46
2024-04-22 02:37:09.719256+03:00 database: disconnected session #46
2024-04-22 02:37:09.720042+03:00 database: connecting session #56 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 02:37:09.720410+03:00 jdbc[56]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 02:37:09.720580+03:00 jdbc[56]: 
/**/Connection conn53 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 02:37:09.720721+03:00 jdbc[56]: 
/**/conn53.isReadOnly();
2024-04-22 02:37:09.720965+03:00 jdbc[56]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 02:37:09.721102+03:00 jdbc[56]: 
/**/conn53.getAutoCommit();
2024-04-22 02:37:33.941467+03:00 jdbc[47]: 
/**/conn44.close();
2024-04-22 02:37:33.943049+03:00 database: connecting session #57 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 02:37:33.950981+03:00 lock: 47 shared read unlock SYS 
2024-04-22 02:37:33.951237+03:00 database: disconnecting session #47
2024-04-22 02:37:33.951303+03:00 jdbc[57]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 02:37:33.951464+03:00 database: disconnected session #47
2024-04-22 02:37:33.951535+03:00 jdbc[57]: 
/**/Connection conn54 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 02:37:33.951707+03:00 jdbc[57]: 
/**/conn54.isReadOnly();
2024-04-22 02:37:33.951962+03:00 jdbc[57]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 02:37:33.952089+03:00 jdbc[57]: 
/**/conn54.getAutoCommit();
2024-04-22 02:37:44.239420+03:00 jdbc[51]: 
/**/conn48.close();
2024-04-22 02:37:44.239887+03:00 lock: 51 shared read unlock SYS 
2024-04-22 02:37:44.240137+03:00 database: disconnecting session #51
2024-04-22 02:37:44.240330+03:00 database: disconnected session #51
2024-04-22 02:37:44.241219+03:00 database: connecting session #58 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 02:37:44.241626+03:00 jdbc[58]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 02:37:44.241782+03:00 jdbc[58]: 
/**/Connection conn55 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 02:37:44.241905+03:00 jdbc[58]: 
/**/conn55.isReadOnly();
2024-04-22 02:37:44.242133+03:00 jdbc[58]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 02:37:44.242243+03:00 jdbc[58]: 
/**/conn55.getAutoCommit();
2024-04-22 02:37:52.430361+03:00 jdbc[50]: 
/**/conn47.close();
2024-04-22 02:37:52.431787+03:00 database: connecting session #59 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 02:37:52.436157+03:00 lock: 50 shared read unlock SYS 
2024-04-22 02:37:52.436266+03:00 jdbc[59]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 02:37:52.436410+03:00 database: disconnecting session #50
2024-04-22 02:37:52.436442+03:00 jdbc[59]: 
/**/Connection conn56 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 02:37:52.436647+03:00 database: disconnected session #50
2024-04-22 02:37:52.436656+03:00 jdbc[59]: 
/**/conn56.isReadOnly();
2024-04-22 02:37:52.436983+03:00 jdbc[59]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 02:37:52.437128+03:00 jdbc[59]: 
/**/conn56.getAutoCommit();
2024-04-22 02:37:52.630234+03:00 jdbc[49]: 
/**/conn46.close();
2024-04-22 02:37:52.630794+03:00 lock: 49 shared read unlock SYS 
2024-04-22 02:37:52.630994+03:00 database: disconnecting session #49
2024-04-22 02:37:52.631151+03:00 database: disconnected session #49
2024-04-22 02:37:52.631397+03:00 database: connecting session #60 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 02:37:52.631789+03:00 jdbc[60]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 02:37:52.631939+03:00 jdbc[60]: 
/**/Connection conn57 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 02:37:52.632022+03:00 jdbc[60]: 
/**/conn57.isReadOnly();
2024-04-22 02:37:52.632231+03:00 jdbc[60]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 02:37:52.632338+03:00 jdbc[60]: 
/**/conn57.getAutoCommit();
2024-04-22 02:37:52.692992+03:00 jdbc[48]: 
/**/conn45.close();
2024-04-22 02:37:52.693411+03:00 lock: 48 shared read unlock SYS 
2024-04-22 02:37:52.693600+03:00 database: disconnecting session #48
2024-04-22 02:37:52.693732+03:00 database: disconnected session #48
2024-04-22 02:37:52.693957+03:00 database: connecting session #61 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 02:37:52.694295+03:00 jdbc[61]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 02:37:52.694445+03:00 jdbc[61]: 
/**/Connection conn58 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 02:37:52.694529+03:00 jdbc[61]: 
/**/conn58.isReadOnly();
2024-04-22 02:37:52.694778+03:00 jdbc[61]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 02:37:52.694876+03:00 jdbc[61]: 
/**/conn58.getAutoCommit();
2024-04-22 02:38:11.187604+03:00 jdbc[52]: 
/**/conn49.close();
2024-04-22 02:38:11.188840+03:00 database: connecting session #62 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 02:38:11.189948+03:00 lock: 52 shared read unlock SYS 
2024-04-22 02:38:11.190158+03:00 database: disconnecting session #52
2024-04-22 02:38:11.190183+03:00 jdbc[62]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 02:38:11.190336+03:00 database: disconnected session #52
2024-04-22 02:38:11.190434+03:00 jdbc[62]: 
/**/Connection conn59 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 02:38:11.190562+03:00 jdbc[62]: 
/**/conn59.isReadOnly();
2024-04-22 02:38:11.190795+03:00 jdbc[62]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 02:38:11.190908+03:00 jdbc[62]: 
/**/conn59.getAutoCommit();
2024-04-22 02:38:12.703475+03:00 jdbc[53]: 
/**/conn50.close();
2024-04-22 02:38:12.703791+03:00 lock: 53 shared read unlock SYS 
2024-04-22 02:38:12.703968+03:00 database: disconnecting session #53
2024-04-22 02:38:12.704112+03:00 database: disconnected session #53
2024-04-22 02:38:12.704599+03:00 database: connecting session #63 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 02:38:12.704961+03:00 jdbc[63]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 02:38:12.705119+03:00 jdbc[63]: 
/**/Connection conn60 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 02:38:12.705209+03:00 jdbc[63]: 
/**/conn60.isReadOnly();
2024-04-22 02:38:12.705434+03:00 jdbc[63]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 02:38:12.705548+03:00 jdbc[63]: 
/**/conn60.getAutoCommit();
2024-04-22 06:35:18.260996+03:00 jdbc[54]: 
/**/conn51.close();
2024-04-22 06:35:18.261721+03:00 database: connecting session #64 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 06:35:18.266984+03:00 lock: 54 shared read unlock SYS 
2024-04-22 06:35:18.267100+03:00 database: disconnecting session #54
2024-04-22 06:35:18.267110+03:00 jdbc[64]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 06:35:18.267181+03:00 database: disconnected session #54
2024-04-22 06:35:18.267226+03:00 jdbc[64]: 
/**/Connection conn61 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 06:35:18.267282+03:00 jdbc[64]: 
/**/conn61.isReadOnly();
2024-04-22 06:35:18.267391+03:00 jdbc[64]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 06:35:18.267442+03:00 jdbc[64]: 
/**/conn61.getAutoCommit();
2024-04-22 06:35:39.453904+03:00 jdbc[56]: 
/**/conn53.close();
2024-04-22 06:35:39.454994+03:00 database: connecting session #65 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 06:35:39.459467+03:00 lock: 56 shared read unlock SYS 
2024-04-22 06:35:39.459609+03:00 database: disconnecting session #56
2024-04-22 06:35:39.459642+03:00 jdbc[65]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 06:35:39.459712+03:00 database: disconnected session #56
2024-04-22 06:35:39.459772+03:00 jdbc[65]: 
/**/Connection conn62 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 06:35:39.459843+03:00 jdbc[65]: 
/**/conn62.isReadOnly();
2024-04-22 06:35:39.459968+03:00 jdbc[65]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 06:35:39.460069+03:00 jdbc[65]: 
/**/conn62.getAutoCommit();
2024-04-22 06:35:44.196893+03:00 jdbc[55]: 
/**/conn52.close();
2024-04-22 06:35:44.197068+03:00 lock: 55 shared read unlock SYS 
2024-04-22 06:35:44.197152+03:00 database: disconnecting session #55
2024-04-22 06:35:44.197214+03:00 database: disconnected session #55
2024-04-22 06:35:44.197389+03:00 database: connecting session #66 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 06:35:44.197565+03:00 jdbc[66]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 06:35:44.197642+03:00 jdbc[66]: 
/**/Connection conn63 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 06:35:44.197683+03:00 jdbc[66]: 
/**/conn63.isReadOnly();
2024-04-22 06:35:44.197787+03:00 jdbc[66]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 06:35:44.197839+03:00 jdbc[66]: 
/**/conn63.getAutoCommit();
2024-04-22 06:36:01.351472+03:00 jdbc[58]: 
/**/conn55.close();
2024-04-22 06:36:01.351946+03:00 lock: 58 shared read unlock SYS 
2024-04-22 06:36:01.352050+03:00 database: disconnecting session #58
2024-04-22 06:36:01.352120+03:00 database: disconnected session #58
2024-04-22 06:36:01.352223+03:00 database: connecting session #67 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 06:36:01.352404+03:00 jdbc[67]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 06:36:01.352476+03:00 jdbc[67]: 
/**/Connection conn64 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 06:36:01.352529+03:00 jdbc[67]: 
/**/conn64.isReadOnly();
2024-04-22 06:36:01.352638+03:00 jdbc[67]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 06:36:01.352686+03:00 jdbc[67]: 
/**/conn64.getAutoCommit();
2024-04-22 06:36:06.711000+03:00 jdbc[57]: 
/**/conn54.close();
2024-04-22 06:36:06.711213+03:00 lock: 57 shared read unlock SYS 
2024-04-22 06:36:06.711311+03:00 database: disconnecting session #57
2024-04-22 06:36:06.711382+03:00 database: disconnected session #57
2024-04-22 06:36:06.711623+03:00 database: connecting session #68 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 06:36:06.711801+03:00 jdbc[68]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 06:36:06.711872+03:00 jdbc[68]: 
/**/Connection conn65 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 06:36:06.711924+03:00 jdbc[68]: 
/**/conn65.isReadOnly();
2024-04-22 06:36:06.712025+03:00 jdbc[68]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 06:36:06.712082+03:00 jdbc[68]: 
/**/conn65.getAutoCommit();
2024-04-22 06:36:09.031666+03:00 jdbc[60]: 
/**/conn57.close();
2024-04-22 06:36:09.032175+03:00 lock: 60 shared read unlock SYS 
2024-04-22 06:36:09.032189+03:00 database: connecting session #69 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 06:36:09.032303+03:00 database: disconnecting session #60
2024-04-22 06:36:09.032359+03:00 database: disconnected session #60
2024-04-22 06:36:09.032407+03:00 jdbc[69]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 06:36:09.032479+03:00 jdbc[69]: 
/**/Connection conn66 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 06:36:09.032522+03:00 jdbc[69]: 
/**/conn66.isReadOnly();
2024-04-22 06:36:09.032631+03:00 jdbc[69]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 06:36:09.032682+03:00 jdbc[69]: 
/**/conn66.getAutoCommit();
2024-04-22 06:36:09.297878+03:00 jdbc[61]: 
/**/conn58.close();
2024-04-22 06:36:09.298054+03:00 lock: 61 shared read unlock SYS 
2024-04-22 06:36:09.298124+03:00 database: disconnecting session #61
2024-04-22 06:36:09.298174+03:00 database: disconnected session #61
2024-04-22 06:36:09.298684+03:00 database: connecting session #70 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 06:36:09.298834+03:00 jdbc[70]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 06:36:09.298900+03:00 jdbc[70]: 
/**/Connection conn67 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 06:36:09.298937+03:00 jdbc[70]: 
/**/conn67.isReadOnly();
2024-04-22 06:36:09.299036+03:00 jdbc[70]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 06:36:09.299083+03:00 jdbc[70]: 
/**/conn67.getAutoCommit();
2024-04-22 06:36:26.321783+03:00 jdbc[59]: 
/**/conn56.close();
2024-04-22 06:36:26.322536+03:00 database: connecting session #71 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 06:36:26.327192+03:00 lock: 59 shared read unlock SYS 
2024-04-22 06:36:26.327297+03:00 database: disconnecting session #59
2024-04-22 06:36:26.327317+03:00 jdbc[71]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 06:36:26.327373+03:00 database: disconnected session #59
2024-04-22 06:36:26.327423+03:00 jdbc[71]: 
/**/Connection conn68 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 06:36:26.327506+03:00 jdbc[71]: 
/**/conn68.isReadOnly();
2024-04-22 06:36:26.327654+03:00 jdbc[71]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 06:36:26.327712+03:00 jdbc[71]: 
/**/conn68.getAutoCommit();
2024-04-22 06:36:36.634245+03:00 jdbc[63]: 
/**/conn60.close();
2024-04-22 06:36:36.634451+03:00 lock: 63 shared read unlock SYS 
2024-04-22 06:36:36.634550+03:00 database: disconnecting session #63
2024-04-22 06:36:36.634622+03:00 database: disconnected session #63
2024-04-22 06:36:36.634804+03:00 database: connecting session #72 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 06:36:36.634997+03:00 jdbc[72]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 06:36:36.635091+03:00 jdbc[72]: 
/**/Connection conn69 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 06:36:36.635146+03:00 jdbc[72]: 
/**/conn69.isReadOnly();
2024-04-22 06:36:36.635256+03:00 jdbc[72]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 06:36:36.635309+03:00 jdbc[72]: 
/**/conn69.getAutoCommit();
2024-04-22 06:36:48.707759+03:00 jdbc[62]: 
/**/conn59.close();
2024-04-22 06:36:48.707992+03:00 lock: 62 shared read unlock SYS 
2024-04-22 06:36:48.708093+03:00 database: disconnecting session #62
2024-04-22 06:36:48.708162+03:00 database: disconnected session #62
2024-04-22 06:36:48.708311+03:00 database: connecting session #73 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 06:36:48.708488+03:00 jdbc[73]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 06:36:48.708564+03:00 jdbc[73]: 
/**/Connection conn70 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 06:36:48.708618+03:00 jdbc[73]: 
/**/conn70.isReadOnly();
2024-04-22 06:36:48.708724+03:00 jdbc[73]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 06:36:48.708774+03:00 jdbc[73]: 
/**/conn70.getAutoCommit();
2024-04-22 07:04:39.643090+03:00 jdbc[64]: 
/**/conn61.close();
2024-04-22 07:04:39.644504+03:00 database: connecting session #74 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 07:04:39.649127+03:00 lock: 64 shared read unlock SYS 
2024-04-22 07:04:39.649313+03:00 database: disconnecting session #64
2024-04-22 07:04:39.649339+03:00 jdbc[74]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 07:04:39.649445+03:00 database: disconnected session #64
2024-04-22 07:04:39.649527+03:00 jdbc[74]: 
/**/Connection conn71 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 07:04:39.649624+03:00 jdbc[74]: 
/**/conn71.isReadOnly();
2024-04-22 07:04:39.649822+03:00 jdbc[74]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 07:04:39.649910+03:00 jdbc[74]: 
/**/conn71.getAutoCommit();
2024-04-22 07:05:12.393346+03:00 jdbc[65]: 
/**/conn62.close();
2024-04-22 07:05:12.394411+03:00 database: connecting session #75 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 07:05:12.399017+03:00 lock: 65 shared read unlock SYS 
2024-04-22 07:05:12.399209+03:00 jdbc[75]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 07:05:12.399215+03:00 database: disconnecting session #65
2024-04-22 07:05:12.399350+03:00 jdbc[75]: 
/**/Connection conn72 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 07:05:12.399421+03:00 database: disconnected session #65
2024-04-22 07:05:12.399510+03:00 jdbc[75]: 
/**/conn72.isReadOnly();
2024-04-22 07:05:12.399717+03:00 jdbc[75]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 07:05:12.399805+03:00 jdbc[75]: 
/**/conn72.getAutoCommit();
2024-04-22 07:05:27.530325+03:00 jdbc[70]: 
/**/conn67.close();
2024-04-22 07:05:27.531733+03:00 database: connecting session #76 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 07:05:27.535940+03:00 lock: 70 shared read unlock SYS 
2024-04-22 07:05:27.536115+03:00 database: disconnecting session #70
2024-04-22 07:05:27.536144+03:00 jdbc[76]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 07:05:27.536259+03:00 database: disconnected session #70
2024-04-22 07:05:27.536379+03:00 jdbc[76]: 
/**/Connection conn73 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 07:05:27.536503+03:00 jdbc[76]: 
/**/conn73.isReadOnly();
2024-04-22 07:05:27.536739+03:00 jdbc[76]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 07:05:27.536845+03:00 jdbc[76]: 
/**/conn73.getAutoCommit();
2024-04-22 07:05:39.159969+03:00 jdbc[67]: 
/**/conn64.close();
2024-04-22 07:05:39.160284+03:00 lock: 67 shared read unlock SYS 
2024-04-22 07:05:39.160569+03:00 database: disconnecting session #67
2024-04-22 07:05:39.160730+03:00 database: disconnected session #67
2024-04-22 07:05:39.160983+03:00 database: connecting session #77 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 07:05:39.161259+03:00 jdbc[77]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 07:05:39.161379+03:00 jdbc[77]: 
/**/Connection conn74 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 07:05:39.161472+03:00 jdbc[77]: 
/**/conn74.isReadOnly();
2024-04-22 07:05:39.161651+03:00 jdbc[77]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 07:05:39.161740+03:00 jdbc[77]: 
/**/conn74.getAutoCommit();
2024-04-22 07:05:42.043850+03:00 jdbc[66]: 
/**/conn63.close();
2024-04-22 07:05:42.044478+03:00 lock: 66 shared read unlock SYS 
2024-04-22 07:05:42.044614+03:00 database: disconnecting session #66
2024-04-22 07:05:42.044715+03:00 database: disconnected session #66
2024-04-22 07:05:42.044915+03:00 database: connecting session #78 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 07:05:42.045193+03:00 jdbc[78]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 07:05:42.045328+03:00 jdbc[78]: 
/**/Connection conn75 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 07:05:42.045413+03:00 jdbc[78]: 
/**/conn75.isReadOnly();
2024-04-22 07:05:42.045609+03:00 jdbc[78]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 07:05:42.045714+03:00 jdbc[78]: 
/**/conn75.getAutoCommit();
2024-04-22 07:05:49.310148+03:00 jdbc[71]: 
/**/conn68.close();
2024-04-22 07:05:49.310474+03:00 lock: 71 shared read unlock SYS 
2024-04-22 07:05:49.310646+03:00 database: disconnecting session #71
2024-04-22 07:05:49.310776+03:00 database: disconnected session #71
2024-04-22 07:05:49.311069+03:00 database: connecting session #79 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 07:05:49.311385+03:00 jdbc[79]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 07:05:49.311528+03:00 jdbc[79]: 
/**/Connection conn76 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 07:05:49.311662+03:00 jdbc[79]: 
/**/conn76.isReadOnly();
2024-04-22 07:05:49.311874+03:00 jdbc[79]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 07:05:49.311975+03:00 jdbc[79]: 
/**/conn76.getAutoCommit();
2024-04-22 07:05:54.209780+03:00 jdbc[69]: 
/**/conn66.close();
2024-04-22 07:05:54.210735+03:00 database: connecting session #80 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 07:05:54.215438+03:00 lock: 69 shared read unlock SYS 
2024-04-22 07:05:54.215594+03:00 database: disconnecting session #69
2024-04-22 07:05:54.215676+03:00 jdbc[80]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 07:05:54.215703+03:00 database: disconnected session #69
2024-04-22 07:05:54.215845+03:00 jdbc[80]: 
/**/Connection conn77 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 07:05:54.215929+03:00 jdbc[80]: 
/**/conn77.isReadOnly();
2024-04-22 07:05:54.216128+03:00 jdbc[80]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 07:05:54.216226+03:00 jdbc[80]: 
/**/conn77.getAutoCommit();
2024-04-22 07:06:04.362363+03:00 jdbc[68]: 
/**/conn65.close();
2024-04-22 07:06:04.362756+03:00 lock: 68 shared read unlock SYS 
2024-04-22 07:06:04.362943+03:00 database: disconnecting session #68
2024-04-22 07:06:04.363087+03:00 database: disconnected session #68
2024-04-22 07:06:04.363398+03:00 database: connecting session #81 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 07:06:04.363759+03:00 jdbc[81]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 07:06:04.363935+03:00 jdbc[81]: 
/**/Connection conn78 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 07:06:04.364046+03:00 jdbc[81]: 
/**/conn78.isReadOnly();
2024-04-22 07:06:04.364256+03:00 jdbc[81]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 07:06:04.364360+03:00 jdbc[81]: 
/**/conn78.getAutoCommit();
2024-04-22 07:06:14.968710+03:00 jdbc[72]: 
/**/conn69.close();
2024-04-22 07:06:14.969094+03:00 lock: 72 shared read unlock SYS 
2024-04-22 07:06:14.969312+03:00 database: disconnecting session #72
2024-04-22 07:06:14.969464+03:00 database: disconnected session #72
2024-04-22 07:06:14.969668+03:00 database: connecting session #82 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 07:06:14.969991+03:00 jdbc[82]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 07:06:14.970120+03:00 jdbc[82]: 
/**/Connection conn79 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 07:06:14.970221+03:00 jdbc[82]: 
/**/conn79.isReadOnly();
2024-04-22 07:06:14.970414+03:00 jdbc[82]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 07:06:14.970509+03:00 jdbc[82]: 
/**/conn79.getAutoCommit();
2024-04-22 07:06:35.843905+03:00 jdbc[73]: 
/**/conn70.close();
2024-04-22 07:06:35.844997+03:00 database: connecting session #83 to /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 07:06:35.849469+03:00 lock: 73 shared read unlock SYS 
2024-04-22 07:06:35.849674+03:00 database: disconnecting session #73
2024-04-22 07:06:35.849678+03:00 jdbc[83]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2024-04-22 07:06:35.849830+03:00 database: disconnected session #73
2024-04-22 07:06:35.849920+03:00 jdbc[83]: 
/**/Connection conn80 = DriverManager.getConnection("jdbc:h2://Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb;TRACE_LEVEL_FILE=3", "NIR", "");
2024-04-22 07:06:35.850040+03:00 jdbc[83]: 
/**/conn80.isReadOnly();
2024-04-22 07:06:35.850246+03:00 jdbc[83]: 
/*SQL #:1*/CALL READONLY();
2024-04-22 07:06:35.850358+03:00 jdbc[83]: 
/**/conn80.getAutoCommit();
2024-04-22 07:32:03.088617+03:00 jdbc[74]: 
/**/conn71.close();
2024-04-22 07:32:03.090158+03:00 lock: 74 shared read unlock SYS 
2024-04-22 07:32:03.090300+03:00 database: disconnecting session #74
2024-04-22 07:32:03.090381+03:00 database: disconnected session #74
2024-04-22 07:32:03.090451+03:00 jdbc[75]: 
/**/conn72.close();
2024-04-22 07:32:03.090523+03:00 lock: 75 shared read unlock SYS 
2024-04-22 07:32:03.090582+03:00 database: disconnecting session #75
2024-04-22 07:32:03.090639+03:00 database: disconnected session #75
2024-04-22 07:32:03.090684+03:00 jdbc[76]: 
/**/conn73.close();
2024-04-22 07:32:03.090748+03:00 lock: 76 shared read unlock SYS 
2024-04-22 07:32:03.090808+03:00 database: disconnecting session #76
2024-04-22 07:32:03.090856+03:00 database: disconnected session #76
2024-04-22 07:32:03.090895+03:00 jdbc[77]: 
/**/conn74.close();
2024-04-22 07:32:03.090958+03:00 lock: 77 shared read unlock SYS 
2024-04-22 07:32:03.091021+03:00 database: disconnecting session #77
2024-04-22 07:32:03.091066+03:00 database: disconnected session #77
2024-04-22 07:32:03.091093+03:00 jdbc[78]: 
/**/conn75.close();
2024-04-22 07:32:03.091147+03:00 lock: 78 shared read unlock SYS 
2024-04-22 07:32:03.091202+03:00 database: disconnecting session #78
2024-04-22 07:32:03.091245+03:00 database: disconnected session #78
2024-04-22 07:32:03.091273+03:00 jdbc[79]: 
/**/conn76.close();
2024-04-22 07:32:03.091322+03:00 lock: 79 shared read unlock SYS 
2024-04-22 07:32:03.091370+03:00 database: disconnecting session #79
2024-04-22 07:32:03.091416+03:00 database: disconnected session #79
2024-04-22 07:32:03.091448+03:00 jdbc[80]: 
/**/conn77.close();
2024-04-22 07:32:03.091496+03:00 lock: 80 shared read unlock SYS 
2024-04-22 07:32:03.091539+03:00 database: disconnecting session #80
2024-04-22 07:32:03.091580+03:00 database: disconnected session #80
2024-04-22 07:32:03.091614+03:00 jdbc[81]: 
/**/conn78.close();
2024-04-22 07:32:03.091662+03:00 lock: 81 shared read unlock SYS 
2024-04-22 07:32:03.091706+03:00 database: disconnecting session #81
2024-04-22 07:32:03.091747+03:00 database: disconnected session #81
2024-04-22 07:32:03.091780+03:00 jdbc[82]: 
/**/conn79.close();
2024-04-22 07:32:03.091835+03:00 lock: 82 shared read unlock SYS 
2024-04-22 07:32:03.091890+03:00 database: disconnecting session #82
2024-04-22 07:32:03.091940+03:00 database: disconnected session #82
2024-04-22 07:32:03.091971+03:00 jdbc[83]: 
/**/conn80.close();
2024-04-22 07:32:03.092033+03:00 lock: 83 shared read unlock SYS 
2024-04-22 07:32:03.092098+03:00 database: disconnecting session #83
2024-04-22 07:32:03.092148+03:00 database: disconnected session #83
2024-04-22 07:32:03.098737+03:00 jdbc[13]: 
/**/conn10.close();
2024-04-22 07:32:03.098985+03:00 lock: 13 shared read unlock SYS 
2024-04-22 07:32:03.099069+03:00 database: disconnecting session #13
2024-04-22 07:32:03.099159+03:00 database: closing /Users/Nir/Desktop/NAM/Projects/WeatherApiProject/WeatherApiService/src/main/resources/db/weatherdb
2024-04-22 07:32:03.099992+03:00 lock: 2 shared read unlock SYS 
2024-04-22 07:32:03.100103+03:00 lock: 1 shared read unlock SYS 
2024-04-22 07:32:03.145921+03:00 database: closed
2024-04-22 07:32:03.146496+03:00 database: disconnected session #13
